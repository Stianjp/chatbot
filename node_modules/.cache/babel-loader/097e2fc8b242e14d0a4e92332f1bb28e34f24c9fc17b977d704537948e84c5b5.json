{"ast":null,"code":"var _jsxFileName = \"/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeni\\xF8r - bachelor/3.a\\u030Aret/Bachelor/Bacheloroppgave/chatbot/src/components/Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { initialMessage, phaseOnePrompt, phaseTwoPrompt } from \"../data/chatbotPrompts\"; // Tilpass stien\nimport { clearBackendData, saveUserData } from \"../api/chatbotApi\"; // Tilpass hvis du bruker\nimport { askChatbot } from \"../utils/langchainChatbot\"; // Tilpass stien\nimport \"../styles/Chatbot.css\";\nimport logo from \"../media/logo.png\";\nimport miniLogo from \"../media/MH_logo.png\";\n\n/*\n  Oppsett:\n   - Fase 1: GPT genererer 5–8 korte spørsmål for å bli kjent med brukeren.\n   - Fase 2: Gå dypere på motivasjon.\n   - Samtykke (consent) i start, om du ønsker.\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  // Chat-historikk\n  const [messages, setMessages] = useState([{\n    text: initialMessage,\n    sender: \"bot\"\n  }]);\n\n  // Samtykke (true/false) eller null (ikke svart ennå)\n  const [consent, setConsent] = useState(null);\n\n  // Inputfelt\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Fase: 1 = kartlegging, 2 = dyp motivasjon\n  const [phase, setPhase] = useState(1);\n\n  // Teller på antall meldinger i nåværende fase (spesielt for fase 1)\n  // GPT har lov å stille 5–8 spørsmål i fase 1, så ved ~8 GPT-svar fra assistant bytter du til fase 2\n  const [assistantQuestionCount, setAssistantQuestionCount] = useState(0);\n\n  // Hooks for scrolling / input\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // Tøm backend-data ved oppstart\n  useEffect(() => {\n    clearBackendData();\n  }, []);\n\n  // Autofokus og autoscroll\n  useEffect(() => {\n    scrollToBottom();\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [messages]);\n\n  // Håndter samtykke\n  const handleConsent = userConsent => {\n    setConsent(userConsent);\n    const userConsentMsg = userConsent ? \"Ja, jeg godtar.\" : \"Nei, jeg ønsker ikke lagring.\";\n    setMessages(prev => [...prev, {\n      text: userConsentMsg,\n      sender: \"user\"\n    }, {\n      text: \"Takk for tilbakemeldingen! Da kan vi starte!\",\n      sender: \"bot\"\n    }]);\n  };\n\n  // Send melding-funksjon\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n\n    // Brukermelding\n    const userMessage = {\n      text: input.trim(),\n      sender: \"user\"\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    // Tøm input\n    setInput(\"\");\n    inputRef.current.style.height = \"30px\";\n    setIsTyping(true);\n    setTimeout(async () => {\n      let botReply = \"\";\n\n      // Bygg GPT-kontekst: Alle meldinger + ny brukermelding\n      // (konverteres til {role, content} i en hjelpefunksjon)\n      const conversationMessages = buildGptConversation([...messages, userMessage]);\n      if (phase === 1) {\n        // Fase 1 => bruk phaseOnePrompt\n        botReply = await askChatbot(conversationMessages, phaseOnePrompt);\n\n        // TELL: Hvor mange av GPT (assistant) sine svar har vi nå i fase 1?\n        // For å telle GPT-svar, kan vi sjekke:\n        const assistantMessagesInPhase1 = countAssistantMessagesForPhase([...messages, {\n          text: botReply,\n          sender: \"bot\"\n        }]);\n        setAssistantQuestionCount(assistantMessagesInPhase1);\n\n        // Bytt til fase 2 når GPT har stilt ~ 5–8 spørsmål\n        // Du kan velge 5, 6, 8, etc.\n        if (assistantMessagesInPhase1 >= 5) {\n          // Lagre data i backend om du vil (samle inn i userData, etc.)\n          await saveUserData(consent, {/* dine data om du vil */});\n\n          // Meld at vi nå går dypere\n          botReply += \"\\n\\nJeg tror vi har en god start. La oss gå litt dypere på motivasjonen din!\";\n          setPhase(2);\n        }\n      } else if (phase === 2) {\n        // Fase 2 => bruk phaseTwoPrompt\n        botReply = await askChatbot(conversationMessages, phaseTwoPrompt);\n      }\n\n      // Oppdater chat\n      setMessages(prev => [...prev, {\n        text: botReply,\n        sender: \"bot\"\n      }]);\n      setIsTyping(false);\n      setLoading(false);\n    }, 400);\n  };\n\n  // Autoscroll\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  };\n\n  // Input auto-resize\n  const handleInputChange = e => {\n    setInput(e.target.value);\n    e.target.style.height = \"30px\";\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"MeyerHaugen\",\n        className: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chat-date\",\n        children: new Date().toLocaleDateString(\"no-NO\", {\n          weekday: \"long\",\n          day: \"numeric\",\n          month: \"long\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: [messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.sender}`,\n        children: [msg.sender === \"bot\" ? i === messages.length - 1 ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: miniLogo,\n          alt: \"Bot\",\n          className: \"bot-avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot-avatar-placeholder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-bubble ${msg.sender}`,\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-bubble\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), consent === null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"consent-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"accept\",\n        onClick: () => handleConsent(true),\n        children: \"Godta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"decline\",\n        onClick: () => handleConsent(false),\n        children: \"Avsl\\xE5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this), consent !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: inputRef,\n        placeholder: \"Skriv melding her\",\n        value: input,\n        onChange: handleInputChange,\n        onKeyDown: e => {\n          if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            sendMessage();\n          }\n        },\n        disabled: loading,\n        rows: 1,\n        style: {\n          resize: \"none\",\n          minHeight: \"30px\",\n          maxHeight: \"200px\",\n          overflowY: \"auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: loading,\n        children: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n\n/** Konverter chat-historikk fra {sender, text} til {role, content} for GPT */\n_s(Chatbot, \"qTZBijDt3IRMw9aezjdtCUgruM4=\");\n_c = Chatbot;\nfunction buildGptConversation(allMessages) {\n  return allMessages.map(m => ({\n    role: m.sender === \"bot\" ? \"assistant\" : \"user\",\n    content: m.text\n  }));\n}\n\n/** \n * Hjelpefunksjon for å telle hvor mange assistant-svar \n * (altså GPT-spørsmål) har blitt stilt i fase 1.\n */\nfunction countAssistantMessagesForPhase(allMessages) {\n  // Teller \"bot\" meldinger etter initialMessage\n  // Du kan også sjekke om \"phase=1\" ble satt\n  // men for enkelhets skyld bare teller vi antall meldinger med sender=bot\n  // unntatt den aller første (initialMessage)\n  let assistantCount = 0;\n  for (let i = 0; i < allMessages.length; i++) {\n    if (allMessages[i].sender === \"bot\") {\n      // Sjekk om det er initialMessage\n      if (allMessages[i].text !== initialMessage) {\n        assistantCount++;\n      }\n    }\n  }\n  return assistantCount;\n}\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","initialMessage","phaseOnePrompt","phaseTwoPrompt","clearBackendData","saveUserData","askChatbot","logo","miniLogo","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","text","sender","consent","setConsent","input","setInput","loading","setLoading","isTyping","setIsTyping","phase","setPhase","assistantQuestionCount","setAssistantQuestionCount","messagesEndRef","inputRef","scrollToBottom","current","focus","handleConsent","userConsent","userConsentMsg","prev","sendMessage","trim","userMessage","style","height","setTimeout","botReply","conversationMessages","buildGptConversation","assistantMessagesInPhase1","countAssistantMessagesForPhase","scrollIntoView","behavior","handleInputChange","e","target","value","scrollHeight","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","Date","toLocaleDateString","weekday","day","month","map","msg","i","length","ref","onClick","placeholder","onChange","onKeyDown","key","shiftKey","preventDefault","disabled","rows","resize","minHeight","maxHeight","overflowY","_c","allMessages","m","role","content","assistantCount","$RefreshReg$"],"sources":["/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeniør - bachelor/3.året/Bachelor/Bacheloroppgave/chatbot/src/components/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  initialMessage,\n  phaseOnePrompt,\n  phaseTwoPrompt\n} from \"../data/chatbotPrompts\"; // Tilpass stien\nimport { clearBackendData, saveUserData } from \"../api/chatbotApi\"; // Tilpass hvis du bruker\nimport { askChatbot } from \"../utils/langchainChatbot\"; // Tilpass stien\nimport \"../styles/Chatbot.css\";\nimport logo from \"../media/logo.png\";\nimport miniLogo from \"../media/MH_logo.png\";\n\n/*\n  Oppsett:\n   - Fase 1: GPT genererer 5–8 korte spørsmål for å bli kjent med brukeren.\n   - Fase 2: Gå dypere på motivasjon.\n   - Samtykke (consent) i start, om du ønsker.\n*/\n\nconst Chatbot = () => {\n  // Chat-historikk\n  const [messages, setMessages] = useState([\n    { text: initialMessage, sender: \"bot\" },\n  ]);\n\n  // Samtykke (true/false) eller null (ikke svart ennå)\n  const [consent, setConsent] = useState(null);\n\n  // Inputfelt\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Fase: 1 = kartlegging, 2 = dyp motivasjon\n  const [phase, setPhase] = useState(1);\n\n  // Teller på antall meldinger i nåværende fase (spesielt for fase 1)\n  // GPT har lov å stille 5–8 spørsmål i fase 1, så ved ~8 GPT-svar fra assistant bytter du til fase 2\n  const [assistantQuestionCount, setAssistantQuestionCount] = useState(0);\n\n  // Hooks for scrolling / input\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // Tøm backend-data ved oppstart\n  useEffect(() => {\n    clearBackendData();\n  }, []);\n\n  // Autofokus og autoscroll\n  useEffect(() => {\n    scrollToBottom();\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [messages]);\n\n  // Håndter samtykke\n  const handleConsent = (userConsent) => {\n    setConsent(userConsent);\n    const userConsentMsg = userConsent ? \"Ja, jeg godtar.\" : \"Nei, jeg ønsker ikke lagring.\";\n    setMessages((prev) => [\n      ...prev,\n      { text: userConsentMsg, sender: \"user\" },\n      { text: \"Takk for tilbakemeldingen! Da kan vi starte!\", sender: \"bot\" },\n    ]);\n  };\n\n  // Send melding-funksjon\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n\n    // Brukermelding\n    const userMessage = { text: input.trim(), sender: \"user\" };\n    setMessages((prev) => [...prev, userMessage]);\n\n    // Tøm input\n    setInput(\"\");\n    inputRef.current.style.height = \"30px\";\n\n    setIsTyping(true);\n\n    setTimeout(async () => {\n      let botReply = \"\";\n\n      // Bygg GPT-kontekst: Alle meldinger + ny brukermelding\n      // (konverteres til {role, content} i en hjelpefunksjon)\n      const conversationMessages = buildGptConversation([...messages, userMessage]);\n\n      if (phase === 1) {\n        // Fase 1 => bruk phaseOnePrompt\n        botReply = await askChatbot(conversationMessages, phaseOnePrompt);\n\n        // TELL: Hvor mange av GPT (assistant) sine svar har vi nå i fase 1?\n        // For å telle GPT-svar, kan vi sjekke:\n        const assistantMessagesInPhase1 = countAssistantMessagesForPhase([...messages, { text: botReply, sender: \"bot\" }]);\n        setAssistantQuestionCount(assistantMessagesInPhase1);\n\n        // Bytt til fase 2 når GPT har stilt ~ 5–8 spørsmål\n        // Du kan velge 5, 6, 8, etc.\n        if (assistantMessagesInPhase1 >= 5) {\n          // Lagre data i backend om du vil (samle inn i userData, etc.)\n          await saveUserData(consent, { /* dine data om du vil */ });\n\n          // Meld at vi nå går dypere\n          botReply += \"\\n\\nJeg tror vi har en god start. La oss gå litt dypere på motivasjonen din!\";\n          setPhase(2);\n        }\n\n      } else if (phase === 2) {\n        // Fase 2 => bruk phaseTwoPrompt\n        botReply = await askChatbot(conversationMessages, phaseTwoPrompt);\n      }\n\n      // Oppdater chat\n      setMessages((prev) => [...prev, { text: botReply, sender: \"bot\" }]);\n\n      setIsTyping(false);\n      setLoading(false);\n    }, 400);\n  };\n\n  // Autoscroll\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  // Input auto-resize\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n    e.target.style.height = \"30px\";\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <header className=\"chat-header\">\n        <img src={logo} alt=\"MeyerHaugen\" className=\"logo\" />\n        <p className=\"chat-date\">\n          {new Date().toLocaleDateString(\"no-NO\", {\n            weekday: \"long\",\n            day: \"numeric\",\n            month: \"long\",\n          })}\n        </p>\n      </header>\n\n      <div className=\"chatbot-messages\">\n        {messages.map((msg, i) => (\n          <div key={i} className={`chat-message ${msg.sender}`}>\n            {msg.sender === \"bot\" ? (\n              i === messages.length - 1 ? (\n                <img src={miniLogo} alt=\"Bot\" className=\"bot-avatar\" />\n              ) : (\n                <div className=\"bot-avatar-placeholder\"></div>\n              )\n            ) : null}\n            <div className={`chat-bubble ${msg.sender}`}>{msg.text}</div>\n          </div>\n        ))}\n\n        {isTyping && (\n          <div className=\"typing-bubble\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n        )}\n\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Samtykke */}\n      {consent === null && (\n        <div className=\"consent-buttons\">\n          <button className=\"accept\" onClick={() => handleConsent(true)}>Godta</button>\n          <button className=\"decline\" onClick={() => handleConsent(false)}>Avslå</button>\n        </div>\n      )}\n\n      {/* Inputfelt */}\n      {consent !== null && (\n        <div className=\"chat-input\">\n          <textarea\n            ref={inputRef}\n            placeholder=\"Skriv melding her\"\n            value={input}\n            onChange={handleInputChange}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\" && !e.shiftKey) {\n                e.preventDefault();\n                sendMessage();\n              }\n            }}\n            disabled={loading}\n            rows={1}\n            style={{\n              resize: \"none\",\n              minHeight: \"30px\",\n              maxHeight: \"200px\",\n              overflowY: \"auto\",\n            }}\n          />\n          <button onClick={sendMessage} disabled={loading}>➤</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\n/** Konverter chat-historikk fra {sender, text} til {role, content} for GPT */\nfunction buildGptConversation(allMessages) {\n  return allMessages.map((m) => ({\n    role: m.sender === \"bot\" ? \"assistant\" : \"user\",\n    content: m.text,\n  }));\n}\n\n/** \n * Hjelpefunksjon for å telle hvor mange assistant-svar \n * (altså GPT-spørsmål) har blitt stilt i fase 1.\n */\nfunction countAssistantMessagesForPhase(allMessages) {\n  // Teller \"bot\" meldinger etter initialMessage\n  // Du kan også sjekke om \"phase=1\" ble satt\n  // men for enkelhets skyld bare teller vi antall meldinger med sender=bot\n  // unntatt den aller første (initialMessage)\n  let assistantCount = 0;\n  for (let i = 0; i < allMessages.length; i++) {\n    if (allMessages[i].sender === \"bot\") {\n      // Sjekk om det er initialMessage\n      if (allMessages[i].text !== initialMessage) {\n        assistantCount++;\n      }\n    }\n  }\n  return assistantCount;\n}\n\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}