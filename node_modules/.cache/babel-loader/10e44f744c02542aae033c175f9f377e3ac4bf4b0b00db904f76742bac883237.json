{"ast":null,"code":"import * as uuid from \"uuid\";\nimport { AsyncCaller } from \"./utils/async_caller.js\";\nimport { convertLangChainMessageToExample, isLangChainMessage } from \"./utils/messages.js\";\nimport { getEnvironmentVariable, getLangChainEnvVarsMetadata, getLangSmithEnvironmentVariable, getRuntimeEnvironment } from \"./utils/env.js\";\nimport { __version__ } from \"./index.js\";\nimport { assertUuid } from \"./utils/_uuid.js\";\nimport { warnOnce } from \"./utils/warn.js\";\nimport { parsePromptIdentifier } from \"./utils/prompts.js\";\nimport { raiseForStatus } from \"./utils/error.js\";\nimport { _getFetchImplementation } from \"./singletons/fetch.js\";\nimport { serialize as serializePayloadForTracing } from \"./utils/fast-safe-stringify/index.js\";\nexport function mergeRuntimeEnvIntoRunCreate(run) {\n  const runtimeEnv = getRuntimeEnvironment();\n  const envVars = getLangChainEnvVarsMetadata();\n  const extra = run.extra ?? {};\n  const metadata = extra.metadata;\n  run.extra = {\n    ...extra,\n    runtime: {\n      ...runtimeEnv,\n      ...extra?.runtime\n    },\n    metadata: {\n      ...envVars,\n      ...(envVars.revision_id || run.revision_id ? {\n        revision_id: run.revision_id ?? envVars.revision_id\n      } : {}),\n      ...metadata\n    }\n  };\n  return run;\n}\nconst getTracingSamplingRate = () => {\n  const samplingRateStr = getLangSmithEnvironmentVariable(\"TRACING_SAMPLING_RATE\");\n  if (samplingRateStr === undefined) {\n    return undefined;\n  }\n  const samplingRate = parseFloat(samplingRateStr);\n  if (samplingRate < 0 || samplingRate > 1) {\n    throw new Error(`LANGSMITH_TRACING_SAMPLING_RATE must be between 0 and 1 if set. Got: ${samplingRate}`);\n  }\n  return samplingRate;\n};\n// utility functions\nconst isLocalhost = url => {\n  const strippedUrl = url.replace(\"http://\", \"\").replace(\"https://\", \"\");\n  const hostname = strippedUrl.split(\"/\")[0].split(\":\")[0];\n  return hostname === \"localhost\" || hostname === \"127.0.0.1\" || hostname === \"::1\";\n};\nasync function toArray(iterable) {\n  const result = [];\n  for await (const item of iterable) {\n    result.push(item);\n  }\n  return result;\n}\nfunction trimQuotes(str) {\n  if (str === undefined) {\n    return undefined;\n  }\n  return str.trim().replace(/^\"(.*)\"$/, \"$1\").replace(/^'(.*)'$/, \"$1\");\n}\nconst handle429 = async response => {\n  if (response?.status === 429) {\n    const retryAfter = parseInt(response.headers.get(\"retry-after\") ?? \"30\", 10) * 1000;\n    if (retryAfter > 0) {\n      await new Promise(resolve => setTimeout(resolve, retryAfter));\n      // Return directly after calling this check\n      return true;\n    }\n  }\n  // Fall back to existing status checks\n  return false;\n};\nexport class AutoBatchQueue {\n  constructor() {\n    Object.defineProperty(this, \"items\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"sizeBytes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n  }\n  peek() {\n    return this.items[0];\n  }\n  push(item) {\n    let itemPromiseResolve;\n    const itemPromise = new Promise(resolve => {\n      // Setting itemPromiseResolve is synchronous with promise creation:\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise\n      itemPromiseResolve = resolve;\n    });\n    const size = serializePayloadForTracing(item.item).length;\n    this.items.push({\n      action: item.action,\n      payload: item.item,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      itemPromiseResolve: itemPromiseResolve,\n      itemPromise,\n      size\n    });\n    this.sizeBytes += size;\n    return itemPromise;\n  }\n  pop(upToSizeBytes) {\n    if (upToSizeBytes < 1) {\n      throw new Error(\"Number of bytes to pop off may not be less than 1.\");\n    }\n    const popped = [];\n    let poppedSizeBytes = 0;\n    // Pop items until we reach or exceed the size limit\n    while (poppedSizeBytes + (this.peek()?.size ?? 0) < upToSizeBytes && this.items.length > 0) {\n      const item = this.items.shift();\n      if (item) {\n        popped.push(item);\n        poppedSizeBytes += item.size;\n        this.sizeBytes -= item.size;\n      }\n    }\n    // If there is an item on the queue we were unable to pop,\n    // just return it as a single batch.\n    if (popped.length === 0 && this.items.length > 0) {\n      const item = this.items.shift();\n      popped.push(item);\n      poppedSizeBytes += item.size;\n      this.sizeBytes -= item.size;\n    }\n    return [popped.map(it => ({\n      action: it.action,\n      item: it.payload\n    })), () => popped.forEach(it => it.itemPromiseResolve())];\n  }\n}\n// 20 MB\nexport const DEFAULT_BATCH_SIZE_LIMIT_BYTES = 20_971_520;\nconst SERVER_INFO_REQUEST_TIMEOUT = 2500;\nexport class Client {\n  constructor(config = {}) {\n    Object.defineProperty(this, \"apiKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"apiUrl\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"webUrl\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"caller\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"batchIngestCaller\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"timeout_ms\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_tenantId\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, \"hideInputs\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"hideOutputs\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"tracingSampleRate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"filteredPostUuids\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, \"autoBatchTracing\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"autoBatchQueue\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new AutoBatchQueue()\n    });\n    Object.defineProperty(this, \"autoBatchTimeout\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"autoBatchAggregationDelayMs\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 250\n    });\n    Object.defineProperty(this, \"batchSizeBytesLimit\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"fetchOptions\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"settings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"blockOnRootRunFinalization\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: getEnvironmentVariable(\"LANGSMITH_TRACING_BACKGROUND\") === \"false\"\n    });\n    Object.defineProperty(this, \"traceBatchConcurrency\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 5\n    });\n    Object.defineProperty(this, \"_serverInfo\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Object.defineProperty(this, \"_getServerInfoPromise\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"manualFlushMode\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    const defaultConfig = Client.getDefaultClientConfig();\n    this.tracingSampleRate = getTracingSamplingRate();\n    this.apiUrl = trimQuotes(config.apiUrl ?? defaultConfig.apiUrl) ?? \"\";\n    if (this.apiUrl.endsWith(\"/\")) {\n      this.apiUrl = this.apiUrl.slice(0, -1);\n    }\n    this.apiKey = trimQuotes(config.apiKey ?? defaultConfig.apiKey);\n    this.webUrl = trimQuotes(config.webUrl ?? defaultConfig.webUrl);\n    if (this.webUrl?.endsWith(\"/\")) {\n      this.webUrl = this.webUrl.slice(0, -1);\n    }\n    this.timeout_ms = config.timeout_ms ?? 90_000;\n    this.caller = new AsyncCaller(config.callerOptions ?? {});\n    this.traceBatchConcurrency = config.traceBatchConcurrency ?? this.traceBatchConcurrency;\n    if (this.traceBatchConcurrency < 1) {\n      throw new Error(\"Trace batch concurrency must be positive.\");\n    }\n    this.batchIngestCaller = new AsyncCaller({\n      maxRetries: 2,\n      maxConcurrency: this.traceBatchConcurrency,\n      ...(config.callerOptions ?? {}),\n      onFailedResponseHook: handle429\n    });\n    this.hideInputs = config.hideInputs ?? config.anonymizer ?? defaultConfig.hideInputs;\n    this.hideOutputs = config.hideOutputs ?? config.anonymizer ?? defaultConfig.hideOutputs;\n    this.autoBatchTracing = config.autoBatchTracing ?? this.autoBatchTracing;\n    this.blockOnRootRunFinalization = config.blockOnRootRunFinalization ?? this.blockOnRootRunFinalization;\n    this.batchSizeBytesLimit = config.batchSizeBytesLimit;\n    this.fetchOptions = config.fetchOptions || {};\n    this.manualFlushMode = config.manualFlushMode ?? this.manualFlushMode;\n  }\n  static getDefaultClientConfig() {\n    const apiKey = getLangSmithEnvironmentVariable(\"API_KEY\");\n    const apiUrl = getLangSmithEnvironmentVariable(\"ENDPOINT\") ?? \"https://api.smith.langchain.com\";\n    const hideInputs = getLangSmithEnvironmentVariable(\"HIDE_INPUTS\") === \"true\";\n    const hideOutputs = getLangSmithEnvironmentVariable(\"HIDE_OUTPUTS\") === \"true\";\n    return {\n      apiUrl: apiUrl,\n      apiKey: apiKey,\n      webUrl: undefined,\n      hideInputs: hideInputs,\n      hideOutputs: hideOutputs\n    };\n  }\n  getHostUrl() {\n    if (this.webUrl) {\n      return this.webUrl;\n    } else if (isLocalhost(this.apiUrl)) {\n      this.webUrl = \"http://localhost:3000\";\n      return this.webUrl;\n    } else if (this.apiUrl.endsWith(\"/api/v1\")) {\n      this.webUrl = this.apiUrl.replace(\"/api/v1\", \"\");\n      return this.webUrl;\n    } else if (this.apiUrl.includes(\"/api\") && !this.apiUrl.split(\".\", 1)[0].endsWith(\"api\")) {\n      this.webUrl = this.apiUrl.replace(\"/api\", \"\");\n      return this.webUrl;\n    } else if (this.apiUrl.split(\".\", 1)[0].includes(\"dev\")) {\n      this.webUrl = \"https://dev.smith.langchain.com\";\n      return this.webUrl;\n    } else if (this.apiUrl.split(\".\", 1)[0].includes(\"eu\")) {\n      this.webUrl = \"https://eu.smith.langchain.com\";\n      return this.webUrl;\n    } else if (this.apiUrl.split(\".\", 1)[0].includes(\"beta\")) {\n      this.webUrl = \"https://beta.smith.langchain.com\";\n      return this.webUrl;\n    } else {\n      this.webUrl = \"https://smith.langchain.com\";\n      return this.webUrl;\n    }\n  }\n  get headers() {\n    const headers = {\n      \"User-Agent\": `langsmith-js/${__version__}`\n    };\n    if (this.apiKey) {\n      headers[\"x-api-key\"] = `${this.apiKey}`;\n    }\n    return headers;\n  }\n  processInputs(inputs) {\n    if (this.hideInputs === false) {\n      return inputs;\n    }\n    if (this.hideInputs === true) {\n      return {};\n    }\n    if (typeof this.hideInputs === \"function\") {\n      return this.hideInputs(inputs);\n    }\n    return inputs;\n  }\n  processOutputs(outputs) {\n    if (this.hideOutputs === false) {\n      return outputs;\n    }\n    if (this.hideOutputs === true) {\n      return {};\n    }\n    if (typeof this.hideOutputs === \"function\") {\n      return this.hideOutputs(outputs);\n    }\n    return outputs;\n  }\n  prepareRunCreateOrUpdateInputs(run) {\n    const runParams = {\n      ...run\n    };\n    if (runParams.inputs !== undefined) {\n      runParams.inputs = this.processInputs(runParams.inputs);\n    }\n    if (runParams.outputs !== undefined) {\n      runParams.outputs = this.processOutputs(runParams.outputs);\n    }\n    return runParams;\n  }\n  async _getResponse(path, queryParams) {\n    const paramsString = queryParams?.toString() ?? \"\";\n    const url = `${this.apiUrl}${path}?${paramsString}`;\n    const response = await this.caller.call(_getFetchImplementation(), url, {\n      method: \"GET\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, `Failed to fetch ${path}`);\n    return response;\n  }\n  async _get(path, queryParams) {\n    const response = await this._getResponse(path, queryParams);\n    return response.json();\n  }\n  async *_getPaginated(path, queryParams = new URLSearchParams(), transform) {\n    let offset = Number(queryParams.get(\"offset\")) || 0;\n    const limit = Number(queryParams.get(\"limit\")) || 100;\n    while (true) {\n      queryParams.set(\"offset\", String(offset));\n      queryParams.set(\"limit\", String(limit));\n      const url = `${this.apiUrl}${path}?${queryParams}`;\n      const response = await this.caller.call(_getFetchImplementation(), url, {\n        method: \"GET\",\n        headers: this.headers,\n        signal: AbortSignal.timeout(this.timeout_ms),\n        ...this.fetchOptions\n      });\n      await raiseForStatus(response, `Failed to fetch ${path}`);\n      const items = transform ? transform(await response.json()) : await response.json();\n      if (items.length === 0) {\n        break;\n      }\n      yield items;\n      if (items.length < limit) {\n        break;\n      }\n      offset += items.length;\n    }\n  }\n  async *_getCursorPaginatedList(path, body = null, requestMethod = \"POST\", dataKey = \"runs\") {\n    const bodyParams = body ? {\n      ...body\n    } : {};\n    while (true) {\n      const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}${path}`, {\n        method: requestMethod,\n        headers: {\n          ...this.headers,\n          \"Content-Type\": \"application/json\"\n        },\n        signal: AbortSignal.timeout(this.timeout_ms),\n        ...this.fetchOptions,\n        body: JSON.stringify(bodyParams)\n      });\n      const responseBody = await response.json();\n      if (!responseBody) {\n        break;\n      }\n      if (!responseBody[dataKey]) {\n        break;\n      }\n      yield responseBody[dataKey];\n      const cursors = responseBody.cursors;\n      if (!cursors) {\n        break;\n      }\n      if (!cursors.next) {\n        break;\n      }\n      bodyParams.cursor = cursors.next;\n    }\n  }\n  _filterForSampling(runs, patch = false) {\n    if (this.tracingSampleRate === undefined) {\n      return runs;\n    }\n    if (patch) {\n      const sampled = [];\n      for (const run of runs) {\n        if (!this.filteredPostUuids.has(run.id)) {\n          sampled.push(run);\n        } else {\n          this.filteredPostUuids.delete(run.id);\n        }\n      }\n      return sampled;\n    } else {\n      const sampled = [];\n      for (const run of runs) {\n        if (run.id !== run.trace_id && !this.filteredPostUuids.has(run.trace_id) || Math.random() < this.tracingSampleRate) {\n          sampled.push(run);\n        } else {\n          this.filteredPostUuids.add(run.id);\n        }\n      }\n      return sampled;\n    }\n  }\n  async _getBatchSizeLimitBytes() {\n    const serverInfo = await this._ensureServerInfo();\n    return this.batchSizeBytesLimit ?? serverInfo.batch_ingest_config?.size_limit_bytes ?? DEFAULT_BATCH_SIZE_LIMIT_BYTES;\n  }\n  async _getMultiPartSupport() {\n    const serverInfo = await this._ensureServerInfo();\n    return serverInfo.instance_flags?.dataset_examples_multipart_enabled ?? false;\n  }\n  drainAutoBatchQueue(batchSizeLimit) {\n    const promises = [];\n    while (this.autoBatchQueue.items.length > 0) {\n      const [batch, done] = this.autoBatchQueue.pop(batchSizeLimit);\n      if (!batch.length) {\n        done();\n        break;\n      }\n      const batchPromise = this._processBatch(batch, done).catch(console.error);\n      promises.push(batchPromise);\n    }\n    return Promise.all(promises);\n  }\n  async _processBatch(batch, done) {\n    if (!batch.length) {\n      done();\n      return;\n    }\n    try {\n      const ingestParams = {\n        runCreates: batch.filter(item => item.action === \"create\").map(item => item.item),\n        runUpdates: batch.filter(item => item.action === \"update\").map(item => item.item)\n      };\n      const serverInfo = await this._ensureServerInfo();\n      if (serverInfo?.batch_ingest_config?.use_multipart_endpoint) {\n        await this.multipartIngestRuns(ingestParams);\n      } else {\n        await this.batchIngestRuns(ingestParams);\n      }\n    } finally {\n      done();\n    }\n  }\n  async processRunOperation(item) {\n    clearTimeout(this.autoBatchTimeout);\n    this.autoBatchTimeout = undefined;\n    if (item.action === \"create\") {\n      item.item = mergeRuntimeEnvIntoRunCreate(item.item);\n    }\n    const itemPromise = this.autoBatchQueue.push(item);\n    if (this.manualFlushMode) {\n      // Rely on manual flushing in serverless environments\n      return itemPromise;\n    }\n    const sizeLimitBytes = await this._getBatchSizeLimitBytes();\n    if (this.autoBatchQueue.sizeBytes > sizeLimitBytes) {\n      void this.drainAutoBatchQueue(sizeLimitBytes);\n    }\n    if (this.autoBatchQueue.items.length > 0) {\n      this.autoBatchTimeout = setTimeout(() => {\n        this.autoBatchTimeout = undefined;\n        void this.drainAutoBatchQueue(sizeLimitBytes);\n      }, this.autoBatchAggregationDelayMs);\n    }\n    return itemPromise;\n  }\n  async _getServerInfo() {\n    const response = await _getFetchImplementation()(`${this.apiUrl}/info`, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\"\n      },\n      signal: AbortSignal.timeout(SERVER_INFO_REQUEST_TIMEOUT),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"get server info\");\n    return response.json();\n  }\n  async _ensureServerInfo() {\n    if (this._getServerInfoPromise === undefined) {\n      this._getServerInfoPromise = (async () => {\n        if (this._serverInfo === undefined) {\n          try {\n            this._serverInfo = await this._getServerInfo();\n          } catch (e) {\n            console.warn(`[WARNING]: LangSmith failed to fetch info on supported operations. Falling back to batch operations and default limits.`);\n          }\n        }\n        return this._serverInfo ?? {};\n      })();\n    }\n    return this._getServerInfoPromise.then(serverInfo => {\n      if (this._serverInfo === undefined) {\n        this._getServerInfoPromise = undefined;\n      }\n      return serverInfo;\n    });\n  }\n  async _getSettings() {\n    if (!this.settings) {\n      this.settings = this._get(\"/settings\");\n    }\n    return await this.settings;\n  }\n  /**\n   * Flushes current queued traces.\n   */\n  async flush() {\n    const sizeLimitBytes = await this._getBatchSizeLimitBytes();\n    await this.drainAutoBatchQueue(sizeLimitBytes);\n  }\n  async createRun(run) {\n    if (!this._filterForSampling([run]).length) {\n      return;\n    }\n    const headers = {\n      ...this.headers,\n      \"Content-Type\": \"application/json\"\n    };\n    const session_name = run.project_name;\n    delete run.project_name;\n    const runCreate = this.prepareRunCreateOrUpdateInputs({\n      session_name,\n      ...run,\n      start_time: run.start_time ?? Date.now()\n    });\n    if (this.autoBatchTracing && runCreate.trace_id !== undefined && runCreate.dotted_order !== undefined) {\n      void this.processRunOperation({\n        action: \"create\",\n        item: runCreate\n      }).catch(console.error);\n      return;\n    }\n    const mergedRunCreateParam = mergeRuntimeEnvIntoRunCreate(runCreate);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs`, {\n      method: \"POST\",\n      headers,\n      body: serializePayloadForTracing(mergedRunCreateParam),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"create run\", true);\n  }\n  /**\n   * Batch ingest/upsert multiple runs in the Langsmith system.\n   * @param runs\n   */\n  async batchIngestRuns({\n    runCreates,\n    runUpdates\n  }) {\n    if (runCreates === undefined && runUpdates === undefined) {\n      return;\n    }\n    let preparedCreateParams = runCreates?.map(create => this.prepareRunCreateOrUpdateInputs(create)) ?? [];\n    let preparedUpdateParams = runUpdates?.map(update => this.prepareRunCreateOrUpdateInputs(update)) ?? [];\n    if (preparedCreateParams.length > 0 && preparedUpdateParams.length > 0) {\n      const createById = preparedCreateParams.reduce((params, run) => {\n        if (!run.id) {\n          return params;\n        }\n        params[run.id] = run;\n        return params;\n      }, {});\n      const standaloneUpdates = [];\n      for (const updateParam of preparedUpdateParams) {\n        if (updateParam.id !== undefined && createById[updateParam.id]) {\n          createById[updateParam.id] = {\n            ...createById[updateParam.id],\n            ...updateParam\n          };\n        } else {\n          standaloneUpdates.push(updateParam);\n        }\n      }\n      preparedCreateParams = Object.values(createById);\n      preparedUpdateParams = standaloneUpdates;\n    }\n    const rawBatch = {\n      post: this._filterForSampling(preparedCreateParams),\n      patch: this._filterForSampling(preparedUpdateParams, true)\n    };\n    if (!rawBatch.post.length && !rawBatch.patch.length) {\n      return;\n    }\n    const batchChunks = {\n      post: [],\n      patch: []\n    };\n    for (const k of [\"post\", \"patch\"]) {\n      const key = k;\n      const batchItems = rawBatch[key].reverse();\n      let batchItem = batchItems.pop();\n      while (batchItem !== undefined) {\n        batchChunks[key].push(batchItem);\n        batchItem = batchItems.pop();\n      }\n    }\n    if (batchChunks.post.length > 0 || batchChunks.patch.length > 0) {\n      await this._postBatchIngestRuns(serializePayloadForTracing(batchChunks));\n    }\n  }\n  async _postBatchIngestRuns(body) {\n    const headers = {\n      ...this.headers,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    };\n    const response = await this.batchIngestCaller.call(_getFetchImplementation(), `${this.apiUrl}/runs/batch`, {\n      method: \"POST\",\n      headers,\n      body: body,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"batch create run\", true);\n  }\n  /**\n   * Batch ingest/upsert multiple runs in the Langsmith system.\n   * @param runs\n   */\n  async multipartIngestRuns({\n    runCreates,\n    runUpdates\n  }) {\n    if (runCreates === undefined && runUpdates === undefined) {\n      return;\n    }\n    // transform and convert to dicts\n    const allAttachments = {};\n    let preparedCreateParams = [];\n    for (const create of runCreates ?? []) {\n      const preparedCreate = this.prepareRunCreateOrUpdateInputs(create);\n      if (preparedCreate.id !== undefined && preparedCreate.attachments !== undefined) {\n        allAttachments[preparedCreate.id] = preparedCreate.attachments;\n      }\n      delete preparedCreate.attachments;\n      preparedCreateParams.push(preparedCreate);\n    }\n    let preparedUpdateParams = [];\n    for (const update of runUpdates ?? []) {\n      preparedUpdateParams.push(this.prepareRunCreateOrUpdateInputs(update));\n    }\n    // require trace_id and dotted_order\n    const invalidRunCreate = preparedCreateParams.find(runCreate => {\n      return runCreate.trace_id === undefined || runCreate.dotted_order === undefined;\n    });\n    if (invalidRunCreate !== undefined) {\n      throw new Error(`Multipart ingest requires \"trace_id\" and \"dotted_order\" to be set when creating a run`);\n    }\n    const invalidRunUpdate = preparedUpdateParams.find(runUpdate => {\n      return runUpdate.trace_id === undefined || runUpdate.dotted_order === undefined;\n    });\n    if (invalidRunUpdate !== undefined) {\n      throw new Error(`Multipart ingest requires \"trace_id\" and \"dotted_order\" to be set when updating a run`);\n    }\n    // combine post and patch dicts where possible\n    if (preparedCreateParams.length > 0 && preparedUpdateParams.length > 0) {\n      const createById = preparedCreateParams.reduce((params, run) => {\n        if (!run.id) {\n          return params;\n        }\n        params[run.id] = run;\n        return params;\n      }, {});\n      const standaloneUpdates = [];\n      for (const updateParam of preparedUpdateParams) {\n        if (updateParam.id !== undefined && createById[updateParam.id]) {\n          createById[updateParam.id] = {\n            ...createById[updateParam.id],\n            ...updateParam\n          };\n        } else {\n          standaloneUpdates.push(updateParam);\n        }\n      }\n      preparedCreateParams = Object.values(createById);\n      preparedUpdateParams = standaloneUpdates;\n    }\n    if (preparedCreateParams.length === 0 && preparedUpdateParams.length === 0) {\n      return;\n    }\n    // send the runs in multipart requests\n    const accumulatedContext = [];\n    const accumulatedParts = [];\n    for (const [method, payloads] of [[\"post\", preparedCreateParams], [\"patch\", preparedUpdateParams]]) {\n      for (const originalPayload of payloads) {\n        // collect fields to be sent as separate parts\n        const {\n          inputs,\n          outputs,\n          events,\n          attachments,\n          ...payload\n        } = originalPayload;\n        const fields = {\n          inputs,\n          outputs,\n          events\n        };\n        // encode the main run payload\n        const stringifiedPayload = serializePayloadForTracing(payload);\n        accumulatedParts.push({\n          name: `${method}.${payload.id}`,\n          payload: new Blob([stringifiedPayload], {\n            type: `application/json; length=${stringifiedPayload.length}` // encoding=gzip\n          })\n        });\n        // encode the fields we collected\n        for (const [key, value] of Object.entries(fields)) {\n          if (value === undefined) {\n            continue;\n          }\n          const stringifiedValue = serializePayloadForTracing(value);\n          accumulatedParts.push({\n            name: `${method}.${payload.id}.${key}`,\n            payload: new Blob([stringifiedValue], {\n              type: `application/json; length=${stringifiedValue.length}`\n            })\n          });\n        }\n        // encode the attachments\n        if (payload.id !== undefined) {\n          const attachments = allAttachments[payload.id];\n          if (attachments) {\n            delete allAttachments[payload.id];\n            for (const [name, attachment] of Object.entries(attachments)) {\n              let contentType;\n              let content;\n              if (Array.isArray(attachment)) {\n                [contentType, content] = attachment;\n              } else {\n                contentType = attachment.mimeType;\n                content = attachment.data;\n              }\n              // Validate that the attachment name doesn't contain a '.'\n              if (name.includes(\".\")) {\n                console.warn(`Skipping attachment '${name}' for run ${payload.id}: Invalid attachment name. ` + `Attachment names must not contain periods ('.'). Please rename the attachment and try again.`);\n                continue;\n              }\n              accumulatedParts.push({\n                name: `attachment.${payload.id}.${name}`,\n                payload: new Blob([content], {\n                  type: `${contentType}; length=${content.byteLength}`\n                })\n              });\n            }\n          }\n        }\n        // compute context\n        accumulatedContext.push(`trace=${payload.trace_id},id=${payload.id}`);\n      }\n    }\n    await this._sendMultipartRequest(accumulatedParts, accumulatedContext.join(\"; \"));\n  }\n  async _sendMultipartRequest(parts, context) {\n    try {\n      // Create multipart form data manually using Blobs\n      const boundary = \"----LangSmithFormBoundary\" + Math.random().toString(36).slice(2);\n      const chunks = [];\n      for (const part of parts) {\n        // Add field boundary\n        chunks.push(new Blob([`--${boundary}\\r\\n`]));\n        chunks.push(new Blob([`Content-Disposition: form-data; name=\"${part.name}\"\\r\\n`, `Content-Type: ${part.payload.type}\\r\\n\\r\\n`]));\n        chunks.push(part.payload);\n        chunks.push(new Blob([\"\\r\\n\"]));\n      }\n      // Add final boundary\n      chunks.push(new Blob([`--${boundary}--\\r\\n`]));\n      // Combine all chunks into a single Blob\n      const body = new Blob(chunks);\n      // Convert Blob to ArrayBuffer for compatibility\n      const arrayBuffer = await body.arrayBuffer();\n      const res = await this.batchIngestCaller.call(_getFetchImplementation(), `${this.apiUrl}/runs/multipart`, {\n        method: \"POST\",\n        headers: {\n          ...this.headers,\n          \"Content-Type\": `multipart/form-data; boundary=${boundary}`\n        },\n        body: arrayBuffer,\n        signal: AbortSignal.timeout(this.timeout_ms),\n        ...this.fetchOptions\n      });\n      await raiseForStatus(res, \"ingest multipart runs\", true);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e) {\n      console.warn(`${e.message.trim()}\\n\\nContext: ${context}`);\n    }\n  }\n  async updateRun(runId, run) {\n    assertUuid(runId);\n    if (run.inputs) {\n      run.inputs = this.processInputs(run.inputs);\n    }\n    if (run.outputs) {\n      run.outputs = this.processOutputs(run.outputs);\n    }\n    // TODO: Untangle types\n    const data = {\n      ...run,\n      id: runId\n    };\n    if (!this._filterForSampling([data], true).length) {\n      return;\n    }\n    if (this.autoBatchTracing && data.trace_id !== undefined && data.dotted_order !== undefined) {\n      if (run.end_time !== undefined && data.parent_run_id === undefined && this.blockOnRootRunFinalization && !this.manualFlushMode) {\n        // Trigger batches as soon as a root trace ends and wait to ensure trace finishes\n        // in serverless environments.\n        await this.processRunOperation({\n          action: \"update\",\n          item: data\n        }).catch(console.error);\n        return;\n      } else {\n        void this.processRunOperation({\n          action: \"update\",\n          item: data\n        }).catch(console.error);\n      }\n      return;\n    }\n    const headers = {\n      ...this.headers,\n      \"Content-Type\": \"application/json\"\n    };\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/${runId}`, {\n      method: \"PATCH\",\n      headers,\n      body: serializePayloadForTracing(run),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"update run\", true);\n  }\n  async readRun(runId, {\n    loadChildRuns\n  } = {\n    loadChildRuns: false\n  }) {\n    assertUuid(runId);\n    let run = await this._get(`/runs/${runId}`);\n    if (loadChildRuns && run.child_run_ids) {\n      run = await this._loadChildRuns(run);\n    }\n    return run;\n  }\n  async getRunUrl({\n    runId,\n    run,\n    projectOpts\n  }) {\n    if (run !== undefined) {\n      let sessionId;\n      if (run.session_id) {\n        sessionId = run.session_id;\n      } else if (projectOpts?.projectName) {\n        sessionId = (await this.readProject({\n          projectName: projectOpts?.projectName\n        })).id;\n      } else if (projectOpts?.projectId) {\n        sessionId = projectOpts?.projectId;\n      } else {\n        const project = await this.readProject({\n          projectName: getLangSmithEnvironmentVariable(\"PROJECT\") || \"default\"\n        });\n        sessionId = project.id;\n      }\n      const tenantId = await this._getTenantId();\n      return `${this.getHostUrl()}/o/${tenantId}/projects/p/${sessionId}/r/${run.id}?poll=true`;\n    } else if (runId !== undefined) {\n      const run_ = await this.readRun(runId);\n      if (!run_.app_path) {\n        throw new Error(`Run ${runId} has no app_path`);\n      }\n      const baseUrl = this.getHostUrl();\n      return `${baseUrl}${run_.app_path}`;\n    } else {\n      throw new Error(\"Must provide either runId or run\");\n    }\n  }\n  async _loadChildRuns(run) {\n    const childRuns = await toArray(this.listRuns({\n      id: run.child_run_ids\n    }));\n    const treemap = {};\n    const runs = {};\n    // TODO: make dotted order required when the migration finishes\n    childRuns.sort((a, b) => (a?.dotted_order ?? \"\").localeCompare(b?.dotted_order ?? \"\"));\n    for (const childRun of childRuns) {\n      if (childRun.parent_run_id === null || childRun.parent_run_id === undefined) {\n        throw new Error(`Child run ${childRun.id} has no parent`);\n      }\n      if (!(childRun.parent_run_id in treemap)) {\n        treemap[childRun.parent_run_id] = [];\n      }\n      treemap[childRun.parent_run_id].push(childRun);\n      runs[childRun.id] = childRun;\n    }\n    run.child_runs = treemap[run.id] || [];\n    for (const runId in treemap) {\n      if (runId !== run.id) {\n        runs[runId].child_runs = treemap[runId];\n      }\n    }\n    return run;\n  }\n  /**\n   * List runs from the LangSmith server.\n   * @param projectId - The ID of the project to filter by.\n   * @param projectName - The name of the project to filter by.\n   * @param parentRunId - The ID of the parent run to filter by.\n   * @param traceId - The ID of the trace to filter by.\n   * @param referenceExampleId - The ID of the reference example to filter by.\n   * @param startTime - The start time to filter by.\n   * @param isRoot - Indicates whether to only return root runs.\n   * @param runType - The run type to filter by.\n   * @param error - Indicates whether to filter by error runs.\n   * @param id - The ID of the run to filter by.\n   * @param query - The query string to filter by.\n   * @param filter - The filter string to apply to the run spans.\n   * @param traceFilter - The filter string to apply on the root run of the trace.\n   * @param limit - The maximum number of runs to retrieve.\n   * @returns {AsyncIterable<Run>} - The runs.\n   *\n   * @example\n   * // List all runs in a project\n   * const projectRuns = client.listRuns({ projectName: \"<your_project>\" });\n   *\n   * @example\n   * // List LLM and Chat runs in the last 24 hours\n   * const todaysLLMRuns = client.listRuns({\n   *   projectName: \"<your_project>\",\n   *   start_time: new Date(Date.now() - 24 * 60 * 60 * 1000),\n   *   run_type: \"llm\",\n   * });\n   *\n   * @example\n   * // List traces in a project\n   * const rootRuns = client.listRuns({\n   *   projectName: \"<your_project>\",\n   *   execution_order: 1,\n   * });\n   *\n   * @example\n   * // List runs without errors\n   * const correctRuns = client.listRuns({\n   *   projectName: \"<your_project>\",\n   *   error: false,\n   * });\n   *\n   * @example\n   * // List runs by run ID\n   * const runIds = [\n   *   \"a36092d2-4ad5-4fb4-9c0d-0dba9a2ed836\",\n   *   \"9398e6be-964f-4aa4-8ae9-ad78cd4b7074\",\n   * ];\n   * const selectedRuns = client.listRuns({ run_ids: runIds });\n   *\n   * @example\n   * // List all \"chain\" type runs that took more than 10 seconds and had `total_tokens` greater than 5000\n   * const chainRuns = client.listRuns({\n   *   projectName: \"<your_project>\",\n   *   filter: 'and(eq(run_type, \"chain\"), gt(latency, 10), gt(total_tokens, 5000))',\n   * });\n   *\n   * @example\n   * // List all runs called \"extractor\" whose root of the trace was assigned feedback \"user_score\" score of 1\n   * const goodExtractorRuns = client.listRuns({\n   *   projectName: \"<your_project>\",\n   *   filter: 'eq(name, \"extractor\")',\n   *   traceFilter: 'and(eq(feedback_key, \"user_score\"), eq(feedback_score, 1))',\n   * });\n   *\n   * @example\n   * // List all runs that started after a specific timestamp and either have \"error\" not equal to null or a \"Correctness\" feedback score equal to 0\n   * const complexRuns = client.listRuns({\n   *   projectName: \"<your_project>\",\n   *   filter: 'and(gt(start_time, \"2023-07-15T12:34:56Z\"), or(neq(error, null), and(eq(feedback_key, \"Correctness\"), eq(feedback_score, 0.0))))',\n   * });\n   *\n   * @example\n   * // List all runs where `tags` include \"experimental\" or \"beta\" and `latency` is greater than 2 seconds\n   * const taggedRuns = client.listRuns({\n   *   projectName: \"<your_project>\",\n   *   filter: 'and(or(has(tags, \"experimental\"), has(tags, \"beta\")), gt(latency, 2))',\n   * });\n   */\n  async *listRuns(props) {\n    const {\n      projectId,\n      projectName,\n      parentRunId,\n      traceId,\n      referenceExampleId,\n      startTime,\n      executionOrder,\n      isRoot,\n      runType,\n      error,\n      id,\n      query,\n      filter,\n      traceFilter,\n      treeFilter,\n      limit,\n      select\n    } = props;\n    let projectIds = [];\n    if (projectId) {\n      projectIds = Array.isArray(projectId) ? projectId : [projectId];\n    }\n    if (projectName) {\n      const projectNames = Array.isArray(projectName) ? projectName : [projectName];\n      const projectIds_ = await Promise.all(projectNames.map(name => this.readProject({\n        projectName: name\n      }).then(project => project.id)));\n      projectIds.push(...projectIds_);\n    }\n    const default_select = [\"app_path\", \"child_run_ids\", \"completion_cost\", \"completion_tokens\", \"dotted_order\", \"end_time\", \"error\", \"events\", \"extra\", \"feedback_stats\", \"first_token_time\", \"id\", \"inputs\", \"name\", \"outputs\", \"parent_run_id\", \"parent_run_ids\", \"prompt_cost\", \"prompt_tokens\", \"reference_example_id\", \"run_type\", \"session_id\", \"start_time\", \"status\", \"tags\", \"total_cost\", \"total_tokens\", \"trace_id\"];\n    const body = {\n      session: projectIds.length ? projectIds : null,\n      run_type: runType,\n      reference_example: referenceExampleId,\n      query,\n      filter,\n      trace_filter: traceFilter,\n      tree_filter: treeFilter,\n      execution_order: executionOrder,\n      parent_run: parentRunId,\n      start_time: startTime ? startTime.toISOString() : null,\n      error,\n      id,\n      limit,\n      trace: traceId,\n      select: select ? select : default_select,\n      is_root: isRoot\n    };\n    let runsYielded = 0;\n    for await (const runs of this._getCursorPaginatedList(\"/runs/query\", body)) {\n      if (limit) {\n        if (runsYielded >= limit) {\n          break;\n        }\n        if (runs.length + runsYielded > limit) {\n          const newRuns = runs.slice(0, limit - runsYielded);\n          yield* newRuns;\n          break;\n        }\n        runsYielded += runs.length;\n        yield* runs;\n      } else {\n        yield* runs;\n      }\n    }\n  }\n  async getRunStats({\n    id,\n    trace,\n    parentRun,\n    runType,\n    projectNames,\n    projectIds,\n    referenceExampleIds,\n    startTime,\n    endTime,\n    error,\n    query,\n    filter,\n    traceFilter,\n    treeFilter,\n    isRoot,\n    dataSourceType\n  }) {\n    let projectIds_ = projectIds || [];\n    if (projectNames) {\n      projectIds_ = [...(projectIds || []), ...(await Promise.all(projectNames.map(name => this.readProject({\n        projectName: name\n      }).then(project => project.id))))];\n    }\n    const payload = {\n      id,\n      trace,\n      parent_run: parentRun,\n      run_type: runType,\n      session: projectIds_,\n      reference_example: referenceExampleIds,\n      start_time: startTime,\n      end_time: endTime,\n      error,\n      query,\n      filter,\n      trace_filter: traceFilter,\n      tree_filter: treeFilter,\n      is_root: isRoot,\n      data_source_type: dataSourceType\n    };\n    // Remove undefined values from the payload\n    const filteredPayload = Object.fromEntries(Object.entries(payload).filter(([_, value]) => value !== undefined));\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/stats`, {\n      method: \"POST\",\n      headers: this.headers,\n      body: JSON.stringify(filteredPayload),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    const result = await response.json();\n    return result;\n  }\n  async shareRun(runId, {\n    shareId\n  } = {}) {\n    const data = {\n      run_id: runId,\n      share_token: shareId || uuid.v4()\n    };\n    assertUuid(runId);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/${runId}/share`, {\n      method: \"PUT\",\n      headers: this.headers,\n      body: JSON.stringify(data),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    const result = await response.json();\n    if (result === null || !(\"share_token\" in result)) {\n      throw new Error(\"Invalid response from server\");\n    }\n    return `${this.getHostUrl()}/public/${result[\"share_token\"]}/r`;\n  }\n  async unshareRun(runId) {\n    assertUuid(runId);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/${runId}/share`, {\n      method: \"DELETE\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"unshare run\", true);\n  }\n  async readRunSharedLink(runId) {\n    assertUuid(runId);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/${runId}/share`, {\n      method: \"GET\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    const result = await response.json();\n    if (result === null || !(\"share_token\" in result)) {\n      return undefined;\n    }\n    return `${this.getHostUrl()}/public/${result[\"share_token\"]}/r`;\n  }\n  async listSharedRuns(shareToken, {\n    runIds\n  } = {}) {\n    const queryParams = new URLSearchParams({\n      share_token: shareToken\n    });\n    if (runIds !== undefined) {\n      for (const runId of runIds) {\n        queryParams.append(\"id\", runId);\n      }\n    }\n    assertUuid(shareToken);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/public/${shareToken}/runs${queryParams}`, {\n      method: \"GET\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    const runs = await response.json();\n    return runs;\n  }\n  async readDatasetSharedSchema(datasetId, datasetName) {\n    if (!datasetId && !datasetName) {\n      throw new Error(\"Either datasetId or datasetName must be given\");\n    }\n    if (!datasetId) {\n      const dataset = await this.readDataset({\n        datasetName\n      });\n      datasetId = dataset.id;\n    }\n    assertUuid(datasetId);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId}/share`, {\n      method: \"GET\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    const shareSchema = await response.json();\n    shareSchema.url = `${this.getHostUrl()}/public/${shareSchema.share_token}/d`;\n    return shareSchema;\n  }\n  async shareDataset(datasetId, datasetName) {\n    if (!datasetId && !datasetName) {\n      throw new Error(\"Either datasetId or datasetName must be given\");\n    }\n    if (!datasetId) {\n      const dataset = await this.readDataset({\n        datasetName\n      });\n      datasetId = dataset.id;\n    }\n    const data = {\n      dataset_id: datasetId\n    };\n    assertUuid(datasetId);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId}/share`, {\n      method: \"PUT\",\n      headers: this.headers,\n      body: JSON.stringify(data),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    const shareSchema = await response.json();\n    shareSchema.url = `${this.getHostUrl()}/public/${shareSchema.share_token}/d`;\n    return shareSchema;\n  }\n  async unshareDataset(datasetId) {\n    assertUuid(datasetId);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId}/share`, {\n      method: \"DELETE\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"unshare dataset\", true);\n  }\n  async readSharedDataset(shareToken) {\n    assertUuid(shareToken);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/public/${shareToken}/datasets`, {\n      method: \"GET\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    const dataset = await response.json();\n    return dataset;\n  }\n  /**\n   * Get shared examples.\n   *\n   * @param {string} shareToken The share token to get examples for. A share token is the UUID (or LangSmith URL, including UUID) generated when explicitly marking an example as public.\n   * @param {Object} [options] Additional options for listing the examples.\n   * @param {string[] | undefined} [options.exampleIds] A list of example IDs to filter by.\n   * @returns {Promise<Example[]>} The shared examples.\n   */\n  async listSharedExamples(shareToken, options) {\n    const params = {};\n    if (options?.exampleIds) {\n      params.id = options.exampleIds;\n    }\n    const urlParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (Array.isArray(value)) {\n        value.forEach(v => urlParams.append(key, v));\n      } else {\n        urlParams.append(key, value);\n      }\n    });\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/public/${shareToken}/examples?${urlParams.toString()}`, {\n      method: \"GET\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    const result = await response.json();\n    if (!response.ok) {\n      if (\"detail\" in result) {\n        throw new Error(`Failed to list shared examples.\\nStatus: ${response.status}\\nMessage: ${result.detail.join(\"\\n\")}`);\n      }\n      throw new Error(`Failed to list shared examples: ${response.status} ${response.statusText}`);\n    }\n    return result.map(example => ({\n      ...example,\n      _hostUrl: this.getHostUrl()\n    }));\n  }\n  async createProject({\n    projectName,\n    description = null,\n    metadata = null,\n    upsert = false,\n    projectExtra = null,\n    referenceDatasetId = null\n  }) {\n    const upsert_ = upsert ? `?upsert=true` : \"\";\n    const endpoint = `${this.apiUrl}/sessions${upsert_}`;\n    const extra = projectExtra || {};\n    if (metadata) {\n      extra[\"metadata\"] = metadata;\n    }\n    const body = {\n      name: projectName,\n      extra,\n      description\n    };\n    if (referenceDatasetId !== null) {\n      body[\"reference_dataset_id\"] = referenceDatasetId;\n    }\n    const response = await this.caller.call(_getFetchImplementation(), endpoint, {\n      method: \"POST\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"create project\");\n    const result = await response.json();\n    return result;\n  }\n  async updateProject(projectId, {\n    name = null,\n    description = null,\n    metadata = null,\n    projectExtra = null,\n    endTime = null\n  }) {\n    const endpoint = `${this.apiUrl}/sessions/${projectId}`;\n    let extra = projectExtra;\n    if (metadata) {\n      extra = {\n        ...(extra || {}),\n        metadata\n      };\n    }\n    const body = {\n      name,\n      extra,\n      description,\n      end_time: endTime ? new Date(endTime).toISOString() : null\n    };\n    const response = await this.caller.call(_getFetchImplementation(), endpoint, {\n      method: \"PATCH\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"update project\");\n    const result = await response.json();\n    return result;\n  }\n  async hasProject({\n    projectId,\n    projectName\n  }) {\n    // TODO: Add a head request\n    let path = \"/sessions\";\n    const params = new URLSearchParams();\n    if (projectId !== undefined && projectName !== undefined) {\n      throw new Error(\"Must provide either projectName or projectId, not both\");\n    } else if (projectId !== undefined) {\n      assertUuid(projectId);\n      path += `/${projectId}`;\n    } else if (projectName !== undefined) {\n      params.append(\"name\", projectName);\n    } else {\n      throw new Error(\"Must provide projectName or projectId\");\n    }\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}${path}?${params}`, {\n      method: \"GET\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    // consume the response body to release the connection\n    // https://undici.nodejs.org/#/?id=garbage-collection\n    try {\n      const result = await response.json();\n      if (!response.ok) {\n        return false;\n      }\n      // If it's OK and we're querying by name, need to check the list is not empty\n      if (Array.isArray(result)) {\n        return result.length > 0;\n      }\n      // projectId querying\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  async readProject({\n    projectId,\n    projectName,\n    includeStats\n  }) {\n    let path = \"/sessions\";\n    const params = new URLSearchParams();\n    if (projectId !== undefined && projectName !== undefined) {\n      throw new Error(\"Must provide either projectName or projectId, not both\");\n    } else if (projectId !== undefined) {\n      assertUuid(projectId);\n      path += `/${projectId}`;\n    } else if (projectName !== undefined) {\n      params.append(\"name\", projectName);\n    } else {\n      throw new Error(\"Must provide projectName or projectId\");\n    }\n    if (includeStats !== undefined) {\n      params.append(\"include_stats\", includeStats.toString());\n    }\n    const response = await this._get(path, params);\n    let result;\n    if (Array.isArray(response)) {\n      if (response.length === 0) {\n        throw new Error(`Project[id=${projectId}, name=${projectName}] not found`);\n      }\n      result = response[0];\n    } else {\n      result = response;\n    }\n    return result;\n  }\n  async getProjectUrl({\n    projectId,\n    projectName\n  }) {\n    if (projectId === undefined && projectName === undefined) {\n      throw new Error(\"Must provide either projectName or projectId\");\n    }\n    const project = await this.readProject({\n      projectId,\n      projectName\n    });\n    const tenantId = await this._getTenantId();\n    return `${this.getHostUrl()}/o/${tenantId}/projects/p/${project.id}`;\n  }\n  async getDatasetUrl({\n    datasetId,\n    datasetName\n  }) {\n    if (datasetId === undefined && datasetName === undefined) {\n      throw new Error(\"Must provide either datasetName or datasetId\");\n    }\n    const dataset = await this.readDataset({\n      datasetId,\n      datasetName\n    });\n    const tenantId = await this._getTenantId();\n    return `${this.getHostUrl()}/o/${tenantId}/datasets/${dataset.id}`;\n  }\n  async _getTenantId() {\n    if (this._tenantId !== null) {\n      return this._tenantId;\n    }\n    const queryParams = new URLSearchParams({\n      limit: \"1\"\n    });\n    for await (const projects of this._getPaginated(\"/sessions\", queryParams)) {\n      this._tenantId = projects[0].tenant_id;\n      return projects[0].tenant_id;\n    }\n    throw new Error(\"No projects found to resolve tenant.\");\n  }\n  async *listProjects({\n    projectIds,\n    name,\n    nameContains,\n    referenceDatasetId,\n    referenceDatasetName,\n    referenceFree,\n    metadata\n  } = {}) {\n    const params = new URLSearchParams();\n    if (projectIds !== undefined) {\n      for (const projectId of projectIds) {\n        params.append(\"id\", projectId);\n      }\n    }\n    if (name !== undefined) {\n      params.append(\"name\", name);\n    }\n    if (nameContains !== undefined) {\n      params.append(\"name_contains\", nameContains);\n    }\n    if (referenceDatasetId !== undefined) {\n      params.append(\"reference_dataset\", referenceDatasetId);\n    } else if (referenceDatasetName !== undefined) {\n      const dataset = await this.readDataset({\n        datasetName: referenceDatasetName\n      });\n      params.append(\"reference_dataset\", dataset.id);\n    }\n    if (referenceFree !== undefined) {\n      params.append(\"reference_free\", referenceFree.toString());\n    }\n    if (metadata !== undefined) {\n      params.append(\"metadata\", JSON.stringify(metadata));\n    }\n    for await (const projects of this._getPaginated(\"/sessions\", params)) {\n      yield* projects;\n    }\n  }\n  async deleteProject({\n    projectId,\n    projectName\n  }) {\n    let projectId_;\n    if (projectId === undefined && projectName === undefined) {\n      throw new Error(\"Must provide projectName or projectId\");\n    } else if (projectId !== undefined && projectName !== undefined) {\n      throw new Error(\"Must provide either projectName or projectId, not both\");\n    } else if (projectId === undefined) {\n      projectId_ = (await this.readProject({\n        projectName\n      })).id;\n    } else {\n      projectId_ = projectId;\n    }\n    assertUuid(projectId_);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/sessions/${projectId_}`, {\n      method: \"DELETE\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, `delete session ${projectId_} (${projectName})`, true);\n  }\n  async uploadCsv({\n    csvFile,\n    fileName,\n    inputKeys,\n    outputKeys,\n    description,\n    dataType,\n    name\n  }) {\n    const url = `${this.apiUrl}/datasets/upload`;\n    const formData = new FormData();\n    formData.append(\"file\", csvFile, fileName);\n    inputKeys.forEach(key => {\n      formData.append(\"input_keys\", key);\n    });\n    outputKeys.forEach(key => {\n      formData.append(\"output_keys\", key);\n    });\n    if (description) {\n      formData.append(\"description\", description);\n    }\n    if (dataType) {\n      formData.append(\"data_type\", dataType);\n    }\n    if (name) {\n      formData.append(\"name\", name);\n    }\n    const response = await this.caller.call(_getFetchImplementation(), url, {\n      method: \"POST\",\n      headers: this.headers,\n      body: formData,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"upload CSV\");\n    const result = await response.json();\n    return result;\n  }\n  async createDataset(name, {\n    description,\n    dataType,\n    inputsSchema,\n    outputsSchema,\n    metadata\n  } = {}) {\n    const body = {\n      name,\n      description,\n      extra: metadata ? {\n        metadata\n      } : undefined\n    };\n    if (dataType) {\n      body.data_type = dataType;\n    }\n    if (inputsSchema) {\n      body.inputs_schema_definition = inputsSchema;\n    }\n    if (outputsSchema) {\n      body.outputs_schema_definition = outputsSchema;\n    }\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets`, {\n      method: \"POST\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"create dataset\");\n    const result = await response.json();\n    return result;\n  }\n  async readDataset({\n    datasetId,\n    datasetName\n  }) {\n    let path = \"/datasets\";\n    // limit to 1 result\n    const params = new URLSearchParams({\n      limit: \"1\"\n    });\n    if (datasetId !== undefined && datasetName !== undefined) {\n      throw new Error(\"Must provide either datasetName or datasetId, not both\");\n    } else if (datasetId !== undefined) {\n      assertUuid(datasetId);\n      path += `/${datasetId}`;\n    } else if (datasetName !== undefined) {\n      params.append(\"name\", datasetName);\n    } else {\n      throw new Error(\"Must provide datasetName or datasetId\");\n    }\n    const response = await this._get(path, params);\n    let result;\n    if (Array.isArray(response)) {\n      if (response.length === 0) {\n        throw new Error(`Dataset[id=${datasetId}, name=${datasetName}] not found`);\n      }\n      result = response[0];\n    } else {\n      result = response;\n    }\n    return result;\n  }\n  async hasDataset({\n    datasetId,\n    datasetName\n  }) {\n    try {\n      await this.readDataset({\n        datasetId,\n        datasetName\n      });\n      return true;\n    } catch (e) {\n      if (\n      // eslint-disable-next-line no-instanceof/no-instanceof\n      e instanceof Error && e.message.toLocaleLowerCase().includes(\"not found\")) {\n        return false;\n      }\n      throw e;\n    }\n  }\n  async diffDatasetVersions({\n    datasetId,\n    datasetName,\n    fromVersion,\n    toVersion\n  }) {\n    let datasetId_ = datasetId;\n    if (datasetId_ === undefined && datasetName === undefined) {\n      throw new Error(\"Must provide either datasetName or datasetId\");\n    } else if (datasetId_ !== undefined && datasetName !== undefined) {\n      throw new Error(\"Must provide either datasetName or datasetId, not both\");\n    } else if (datasetId_ === undefined) {\n      const dataset = await this.readDataset({\n        datasetName\n      });\n      datasetId_ = dataset.id;\n    }\n    const urlParams = new URLSearchParams({\n      from_version: typeof fromVersion === \"string\" ? fromVersion : fromVersion.toISOString(),\n      to_version: typeof toVersion === \"string\" ? toVersion : toVersion.toISOString()\n    });\n    const response = await this._get(`/datasets/${datasetId_}/versions/diff`, urlParams);\n    return response;\n  }\n  async readDatasetOpenaiFinetuning({\n    datasetId,\n    datasetName\n  }) {\n    const path = \"/datasets\";\n    if (datasetId !== undefined) {\n      // do nothing\n    } else if (datasetName !== undefined) {\n      datasetId = (await this.readDataset({\n        datasetName\n      })).id;\n    } else {\n      throw new Error(\"Must provide datasetName or datasetId\");\n    }\n    const response = await this._getResponse(`${path}/${datasetId}/openai_ft`);\n    const datasetText = await response.text();\n    const dataset = datasetText.trim().split(\"\\n\").map(line => JSON.parse(line));\n    return dataset;\n  }\n  async *listDatasets({\n    limit = 100,\n    offset = 0,\n    datasetIds,\n    datasetName,\n    datasetNameContains,\n    metadata\n  } = {}) {\n    const path = \"/datasets\";\n    const params = new URLSearchParams({\n      limit: limit.toString(),\n      offset: offset.toString()\n    });\n    if (datasetIds !== undefined) {\n      for (const id_ of datasetIds) {\n        params.append(\"id\", id_);\n      }\n    }\n    if (datasetName !== undefined) {\n      params.append(\"name\", datasetName);\n    }\n    if (datasetNameContains !== undefined) {\n      params.append(\"name_contains\", datasetNameContains);\n    }\n    if (metadata !== undefined) {\n      params.append(\"metadata\", JSON.stringify(metadata));\n    }\n    for await (const datasets of this._getPaginated(path, params)) {\n      yield* datasets;\n    }\n  }\n  /**\n   * Update a dataset\n   * @param props The dataset details to update\n   * @returns The updated dataset\n   */\n  async updateDataset(props) {\n    const {\n      datasetId,\n      datasetName,\n      ...update\n    } = props;\n    if (!datasetId && !datasetName) {\n      throw new Error(\"Must provide either datasetName or datasetId\");\n    }\n    const _datasetId = datasetId ?? (await this.readDataset({\n      datasetName\n    })).id;\n    assertUuid(_datasetId);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${_datasetId}`, {\n      method: \"PATCH\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(update),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"update dataset\");\n    return await response.json();\n  }\n  /**\n   * Updates a tag on a dataset.\n   *\n   * If the tag is already assigned to a different version of this dataset,\n   * the tag will be moved to the new version. The as_of parameter is used to\n   * determine which version of the dataset to apply the new tags to.\n   *\n   * It must be an exact version of the dataset to succeed. You can\n   * use the \"readDatasetVersion\" method to find the exact version\n   * to apply the tags to.\n   * @param params.datasetId The ID of the dataset to update. Must be provided if \"datasetName\" is not provided.\n   * @param params.datasetName The name of the dataset to update. Must be provided if \"datasetId\" is not provided.\n   * @param params.asOf The timestamp of the dataset to apply the new tags to.\n   * @param params.tag The new tag to apply to the dataset.\n   */\n  async updateDatasetTag(props) {\n    const {\n      datasetId,\n      datasetName,\n      asOf,\n      tag\n    } = props;\n    if (!datasetId && !datasetName) {\n      throw new Error(\"Must provide either datasetName or datasetId\");\n    }\n    const _datasetId = datasetId ?? (await this.readDataset({\n      datasetName\n    })).id;\n    assertUuid(_datasetId);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${_datasetId}/tags`, {\n      method: \"PUT\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        as_of: typeof asOf === \"string\" ? asOf : asOf.toISOString(),\n        tag\n      }),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"update dataset tags\");\n  }\n  async deleteDataset({\n    datasetId,\n    datasetName\n  }) {\n    let path = \"/datasets\";\n    let datasetId_ = datasetId;\n    if (datasetId !== undefined && datasetName !== undefined) {\n      throw new Error(\"Must provide either datasetName or datasetId, not both\");\n    } else if (datasetName !== undefined) {\n      const dataset = await this.readDataset({\n        datasetName\n      });\n      datasetId_ = dataset.id;\n    }\n    if (datasetId_ !== undefined) {\n      assertUuid(datasetId_);\n      path += `/${datasetId_}`;\n    } else {\n      throw new Error(\"Must provide datasetName or datasetId\");\n    }\n    const response = await this.caller.call(_getFetchImplementation(), this.apiUrl + path, {\n      method: \"DELETE\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, `delete ${path}`);\n    await response.json();\n  }\n  async indexDataset({\n    datasetId,\n    datasetName,\n    tag\n  }) {\n    let datasetId_ = datasetId;\n    if (!datasetId_ && !datasetName) {\n      throw new Error(\"Must provide either datasetName or datasetId\");\n    } else if (datasetId_ && datasetName) {\n      throw new Error(\"Must provide either datasetName or datasetId, not both\");\n    } else if (!datasetId_) {\n      const dataset = await this.readDataset({\n        datasetName\n      });\n      datasetId_ = dataset.id;\n    }\n    assertUuid(datasetId_);\n    const data = {\n      tag: tag\n    };\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId_}/index`, {\n      method: \"POST\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"index dataset\");\n    await response.json();\n  }\n  /**\n   * Lets you run a similarity search query on a dataset.\n   *\n   * Requires the dataset to be indexed. Please see the `indexDataset` method to set up indexing.\n   *\n   * @param inputs      The input on which to run the similarity search. Must have the\n   *                    same schema as the dataset.\n   *\n   * @param datasetId   The dataset to search for similar examples.\n   *\n   * @param limit       The maximum number of examples to return. Will return the top `limit` most\n   *                    similar examples in order of most similar to least similar. If no similar\n   *                    examples are found, random examples will be returned.\n   *\n   * @param filter      A filter string to apply to the search. Only examples will be returned that\n   *                    match the filter string. Some examples of filters\n   *\n   *                    - eq(metadata.mykey, \"value\")\n   *                    - and(neq(metadata.my.nested.key, \"value\"), neq(metadata.mykey, \"value\"))\n   *                    - or(eq(metadata.mykey, \"value\"), eq(metadata.mykey, \"othervalue\"))\n   *\n   * @returns           A list of similar examples.\n   *\n   *\n   * @example\n   * dataset_id = \"123e4567-e89b-12d3-a456-426614174000\"\n   * inputs = {\"text\": \"How many people live in Berlin?\"}\n   * limit = 5\n   * examples = await client.similarExamples(inputs, dataset_id, limit)\n   */\n  async similarExamples(inputs, datasetId, limit, {\n    filter\n  } = {}) {\n    const data = {\n      limit: limit,\n      inputs: inputs\n    };\n    if (filter !== undefined) {\n      data[\"filter\"] = filter;\n    }\n    assertUuid(datasetId);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId}/search`, {\n      method: \"POST\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"fetch similar examples\");\n    const result = await response.json();\n    return result[\"examples\"];\n  }\n  async createExample(inputs, outputs, {\n    datasetId,\n    datasetName,\n    createdAt,\n    exampleId,\n    metadata,\n    split,\n    sourceRunId\n  }) {\n    let datasetId_ = datasetId;\n    if (datasetId_ === undefined && datasetName === undefined) {\n      throw new Error(\"Must provide either datasetName or datasetId\");\n    } else if (datasetId_ !== undefined && datasetName !== undefined) {\n      throw new Error(\"Must provide either datasetName or datasetId, not both\");\n    } else if (datasetId_ === undefined) {\n      const dataset = await this.readDataset({\n        datasetName\n      });\n      datasetId_ = dataset.id;\n    }\n    const createdAt_ = createdAt || new Date();\n    const data = {\n      dataset_id: datasetId_,\n      inputs,\n      outputs,\n      created_at: createdAt_?.toISOString(),\n      id: exampleId,\n      metadata,\n      split,\n      source_run_id: sourceRunId\n    };\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/examples`, {\n      method: \"POST\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"create example\");\n    const result = await response.json();\n    return result;\n  }\n  async createExamples(props) {\n    const {\n      inputs,\n      outputs,\n      metadata,\n      sourceRunIds,\n      exampleIds,\n      datasetId,\n      datasetName\n    } = props;\n    let datasetId_ = datasetId;\n    if (datasetId_ === undefined && datasetName === undefined) {\n      throw new Error(\"Must provide either datasetName or datasetId\");\n    } else if (datasetId_ !== undefined && datasetName !== undefined) {\n      throw new Error(\"Must provide either datasetName or datasetId, not both\");\n    } else if (datasetId_ === undefined) {\n      const dataset = await this.readDataset({\n        datasetName\n      });\n      datasetId_ = dataset.id;\n    }\n    const formattedExamples = inputs.map((input, idx) => {\n      return {\n        dataset_id: datasetId_,\n        inputs: input,\n        outputs: outputs ? outputs[idx] : undefined,\n        metadata: metadata ? metadata[idx] : undefined,\n        split: props.splits ? props.splits[idx] : undefined,\n        id: exampleIds ? exampleIds[idx] : undefined,\n        source_run_id: sourceRunIds ? sourceRunIds[idx] : undefined\n      };\n    });\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/examples/bulk`, {\n      method: \"POST\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formattedExamples),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"create examples\");\n    const result = await response.json();\n    return result;\n  }\n  async createLLMExample(input, generation, options) {\n    return this.createExample({\n      input\n    }, {\n      output: generation\n    }, options);\n  }\n  async createChatExample(input, generations, options) {\n    const finalInput = input.map(message => {\n      if (isLangChainMessage(message)) {\n        return convertLangChainMessageToExample(message);\n      }\n      return message;\n    });\n    const finalOutput = isLangChainMessage(generations) ? convertLangChainMessageToExample(generations) : generations;\n    return this.createExample({\n      input: finalInput\n    }, {\n      output: finalOutput\n    }, options);\n  }\n  async readExample(exampleId) {\n    assertUuid(exampleId);\n    const path = `/examples/${exampleId}`;\n    const rawExample = await this._get(path);\n    const {\n      attachment_urls,\n      ...rest\n    } = rawExample;\n    const example = rest;\n    if (attachment_urls) {\n      // add attachments back to the example\n      example.attachments = Object.entries(attachment_urls).reduce((acc, [key, value]) => {\n        acc[key.slice(\"attachment.\".length)] = {\n          presigned_url: value.presigned_url,\n          mime_type: value.mime_type\n        };\n        return acc;\n      }, {});\n    }\n    return example;\n  }\n  async *listExamples({\n    datasetId,\n    datasetName,\n    exampleIds,\n    asOf,\n    splits,\n    inlineS3Urls,\n    metadata,\n    limit,\n    offset,\n    filter,\n    includeAttachments\n  } = {}) {\n    let datasetId_;\n    if (datasetId !== undefined && datasetName !== undefined) {\n      throw new Error(\"Must provide either datasetName or datasetId, not both\");\n    } else if (datasetId !== undefined) {\n      datasetId_ = datasetId;\n    } else if (datasetName !== undefined) {\n      const dataset = await this.readDataset({\n        datasetName\n      });\n      datasetId_ = dataset.id;\n    } else {\n      throw new Error(\"Must provide a datasetName or datasetId\");\n    }\n    const params = new URLSearchParams({\n      dataset: datasetId_\n    });\n    const dataset_version = asOf ? typeof asOf === \"string\" ? asOf : asOf?.toISOString() : undefined;\n    if (dataset_version) {\n      params.append(\"as_of\", dataset_version);\n    }\n    const inlineS3Urls_ = inlineS3Urls ?? true;\n    params.append(\"inline_s3_urls\", inlineS3Urls_.toString());\n    if (exampleIds !== undefined) {\n      for (const id_ of exampleIds) {\n        params.append(\"id\", id_);\n      }\n    }\n    if (splits !== undefined) {\n      for (const split of splits) {\n        params.append(\"splits\", split);\n      }\n    }\n    if (metadata !== undefined) {\n      const serializedMetadata = JSON.stringify(metadata);\n      params.append(\"metadata\", serializedMetadata);\n    }\n    if (limit !== undefined) {\n      params.append(\"limit\", limit.toString());\n    }\n    if (offset !== undefined) {\n      params.append(\"offset\", offset.toString());\n    }\n    if (filter !== undefined) {\n      params.append(\"filter\", filter);\n    }\n    if (includeAttachments === true) {\n      [\"attachment_urls\", \"outputs\", \"metadata\"].forEach(field => params.append(\"select\", field));\n    }\n    let i = 0;\n    for await (const rawExamples of this._getPaginated(\"/examples\", params)) {\n      for (const rawExample of rawExamples) {\n        const {\n          attachment_urls,\n          ...rest\n        } = rawExample;\n        const example = rest;\n        if (attachment_urls) {\n          example.attachments = Object.entries(attachment_urls).reduce((acc, [key, value]) => {\n            acc[key.slice(\"attachment.\".length)] = {\n              presigned_url: value.presigned_url,\n              mime_type: value.mime_type || undefined\n            };\n            return acc;\n          }, {});\n        }\n        yield example;\n        i++;\n      }\n      if (limit !== undefined && i >= limit) {\n        break;\n      }\n    }\n  }\n  async deleteExample(exampleId) {\n    assertUuid(exampleId);\n    const path = `/examples/${exampleId}`;\n    const response = await this.caller.call(_getFetchImplementation(), this.apiUrl + path, {\n      method: \"DELETE\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, `delete ${path}`);\n    await response.json();\n  }\n  async updateExample(exampleId, update) {\n    assertUuid(exampleId);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/examples/${exampleId}`, {\n      method: \"PATCH\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(update),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"update example\");\n    const result = await response.json();\n    return result;\n  }\n  async updateExamples(update) {\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/examples/bulk`, {\n      method: \"PATCH\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(update),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"update examples\");\n    const result = await response.json();\n    return result;\n  }\n  /**\n   * Get dataset version by closest date or exact tag.\n   *\n   * Use this to resolve the nearest version to a given timestamp or for a given tag.\n   *\n   * @param options The options for getting the dataset version\n   * @param options.datasetId The ID of the dataset\n   * @param options.datasetName The name of the dataset\n   * @param options.asOf The timestamp of the dataset to retrieve\n   * @param options.tag The tag of the dataset to retrieve\n   * @returns The dataset version\n   */\n  async readDatasetVersion({\n    datasetId,\n    datasetName,\n    asOf,\n    tag\n  }) {\n    let resolvedDatasetId;\n    if (!datasetId) {\n      const dataset = await this.readDataset({\n        datasetName\n      });\n      resolvedDatasetId = dataset.id;\n    } else {\n      resolvedDatasetId = datasetId;\n    }\n    assertUuid(resolvedDatasetId);\n    if (asOf && tag || !asOf && !tag) {\n      throw new Error(\"Exactly one of asOf and tag must be specified.\");\n    }\n    const params = new URLSearchParams();\n    if (asOf !== undefined) {\n      params.append(\"as_of\", typeof asOf === \"string\" ? asOf : asOf.toISOString());\n    }\n    if (tag !== undefined) {\n      params.append(\"tag\", tag);\n    }\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${resolvedDatasetId}/version?${params.toString()}`, {\n      method: \"GET\",\n      headers: {\n        ...this.headers\n      },\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"read dataset version\");\n    return await response.json();\n  }\n  async listDatasetSplits({\n    datasetId,\n    datasetName,\n    asOf\n  }) {\n    let datasetId_;\n    if (datasetId === undefined && datasetName === undefined) {\n      throw new Error(\"Must provide dataset name or ID\");\n    } else if (datasetId !== undefined && datasetName !== undefined) {\n      throw new Error(\"Must provide either datasetName or datasetId, not both\");\n    } else if (datasetId === undefined) {\n      const dataset = await this.readDataset({\n        datasetName\n      });\n      datasetId_ = dataset.id;\n    } else {\n      datasetId_ = datasetId;\n    }\n    assertUuid(datasetId_);\n    const params = new URLSearchParams();\n    const dataset_version = asOf ? typeof asOf === \"string\" ? asOf : asOf?.toISOString() : undefined;\n    if (dataset_version) {\n      params.append(\"as_of\", dataset_version);\n    }\n    const response = await this._get(`/datasets/${datasetId_}/splits`, params);\n    return response;\n  }\n  async updateDatasetSplits({\n    datasetId,\n    datasetName,\n    splitName,\n    exampleIds,\n    remove = false\n  }) {\n    let datasetId_;\n    if (datasetId === undefined && datasetName === undefined) {\n      throw new Error(\"Must provide dataset name or ID\");\n    } else if (datasetId !== undefined && datasetName !== undefined) {\n      throw new Error(\"Must provide either datasetName or datasetId, not both\");\n    } else if (datasetId === undefined) {\n      const dataset = await this.readDataset({\n        datasetName\n      });\n      datasetId_ = dataset.id;\n    } else {\n      datasetId_ = datasetId;\n    }\n    assertUuid(datasetId_);\n    const data = {\n      split_name: splitName,\n      examples: exampleIds.map(id => {\n        assertUuid(id);\n        return id;\n      }),\n      remove\n    };\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId_}/splits`, {\n      method: \"PUT\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"update dataset splits\", true);\n  }\n  /**\n   * @deprecated This method is deprecated and will be removed in future LangSmith versions, use `evaluate` from `langsmith/evaluation` instead.\n   */\n  async evaluateRun(run, evaluator, {\n    sourceInfo,\n    loadChildRuns,\n    referenceExample\n  } = {\n    loadChildRuns: false\n  }) {\n    warnOnce(\"This method is deprecated and will be removed in future LangSmith versions, use `evaluate` from `langsmith/evaluation` instead.\");\n    let run_;\n    if (typeof run === \"string\") {\n      run_ = await this.readRun(run, {\n        loadChildRuns\n      });\n    } else if (typeof run === \"object\" && \"id\" in run) {\n      run_ = run;\n    } else {\n      throw new Error(`Invalid run type: ${typeof run}`);\n    }\n    if (run_.reference_example_id !== null && run_.reference_example_id !== undefined) {\n      referenceExample = await this.readExample(run_.reference_example_id);\n    }\n    const feedbackResult = await evaluator.evaluateRun(run_, referenceExample);\n    const [_, feedbacks] = await this._logEvaluationFeedback(feedbackResult, run_, sourceInfo);\n    return feedbacks[0];\n  }\n  async createFeedback(runId, key, {\n    score,\n    value,\n    correction,\n    comment,\n    sourceInfo,\n    feedbackSourceType = \"api\",\n    sourceRunId,\n    feedbackId,\n    feedbackConfig,\n    projectId,\n    comparativeExperimentId\n  }) {\n    if (!runId && !projectId) {\n      throw new Error(\"One of runId or projectId must be provided\");\n    }\n    if (runId && projectId) {\n      throw new Error(\"Only one of runId or projectId can be provided\");\n    }\n    const feedback_source = {\n      type: feedbackSourceType ?? \"api\",\n      metadata: sourceInfo ?? {}\n    };\n    if (sourceRunId !== undefined && feedback_source?.metadata !== undefined && !feedback_source.metadata[\"__run\"]) {\n      feedback_source.metadata[\"__run\"] = {\n        run_id: sourceRunId\n      };\n    }\n    if (feedback_source?.metadata !== undefined && feedback_source.metadata[\"__run\"]?.run_id !== undefined) {\n      assertUuid(feedback_source.metadata[\"__run\"].run_id);\n    }\n    const feedback = {\n      id: feedbackId ?? uuid.v4(),\n      run_id: runId,\n      key,\n      score,\n      value,\n      correction,\n      comment,\n      feedback_source: feedback_source,\n      comparative_experiment_id: comparativeExperimentId,\n      feedbackConfig,\n      session_id: projectId\n    };\n    const url = `${this.apiUrl}/feedback`;\n    const response = await this.caller.call(_getFetchImplementation(), url, {\n      method: \"POST\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(feedback),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"create feedback\", true);\n    return feedback;\n  }\n  async updateFeedback(feedbackId, {\n    score,\n    value,\n    correction,\n    comment\n  }) {\n    const feedbackUpdate = {};\n    if (score !== undefined && score !== null) {\n      feedbackUpdate[\"score\"] = score;\n    }\n    if (value !== undefined && value !== null) {\n      feedbackUpdate[\"value\"] = value;\n    }\n    if (correction !== undefined && correction !== null) {\n      feedbackUpdate[\"correction\"] = correction;\n    }\n    if (comment !== undefined && comment !== null) {\n      feedbackUpdate[\"comment\"] = comment;\n    }\n    assertUuid(feedbackId);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/feedback/${feedbackId}`, {\n      method: \"PATCH\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(feedbackUpdate),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"update feedback\", true);\n  }\n  async readFeedback(feedbackId) {\n    assertUuid(feedbackId);\n    const path = `/feedback/${feedbackId}`;\n    const response = await this._get(path);\n    return response;\n  }\n  async deleteFeedback(feedbackId) {\n    assertUuid(feedbackId);\n    const path = `/feedback/${feedbackId}`;\n    const response = await this.caller.call(_getFetchImplementation(), this.apiUrl + path, {\n      method: \"DELETE\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, `delete ${path}`);\n    await response.json();\n  }\n  async *listFeedback({\n    runIds,\n    feedbackKeys,\n    feedbackSourceTypes\n  } = {}) {\n    const queryParams = new URLSearchParams();\n    if (runIds) {\n      queryParams.append(\"run\", runIds.join(\",\"));\n    }\n    if (feedbackKeys) {\n      for (const key of feedbackKeys) {\n        queryParams.append(\"key\", key);\n      }\n    }\n    if (feedbackSourceTypes) {\n      for (const type of feedbackSourceTypes) {\n        queryParams.append(\"source\", type);\n      }\n    }\n    for await (const feedbacks of this._getPaginated(\"/feedback\", queryParams)) {\n      yield* feedbacks;\n    }\n  }\n  /**\n   * Creates a presigned feedback token and URL.\n   *\n   * The token can be used to authorize feedback metrics without\n   * needing an API key. This is useful for giving browser-based\n   * applications the ability to submit feedback without needing\n   * to expose an API key.\n   *\n   * @param runId - The ID of the run.\n   * @param feedbackKey - The feedback key.\n   * @param options - Additional options for the token.\n   * @param options.expiration - The expiration time for the token.\n   *\n   * @returns A promise that resolves to a FeedbackIngestToken.\n   */\n  async createPresignedFeedbackToken(runId, feedbackKey, {\n    expiration,\n    feedbackConfig\n  } = {}) {\n    const body = {\n      run_id: runId,\n      feedback_key: feedbackKey,\n      feedback_config: feedbackConfig\n    };\n    if (expiration) {\n      if (typeof expiration === \"string\") {\n        body[\"expires_at\"] = expiration;\n      } else if (expiration?.hours || expiration?.minutes || expiration?.days) {\n        body[\"expires_in\"] = expiration;\n      }\n    } else {\n      body[\"expires_in\"] = {\n        hours: 3\n      };\n    }\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/feedback/tokens`, {\n      method: \"POST\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    const result = await response.json();\n    return result;\n  }\n  async createComparativeExperiment({\n    name,\n    experimentIds,\n    referenceDatasetId,\n    createdAt,\n    description,\n    metadata,\n    id\n  }) {\n    if (experimentIds.length === 0) {\n      throw new Error(\"At least one experiment is required\");\n    }\n    if (!referenceDatasetId) {\n      referenceDatasetId = (await this.readProject({\n        projectId: experimentIds[0]\n      })).reference_dataset_id;\n    }\n    if (!referenceDatasetId == null) {\n      throw new Error(\"A reference dataset is required\");\n    }\n    const body = {\n      id,\n      name,\n      experiment_ids: experimentIds,\n      reference_dataset_id: referenceDatasetId,\n      description,\n      created_at: (createdAt ?? new Date())?.toISOString(),\n      extra: {}\n    };\n    if (metadata) body.extra[\"metadata\"] = metadata;\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/comparative`, {\n      method: \"POST\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    return await response.json();\n  }\n  /**\n   * Retrieves a list of presigned feedback tokens for a given run ID.\n   * @param runId The ID of the run.\n   * @returns An async iterable of FeedbackIngestToken objects.\n   */\n  async *listPresignedFeedbackTokens(runId) {\n    assertUuid(runId);\n    const params = new URLSearchParams({\n      run_id: runId\n    });\n    for await (const tokens of this._getPaginated(\"/feedback/tokens\", params)) {\n      yield* tokens;\n    }\n  }\n  _selectEvalResults(results) {\n    let results_;\n    if (\"results\" in results) {\n      results_ = results.results;\n    } else {\n      results_ = [results];\n    }\n    return results_;\n  }\n  async _logEvaluationFeedback(evaluatorResponse, run, sourceInfo) {\n    const evalResults = this._selectEvalResults(evaluatorResponse);\n    const feedbacks = [];\n    for (const res of evalResults) {\n      let sourceInfo_ = sourceInfo || {};\n      if (res.evaluatorInfo) {\n        sourceInfo_ = {\n          ...res.evaluatorInfo,\n          ...sourceInfo_\n        };\n      }\n      let runId_ = null;\n      if (res.targetRunId) {\n        runId_ = res.targetRunId;\n      } else if (run) {\n        runId_ = run.id;\n      }\n      feedbacks.push(await this.createFeedback(runId_, res.key, {\n        score: res.score,\n        value: res.value,\n        comment: res.comment,\n        correction: res.correction,\n        sourceInfo: sourceInfo_,\n        sourceRunId: res.sourceRunId,\n        feedbackConfig: res.feedbackConfig,\n        feedbackSourceType: \"model\"\n      }));\n    }\n    return [evalResults, feedbacks];\n  }\n  async logEvaluationFeedback(evaluatorResponse, run, sourceInfo) {\n    const [results] = await this._logEvaluationFeedback(evaluatorResponse, run, sourceInfo);\n    return results;\n  }\n  /**\n   * API for managing annotation queues\n   */\n  /**\n   * List the annotation queues on the LangSmith API.\n   * @param options - The options for listing annotation queues\n   * @param options.queueIds - The IDs of the queues to filter by\n   * @param options.name - The name of the queue to filter by\n   * @param options.nameContains - The substring that the queue name should contain\n   * @param options.limit - The maximum number of queues to return\n   * @returns An iterator of AnnotationQueue objects\n   */\n  async *listAnnotationQueues(options = {}) {\n    const {\n      queueIds,\n      name,\n      nameContains,\n      limit\n    } = options;\n    const params = new URLSearchParams();\n    if (queueIds) {\n      queueIds.forEach((id, i) => {\n        assertUuid(id, `queueIds[${i}]`);\n        params.append(\"ids\", id);\n      });\n    }\n    if (name) params.append(\"name\", name);\n    if (nameContains) params.append(\"name_contains\", nameContains);\n    params.append(\"limit\", (limit !== undefined ? Math.min(limit, 100) : 100).toString());\n    let count = 0;\n    for await (const queues of this._getPaginated(\"/annotation-queues\", params)) {\n      yield* queues;\n      count++;\n      if (limit !== undefined && count >= limit) break;\n    }\n  }\n  /**\n   * Create an annotation queue on the LangSmith API.\n   * @param options - The options for creating an annotation queue\n   * @param options.name - The name of the annotation queue\n   * @param options.description - The description of the annotation queue\n   * @param options.queueId - The ID of the annotation queue\n   * @returns The created AnnotationQueue object\n   */\n  async createAnnotationQueue(options) {\n    const {\n      name,\n      description,\n      queueId\n    } = options;\n    const body = {\n      name,\n      description,\n      id: queueId || uuid.v4()\n    };\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues`, {\n      method: \"POST\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(Object.fromEntries(Object.entries(body).filter(([_, v]) => v !== undefined))),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"create annotation queue\");\n    const data = await response.json();\n    return data;\n  }\n  /**\n   * Read an annotation queue with the specified queue ID.\n   * @param queueId - The ID of the annotation queue to read\n   * @returns The AnnotationQueue object\n   */\n  async readAnnotationQueue(queueId) {\n    // TODO: Replace when actual endpoint is added\n    const queueIteratorResult = await this.listAnnotationQueues({\n      queueIds: [queueId]\n    }).next();\n    if (queueIteratorResult.done) {\n      throw new Error(`Annotation queue with ID ${queueId} not found`);\n    }\n    return queueIteratorResult.value;\n  }\n  /**\n   * Update an annotation queue with the specified queue ID.\n   * @param queueId - The ID of the annotation queue to update\n   * @param options - The options for updating the annotation queue\n   * @param options.name - The new name for the annotation queue\n   * @param options.description - The new description for the annotation queue\n   */\n  async updateAnnotationQueue(queueId, options) {\n    const {\n      name,\n      description\n    } = options;\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}`, {\n      method: \"PATCH\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name,\n        description\n      }),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"update annotation queue\");\n  }\n  /**\n   * Delete an annotation queue with the specified queue ID.\n   * @param queueId - The ID of the annotation queue to delete\n   */\n  async deleteAnnotationQueue(queueId) {\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}`, {\n      method: \"DELETE\",\n      headers: {\n        ...this.headers,\n        Accept: \"application/json\"\n      },\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"delete annotation queue\");\n  }\n  /**\n   * Add runs to an annotation queue with the specified queue ID.\n   * @param queueId - The ID of the annotation queue\n   * @param runIds - The IDs of the runs to be added to the annotation queue\n   */\n  async addRunsToAnnotationQueue(queueId, runIds) {\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}/runs`, {\n      method: \"POST\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(runIds.map((id, i) => assertUuid(id, `runIds[${i}]`).toString())),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"add runs to annotation queue\");\n  }\n  /**\n   * Get a run from an annotation queue at the specified index.\n   * @param queueId - The ID of the annotation queue\n   * @param index - The index of the run to retrieve\n   * @returns A Promise that resolves to a RunWithAnnotationQueueInfo object\n   * @throws {Error} If the run is not found at the given index or for other API-related errors\n   */\n  async getRunFromAnnotationQueue(queueId, index) {\n    const baseUrl = `/annotation-queues/${assertUuid(queueId, \"queueId\")}/run`;\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}${baseUrl}/${index}`, {\n      method: \"GET\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"get run from annotation queue\");\n    return await response.json();\n  }\n  /**\n   * Delete a run from an an annotation queue.\n   * @param queueId - The ID of the annotation queue to delete the run from\n   * @param queueRunId - The ID of the run to delete from the annotation queue\n   */\n  async deleteRunFromAnnotationQueue(queueId, queueRunId) {\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}/runs/${assertUuid(queueRunId, \"queueRunId\")}`, {\n      method: \"DELETE\",\n      headers: {\n        ...this.headers,\n        Accept: \"application/json\"\n      },\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"delete run from annotation queue\");\n  }\n  /**\n   * Get the size of an annotation queue.\n   * @param queueId - The ID of the annotation queue\n   */\n  async getSizeFromAnnotationQueue(queueId) {\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}/size`, {\n      method: \"GET\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"get size from annotation queue\");\n    return await response.json();\n  }\n  async _currentTenantIsOwner(owner) {\n    const settings = await this._getSettings();\n    return owner == \"-\" || settings.tenant_handle === owner;\n  }\n  async _ownerConflictError(action, owner) {\n    const settings = await this._getSettings();\n    return new Error(`Cannot ${action} for another tenant.\\n\n      Current tenant: ${settings.tenant_handle}\\n\n      Requested tenant: ${owner}`);\n  }\n  async _getLatestCommitHash(promptOwnerAndName) {\n    const res = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/commits/${promptOwnerAndName}/?limit=${1}&offset=${0}`, {\n      method: \"GET\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    const json = await res.json();\n    if (!res.ok) {\n      const detail = typeof json.detail === \"string\" ? json.detail : JSON.stringify(json.detail);\n      const error = new Error(`Error ${res.status}: ${res.statusText}\\n${detail}`);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      error.statusCode = res.status;\n      throw error;\n    }\n    if (json.commits.length === 0) {\n      return undefined;\n    }\n    return json.commits[0].commit_hash;\n  }\n  async _likeOrUnlikePrompt(promptIdentifier, like) {\n    const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/likes/${owner}/${promptName}`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        like: like\n      }),\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, `${like ? \"like\" : \"unlike\"} prompt`);\n    return await response.json();\n  }\n  async _getPromptUrl(promptIdentifier) {\n    const [owner, promptName, commitHash] = parsePromptIdentifier(promptIdentifier);\n    if (!(await this._currentTenantIsOwner(owner))) {\n      if (commitHash !== \"latest\") {\n        return `${this.getHostUrl()}/hub/${owner}/${promptName}/${commitHash.substring(0, 8)}`;\n      } else {\n        return `${this.getHostUrl()}/hub/${owner}/${promptName}`;\n      }\n    } else {\n      const settings = await this._getSettings();\n      if (commitHash !== \"latest\") {\n        return `${this.getHostUrl()}/prompts/${promptName}/${commitHash.substring(0, 8)}?organizationId=${settings.id}`;\n      } else {\n        return `${this.getHostUrl()}/prompts/${promptName}?organizationId=${settings.id}`;\n      }\n    }\n  }\n  async promptExists(promptIdentifier) {\n    const prompt = await this.getPrompt(promptIdentifier);\n    return !!prompt;\n  }\n  async likePrompt(promptIdentifier) {\n    return this._likeOrUnlikePrompt(promptIdentifier, true);\n  }\n  async unlikePrompt(promptIdentifier) {\n    return this._likeOrUnlikePrompt(promptIdentifier, false);\n  }\n  async *listCommits(promptOwnerAndName) {\n    for await (const commits of this._getPaginated(`/commits/${promptOwnerAndName}/`, new URLSearchParams(), res => res.commits)) {\n      yield* commits;\n    }\n  }\n  async *listPrompts(options) {\n    const params = new URLSearchParams();\n    params.append(\"sort_field\", options?.sortField ?? \"updated_at\");\n    params.append(\"sort_direction\", \"desc\");\n    params.append(\"is_archived\", (!!options?.isArchived).toString());\n    if (options?.isPublic !== undefined) {\n      params.append(\"is_public\", options.isPublic.toString());\n    }\n    if (options?.query) {\n      params.append(\"query\", options.query);\n    }\n    for await (const prompts of this._getPaginated(\"/repos\", params, res => res.repos)) {\n      yield* prompts;\n    }\n  }\n  async getPrompt(promptIdentifier) {\n    const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/repos/${owner}/${promptName}`, {\n      method: \"GET\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    if (response.status === 404) {\n      return null;\n    }\n    await raiseForStatus(response, \"get prompt\");\n    const result = await response.json();\n    if (result.repo) {\n      return result.repo;\n    } else {\n      return null;\n    }\n  }\n  async createPrompt(promptIdentifier, options) {\n    const settings = await this._getSettings();\n    if (options?.isPublic && !settings.tenant_handle) {\n      throw new Error(`Cannot create a public prompt without first\\n\n        creating a LangChain Hub handle. \n        You can add a handle by creating a public prompt at:\\n\n        https://smith.langchain.com/prompts`);\n    }\n    const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n    if (!(await this._currentTenantIsOwner(owner))) {\n      throw await this._ownerConflictError(\"create a prompt\", owner);\n    }\n    const data = {\n      repo_handle: promptName,\n      ...(options?.description && {\n        description: options.description\n      }),\n      ...(options?.readme && {\n        readme: options.readme\n      }),\n      ...(options?.tags && {\n        tags: options.tags\n      }),\n      is_public: !!options?.isPublic\n    };\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/repos/`, {\n      method: \"POST\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"create prompt\");\n    const {\n      repo\n    } = await response.json();\n    return repo;\n  }\n  async createCommit(promptIdentifier, object, options) {\n    if (!(await this.promptExists(promptIdentifier))) {\n      throw new Error(\"Prompt does not exist, you must create it first.\");\n    }\n    const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n    const resolvedParentCommitHash = options?.parentCommitHash === \"latest\" || !options?.parentCommitHash ? await this._getLatestCommitHash(`${owner}/${promptName}`) : options?.parentCommitHash;\n    const payload = {\n      manifest: JSON.parse(JSON.stringify(object)),\n      parent_commit: resolvedParentCommitHash\n    };\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/commits/${owner}/${promptName}`, {\n      method: \"POST\",\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload),\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"create commit\");\n    const result = await response.json();\n    return this._getPromptUrl(`${owner}/${promptName}${result.commit_hash ? `:${result.commit_hash}` : \"\"}`);\n  }\n  /**\n   * Update examples with attachments using multipart form data.\n   * @param updates List of ExampleUpdateWithAttachments objects to upsert\n   * @returns Promise with the update response\n   */\n  async updateExamplesMultipart(datasetId, updates = []) {\n    if (!(await this._getMultiPartSupport())) {\n      throw new Error(\"Your LangSmith version does not allow using the multipart examples endpoint, please update to the latest version.\");\n    }\n    const formData = new FormData();\n    for (const example of updates) {\n      const exampleId = example.id;\n      // Prepare the main example body\n      const exampleBody = {\n        ...(example.metadata && {\n          metadata: example.metadata\n        }),\n        ...(example.split && {\n          split: example.split\n        })\n      };\n      // Add main example data\n      const stringifiedExample = serializePayloadForTracing(exampleBody);\n      const exampleBlob = new Blob([stringifiedExample], {\n        type: \"application/json\"\n      });\n      formData.append(exampleId, exampleBlob);\n      // Add inputs\n      if (example.inputs) {\n        const stringifiedInputs = serializePayloadForTracing(example.inputs);\n        const inputsBlob = new Blob([stringifiedInputs], {\n          type: \"application/json\"\n        });\n        formData.append(`${exampleId}.inputs`, inputsBlob);\n      }\n      // Add outputs if present\n      if (example.outputs) {\n        const stringifiedOutputs = serializePayloadForTracing(example.outputs);\n        const outputsBlob = new Blob([stringifiedOutputs], {\n          type: \"application/json\"\n        });\n        formData.append(`${exampleId}.outputs`, outputsBlob);\n      }\n      // Add attachments if present\n      if (example.attachments) {\n        for (const [name, attachment] of Object.entries(example.attachments)) {\n          let mimeType;\n          let data;\n          if (Array.isArray(attachment)) {\n            [mimeType, data] = attachment;\n          } else {\n            mimeType = attachment.mimeType;\n            data = attachment.data;\n          }\n          const attachmentBlob = new Blob([data], {\n            type: `${mimeType}; length=${data.byteLength}`\n          });\n          formData.append(`${exampleId}.attachment.${name}`, attachmentBlob);\n        }\n      }\n      if (example.attachments_operations) {\n        const stringifiedAttachmentsOperations = serializePayloadForTracing(example.attachments_operations);\n        const attachmentsOperationsBlob = new Blob([stringifiedAttachmentsOperations], {\n          type: \"application/json\"\n        });\n        formData.append(`${exampleId}.attachments_operations`, attachmentsOperationsBlob);\n      }\n    }\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/v1/platform/datasets/${datasetId}/examples`, {\n      method: \"PATCH\",\n      headers: this.headers,\n      body: formData\n    });\n    const result = await response.json();\n    return result;\n  }\n  /**\n   * Upload examples with attachments using multipart form data.\n   * @param uploads List of ExampleUploadWithAttachments objects to upload\n   * @returns Promise with the upload response\n   */\n  async uploadExamplesMultipart(datasetId, uploads = []) {\n    if (!(await this._getMultiPartSupport())) {\n      throw new Error(\"Your LangSmith version does not allow using the multipart examples endpoint, please update to the latest version.\");\n    }\n    const formData = new FormData();\n    for (const example of uploads) {\n      const exampleId = (example.id ?? uuid.v4()).toString();\n      // Prepare the main example body\n      const exampleBody = {\n        created_at: example.created_at,\n        ...(example.metadata && {\n          metadata: example.metadata\n        }),\n        ...(example.split && {\n          split: example.split\n        })\n      };\n      // Add main example data\n      const stringifiedExample = serializePayloadForTracing(exampleBody);\n      const exampleBlob = new Blob([stringifiedExample], {\n        type: \"application/json\"\n      });\n      formData.append(exampleId, exampleBlob);\n      // Add inputs\n      const stringifiedInputs = serializePayloadForTracing(example.inputs);\n      const inputsBlob = new Blob([stringifiedInputs], {\n        type: \"application/json\"\n      });\n      formData.append(`${exampleId}.inputs`, inputsBlob);\n      // Add outputs if present\n      if (example.outputs) {\n        const stringifiedOutputs = serializePayloadForTracing(example.outputs);\n        const outputsBlob = new Blob([stringifiedOutputs], {\n          type: \"application/json\"\n        });\n        formData.append(`${exampleId}.outputs`, outputsBlob);\n      }\n      // Add attachments if present\n      if (example.attachments) {\n        for (const [name, attachment] of Object.entries(example.attachments)) {\n          let mimeType;\n          let data;\n          if (Array.isArray(attachment)) {\n            [mimeType, data] = attachment;\n          } else {\n            mimeType = attachment.mimeType;\n            data = attachment.data;\n          }\n          const attachmentBlob = new Blob([data], {\n            type: `${mimeType}; length=${data.byteLength}`\n          });\n          formData.append(`${exampleId}.attachment.${name}`, attachmentBlob);\n        }\n      }\n    }\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/v1/platform/datasets/${datasetId}/examples`, {\n      method: \"POST\",\n      headers: this.headers,\n      body: formData\n    });\n    const result = await response.json();\n    return result;\n  }\n  async updatePrompt(promptIdentifier, options) {\n    if (!(await this.promptExists(promptIdentifier))) {\n      throw new Error(\"Prompt does not exist, you must create it first.\");\n    }\n    const [owner, promptName] = parsePromptIdentifier(promptIdentifier);\n    if (!(await this._currentTenantIsOwner(owner))) {\n      throw await this._ownerConflictError(\"update a prompt\", owner);\n    }\n    const payload = {};\n    if (options?.description !== undefined) payload.description = options.description;\n    if (options?.readme !== undefined) payload.readme = options.readme;\n    if (options?.tags !== undefined) payload.tags = options.tags;\n    if (options?.isPublic !== undefined) payload.is_public = options.isPublic;\n    if (options?.isArchived !== undefined) payload.is_archived = options.isArchived;\n    // Check if payload is empty\n    if (Object.keys(payload).length === 0) {\n      throw new Error(\"No valid update options provided\");\n    }\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/repos/${owner}/${promptName}`, {\n      method: \"PATCH\",\n      body: JSON.stringify(payload),\n      headers: {\n        ...this.headers,\n        \"Content-Type\": \"application/json\"\n      },\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"update prompt\");\n    return response.json();\n  }\n  async deletePrompt(promptIdentifier) {\n    if (!(await this.promptExists(promptIdentifier))) {\n      throw new Error(\"Prompt does not exist, you must create it first.\");\n    }\n    const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n    if (!(await this._currentTenantIsOwner(owner))) {\n      throw await this._ownerConflictError(\"delete a prompt\", owner);\n    }\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/repos/${owner}/${promptName}`, {\n      method: \"DELETE\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    return await response.json();\n  }\n  async pullPromptCommit(promptIdentifier, options) {\n    const [owner, promptName, commitHash] = parsePromptIdentifier(promptIdentifier);\n    const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/commits/${owner}/${promptName}/${commitHash}${options?.includeModel ? \"?include_model=true\" : \"\"}`, {\n      method: \"GET\",\n      headers: this.headers,\n      signal: AbortSignal.timeout(this.timeout_ms),\n      ...this.fetchOptions\n    });\n    await raiseForStatus(response, \"pull prompt commit\");\n    const result = await response.json();\n    return {\n      owner,\n      repo: promptName,\n      commit_hash: result.commit_hash,\n      manifest: result.manifest,\n      examples: result.examples\n    };\n  }\n  /**\n   * This method should not be used directly, use `import { pull } from \"langchain/hub\"` instead.\n   * Using this method directly returns the JSON string of the prompt rather than a LangChain object.\n   * @private\n   */\n  async _pullPrompt(promptIdentifier, options) {\n    const promptObject = await this.pullPromptCommit(promptIdentifier, {\n      includeModel: options?.includeModel\n    });\n    const prompt = JSON.stringify(promptObject.manifest);\n    return prompt;\n  }\n  async pushPrompt(promptIdentifier, options) {\n    // Create or update prompt metadata\n    if (await this.promptExists(promptIdentifier)) {\n      if (options && Object.keys(options).some(key => key !== \"object\")) {\n        await this.updatePrompt(promptIdentifier, {\n          description: options?.description,\n          readme: options?.readme,\n          tags: options?.tags,\n          isPublic: options?.isPublic\n        });\n      }\n    } else {\n      await this.createPrompt(promptIdentifier, {\n        description: options?.description,\n        readme: options?.readme,\n        tags: options?.tags,\n        isPublic: options?.isPublic\n      });\n    }\n    if (!options?.object) {\n      return await this._getPromptUrl(promptIdentifier);\n    }\n    // Create a commit with the new manifest\n    const url = await this.createCommit(promptIdentifier, options?.object, {\n      parentCommitHash: options?.parentCommitHash\n    });\n    return url;\n  }\n  /**\n   * Clone a public dataset to your own langsmith tenant.\n   * This operation is idempotent. If you already have a dataset with the given name,\n   * this function will do nothing.\n      * @param {string} tokenOrUrl The token of the public dataset to clone.\n   * @param {Object} [options] Additional options for cloning the dataset.\n   * @param {string} [options.sourceApiUrl] The URL of the langsmith server where the data is hosted. Defaults to the API URL of your current client.\n   * @param {string} [options.datasetName] The name of the dataset to create in your tenant. Defaults to the name of the public dataset.\n   * @returns {Promise<void>}\n   */\n  async clonePublicDataset(tokenOrUrl, options = {}) {\n    const {\n      sourceApiUrl = this.apiUrl,\n      datasetName\n    } = options;\n    const [parsedApiUrl, tokenUuid] = this.parseTokenOrUrl(tokenOrUrl, sourceApiUrl);\n    const sourceClient = new Client({\n      apiUrl: parsedApiUrl,\n      // Placeholder API key not needed anymore in most cases, but\n      // some private deployments may have API key-based rate limiting\n      // that would cause this to fail if we provide no value.\n      apiKey: \"placeholder\"\n    });\n    const ds = await sourceClient.readSharedDataset(tokenUuid);\n    const finalDatasetName = datasetName || ds.name;\n    try {\n      if (await this.hasDataset({\n        datasetId: finalDatasetName\n      })) {\n        console.log(`Dataset ${finalDatasetName} already exists in your tenant. Skipping.`);\n        return;\n      }\n    } catch (_) {\n      // `.hasDataset` will throw an error if the dataset does not exist.\n      // no-op in that case\n    }\n    // Fetch examples first, then create the dataset\n    const examples = await sourceClient.listSharedExamples(tokenUuid);\n    const dataset = await this.createDataset(finalDatasetName, {\n      description: ds.description,\n      dataType: ds.data_type || \"kv\",\n      inputsSchema: ds.inputs_schema_definition ?? undefined,\n      outputsSchema: ds.outputs_schema_definition ?? undefined\n    });\n    try {\n      await this.createExamples({\n        inputs: examples.map(e => e.inputs),\n        outputs: examples.flatMap(e => e.outputs ? [e.outputs] : []),\n        datasetId: dataset.id\n      });\n    } catch (e) {\n      console.error(`An error occurred while creating dataset ${finalDatasetName}. ` + \"You should delete it manually.\");\n      throw e;\n    }\n  }\n  parseTokenOrUrl(urlOrToken, apiUrl, numParts = 2, kind = \"dataset\") {\n    // Try parsing as UUID\n    try {\n      assertUuid(urlOrToken); // Will throw if it's not a UUID.\n      return [apiUrl, urlOrToken];\n    } catch (_) {\n      // no-op if it's not a uuid\n    }\n    // Parse as URL\n    try {\n      const parsedUrl = new URL(urlOrToken);\n      const pathParts = parsedUrl.pathname.split(\"/\").filter(part => part !== \"\");\n      if (pathParts.length >= numParts) {\n        const tokenUuid = pathParts[pathParts.length - numParts];\n        return [apiUrl, tokenUuid];\n      } else {\n        throw new Error(`Invalid public ${kind} URL: ${urlOrToken}`);\n      }\n    } catch (error) {\n      throw new Error(`Invalid public ${kind} URL or token: ${urlOrToken}`);\n    }\n  }\n  /**\n   * Awaits all pending trace batches. Useful for environments where\n   * you need to be sure that all tracing requests finish before execution ends,\n   * such as serverless environments.\n   *\n   * @example\n   * ```\n   * import { Client } from \"langsmith\";\n   *\n   * const client = new Client();\n   *\n   * try {\n   *   // Tracing happens here\n   *   ...\n   * } finally {\n   *   await client.awaitPendingTraceBatches();\n   * }\n   * ```\n   *\n   * @returns A promise that resolves once all currently pending traces have sent.\n   */\n  awaitPendingTraceBatches() {\n    if (this.manualFlushMode) {\n      console.warn(\"[WARNING]: When tracing in manual flush mode, you must call `await client.flush()` manually to submit trace batches.\");\n      return Promise.resolve();\n    }\n    return Promise.all([...this.autoBatchQueue.items.map(({\n      itemPromise\n    }) => itemPromise), this.batchIngestCaller.queue.onIdle()]);\n  }\n}","map":{"version":3,"names":["uuid","AsyncCaller","convertLangChainMessageToExample","isLangChainMessage","getEnvironmentVariable","getLangChainEnvVarsMetadata","getLangSmithEnvironmentVariable","getRuntimeEnvironment","__version__","assertUuid","warnOnce","parsePromptIdentifier","raiseForStatus","_getFetchImplementation","serialize","serializePayloadForTracing","mergeRuntimeEnvIntoRunCreate","run","runtimeEnv","envVars","extra","metadata","runtime","revision_id","getTracingSamplingRate","samplingRateStr","undefined","samplingRate","parseFloat","Error","isLocalhost","url","strippedUrl","replace","hostname","split","toArray","iterable","result","item","push","trimQuotes","str","trim","handle429","response","status","retryAfter","parseInt","headers","get","Promise","resolve","setTimeout","AutoBatchQueue","constructor","Object","defineProperty","enumerable","configurable","writable","value","peek","items","itemPromiseResolve","itemPromise","size","length","action","payload","sizeBytes","pop","upToSizeBytes","popped","poppedSizeBytes","shift","map","it","forEach","DEFAULT_BATCH_SIZE_LIMIT_BYTES","SERVER_INFO_REQUEST_TIMEOUT","Client","config","Set","defaultConfig","getDefaultClientConfig","tracingSampleRate","apiUrl","endsWith","slice","apiKey","webUrl","timeout_ms","caller","callerOptions","traceBatchConcurrency","batchIngestCaller","maxRetries","maxConcurrency","onFailedResponseHook","hideInputs","anonymizer","hideOutputs","autoBatchTracing","blockOnRootRunFinalization","batchSizeBytesLimit","fetchOptions","manualFlushMode","getHostUrl","includes","processInputs","inputs","processOutputs","outputs","prepareRunCreateOrUpdateInputs","runParams","_getResponse","path","queryParams","paramsString","toString","call","method","signal","AbortSignal","timeout","_get","json","_getPaginated","URLSearchParams","transform","offset","Number","limit","set","String","_getCursorPaginatedList","body","requestMethod","dataKey","bodyParams","JSON","stringify","responseBody","cursors","next","cursor","_filterForSampling","runs","patch","sampled","filteredPostUuids","has","id","delete","trace_id","Math","random","add","_getBatchSizeLimitBytes","serverInfo","_ensureServerInfo","batch_ingest_config","size_limit_bytes","_getMultiPartSupport","instance_flags","dataset_examples_multipart_enabled","drainAutoBatchQueue","batchSizeLimit","promises","autoBatchQueue","batch","done","batchPromise","_processBatch","catch","console","error","all","ingestParams","runCreates","filter","runUpdates","use_multipart_endpoint","multipartIngestRuns","batchIngestRuns","processRunOperation","clearTimeout","autoBatchTimeout","sizeLimitBytes","autoBatchAggregationDelayMs","_getServerInfo","Accept","_getServerInfoPromise","_serverInfo","e","warn","then","_getSettings","settings","flush","createRun","session_name","project_name","runCreate","start_time","Date","now","dotted_order","mergedRunCreateParam","preparedCreateParams","create","preparedUpdateParams","update","createById","reduce","params","standaloneUpdates","updateParam","values","rawBatch","post","batchChunks","k","key","batchItems","reverse","batchItem","_postBatchIngestRuns","allAttachments","preparedCreate","attachments","invalidRunCreate","find","invalidRunUpdate","runUpdate","accumulatedContext","accumulatedParts","payloads","originalPayload","events","fields","stringifiedPayload","name","Blob","type","entries","stringifiedValue","attachment","contentType","content","Array","isArray","mimeType","data","byteLength","_sendMultipartRequest","join","parts","context","boundary","chunks","part","arrayBuffer","res","message","updateRun","runId","end_time","parent_run_id","readRun","loadChildRuns","child_run_ids","_loadChildRuns","getRunUrl","projectOpts","sessionId","session_id","projectName","readProject","projectId","project","tenantId","_getTenantId","run_","app_path","baseUrl","childRuns","listRuns","treemap","sort","a","b","localeCompare","childRun","child_runs","props","parentRunId","traceId","referenceExampleId","startTime","executionOrder","isRoot","runType","query","traceFilter","treeFilter","select","projectIds","projectNames","projectIds_","default_select","session","run_type","reference_example","trace_filter","tree_filter","execution_order","parent_run","toISOString","trace","is_root","runsYielded","newRuns","getRunStats","parentRun","referenceExampleIds","endTime","dataSourceType","data_source_type","filteredPayload","fromEntries","_","shareRun","shareId","run_id","share_token","v4","unshareRun","readRunSharedLink","listSharedRuns","shareToken","runIds","append","readDatasetSharedSchema","datasetId","datasetName","dataset","readDataset","shareSchema","shareDataset","dataset_id","unshareDataset","readSharedDataset","listSharedExamples","options","exampleIds","urlParams","v","ok","detail","statusText","example","_hostUrl","createProject","description","upsert","projectExtra","referenceDatasetId","upsert_","endpoint","updateProject","hasProject","includeStats","getProjectUrl","getDatasetUrl","_tenantId","projects","tenant_id","listProjects","nameContains","referenceDatasetName","referenceFree","deleteProject","projectId_","uploadCsv","csvFile","fileName","inputKeys","outputKeys","dataType","formData","FormData","createDataset","inputsSchema","outputsSchema","data_type","inputs_schema_definition","outputs_schema_definition","hasDataset","toLocaleLowerCase","diffDatasetVersions","fromVersion","toVersion","datasetId_","from_version","to_version","readDatasetOpenaiFinetuning","datasetText","text","line","parse","listDatasets","datasetIds","datasetNameContains","id_","datasets","updateDataset","_datasetId","updateDatasetTag","asOf","tag","as_of","deleteDataset","indexDataset","similarExamples","createExample","createdAt","exampleId","sourceRunId","createdAt_","created_at","source_run_id","createExamples","sourceRunIds","formattedExamples","input","idx","splits","createLLMExample","generation","output","createChatExample","generations","finalInput","finalOutput","readExample","rawExample","attachment_urls","rest","acc","presigned_url","mime_type","listExamples","inlineS3Urls","includeAttachments","dataset_version","inlineS3Urls_","serializedMetadata","field","i","rawExamples","deleteExample","updateExample","updateExamples","readDatasetVersion","resolvedDatasetId","listDatasetSplits","updateDatasetSplits","splitName","remove","split_name","examples","evaluateRun","evaluator","sourceInfo","referenceExample","reference_example_id","feedbackResult","feedbacks","_logEvaluationFeedback","createFeedback","score","correction","comment","feedbackSourceType","feedbackId","feedbackConfig","comparativeExperimentId","feedback_source","feedback","comparative_experiment_id","updateFeedback","feedbackUpdate","readFeedback","deleteFeedback","listFeedback","feedbackKeys","feedbackSourceTypes","createPresignedFeedbackToken","feedbackKey","expiration","feedback_key","feedback_config","hours","minutes","days","createComparativeExperiment","experimentIds","reference_dataset_id","experiment_ids","listPresignedFeedbackTokens","tokens","_selectEvalResults","results","results_","evaluatorResponse","evalResults","sourceInfo_","evaluatorInfo","runId_","targetRunId","logEvaluationFeedback","listAnnotationQueues","queueIds","min","count","queues","createAnnotationQueue","queueId","readAnnotationQueue","queueIteratorResult","updateAnnotationQueue","deleteAnnotationQueue","addRunsToAnnotationQueue","getRunFromAnnotationQueue","index","deleteRunFromAnnotationQueue","queueRunId","getSizeFromAnnotationQueue","_currentTenantIsOwner","owner","tenant_handle","_ownerConflictError","_getLatestCommitHash","promptOwnerAndName","statusCode","commits","commit_hash","_likeOrUnlikePrompt","promptIdentifier","like","promptName","_getPromptUrl","commitHash","substring","promptExists","prompt","getPrompt","likePrompt","unlikePrompt","listCommits","listPrompts","sortField","isArchived","isPublic","prompts","repos","repo","createPrompt","repo_handle","readme","tags","is_public","createCommit","object","resolvedParentCommitHash","parentCommitHash","manifest","parent_commit","updateExamplesMultipart","updates","exampleBody","stringifiedExample","exampleBlob","stringifiedInputs","inputsBlob","stringifiedOutputs","outputsBlob","attachmentBlob","attachments_operations","stringifiedAttachmentsOperations","attachmentsOperationsBlob","uploadExamplesMultipart","uploads","updatePrompt","is_archived","keys","deletePrompt","pullPromptCommit","includeModel","_pullPrompt","promptObject","pushPrompt","some","clonePublicDataset","tokenOrUrl","sourceApiUrl","parsedApiUrl","tokenUuid","parseTokenOrUrl","sourceClient","ds","finalDatasetName","log","flatMap","urlOrToken","numParts","kind","parsedUrl","URL","pathParts","pathname","awaitPendingTraceBatches","queue","onIdle"],"sources":["/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeniør - bachelor/3.året/Bachelor/Bacheloroppgave/chatbot/node_modules/langsmith/dist/client.js"],"sourcesContent":["import * as uuid from \"uuid\";\nimport { AsyncCaller } from \"./utils/async_caller.js\";\nimport { convertLangChainMessageToExample, isLangChainMessage, } from \"./utils/messages.js\";\nimport { getEnvironmentVariable, getLangChainEnvVarsMetadata, getLangSmithEnvironmentVariable, getRuntimeEnvironment, } from \"./utils/env.js\";\nimport { __version__ } from \"./index.js\";\nimport { assertUuid } from \"./utils/_uuid.js\";\nimport { warnOnce } from \"./utils/warn.js\";\nimport { parsePromptIdentifier } from \"./utils/prompts.js\";\nimport { raiseForStatus } from \"./utils/error.js\";\nimport { _getFetchImplementation } from \"./singletons/fetch.js\";\nimport { serialize as serializePayloadForTracing } from \"./utils/fast-safe-stringify/index.js\";\nexport function mergeRuntimeEnvIntoRunCreate(run) {\n    const runtimeEnv = getRuntimeEnvironment();\n    const envVars = getLangChainEnvVarsMetadata();\n    const extra = run.extra ?? {};\n    const metadata = extra.metadata;\n    run.extra = {\n        ...extra,\n        runtime: {\n            ...runtimeEnv,\n            ...extra?.runtime,\n        },\n        metadata: {\n            ...envVars,\n            ...(envVars.revision_id || run.revision_id\n                ? { revision_id: run.revision_id ?? envVars.revision_id }\n                : {}),\n            ...metadata,\n        },\n    };\n    return run;\n}\nconst getTracingSamplingRate = () => {\n    const samplingRateStr = getLangSmithEnvironmentVariable(\"TRACING_SAMPLING_RATE\");\n    if (samplingRateStr === undefined) {\n        return undefined;\n    }\n    const samplingRate = parseFloat(samplingRateStr);\n    if (samplingRate < 0 || samplingRate > 1) {\n        throw new Error(`LANGSMITH_TRACING_SAMPLING_RATE must be between 0 and 1 if set. Got: ${samplingRate}`);\n    }\n    return samplingRate;\n};\n// utility functions\nconst isLocalhost = (url) => {\n    const strippedUrl = url.replace(\"http://\", \"\").replace(\"https://\", \"\");\n    const hostname = strippedUrl.split(\"/\")[0].split(\":\")[0];\n    return (hostname === \"localhost\" || hostname === \"127.0.0.1\" || hostname === \"::1\");\n};\nasync function toArray(iterable) {\n    const result = [];\n    for await (const item of iterable) {\n        result.push(item);\n    }\n    return result;\n}\nfunction trimQuotes(str) {\n    if (str === undefined) {\n        return undefined;\n    }\n    return str\n        .trim()\n        .replace(/^\"(.*)\"$/, \"$1\")\n        .replace(/^'(.*)'$/, \"$1\");\n}\nconst handle429 = async (response) => {\n    if (response?.status === 429) {\n        const retryAfter = parseInt(response.headers.get(\"retry-after\") ?? \"30\", 10) * 1000;\n        if (retryAfter > 0) {\n            await new Promise((resolve) => setTimeout(resolve, retryAfter));\n            // Return directly after calling this check\n            return true;\n        }\n    }\n    // Fall back to existing status checks\n    return false;\n};\nexport class AutoBatchQueue {\n    constructor() {\n        Object.defineProperty(this, \"items\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"sizeBytes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n    peek() {\n        return this.items[0];\n    }\n    push(item) {\n        let itemPromiseResolve;\n        const itemPromise = new Promise((resolve) => {\n            // Setting itemPromiseResolve is synchronous with promise creation:\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise\n            itemPromiseResolve = resolve;\n        });\n        const size = serializePayloadForTracing(item.item).length;\n        this.items.push({\n            action: item.action,\n            payload: item.item,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            itemPromiseResolve: itemPromiseResolve,\n            itemPromise,\n            size,\n        });\n        this.sizeBytes += size;\n        return itemPromise;\n    }\n    pop(upToSizeBytes) {\n        if (upToSizeBytes < 1) {\n            throw new Error(\"Number of bytes to pop off may not be less than 1.\");\n        }\n        const popped = [];\n        let poppedSizeBytes = 0;\n        // Pop items until we reach or exceed the size limit\n        while (poppedSizeBytes + (this.peek()?.size ?? 0) < upToSizeBytes &&\n            this.items.length > 0) {\n            const item = this.items.shift();\n            if (item) {\n                popped.push(item);\n                poppedSizeBytes += item.size;\n                this.sizeBytes -= item.size;\n            }\n        }\n        // If there is an item on the queue we were unable to pop,\n        // just return it as a single batch.\n        if (popped.length === 0 && this.items.length > 0) {\n            const item = this.items.shift();\n            popped.push(item);\n            poppedSizeBytes += item.size;\n            this.sizeBytes -= item.size;\n        }\n        return [\n            popped.map((it) => ({ action: it.action, item: it.payload })),\n            () => popped.forEach((it) => it.itemPromiseResolve()),\n        ];\n    }\n}\n// 20 MB\nexport const DEFAULT_BATCH_SIZE_LIMIT_BYTES = 20_971_520;\nconst SERVER_INFO_REQUEST_TIMEOUT = 2500;\nexport class Client {\n    constructor(config = {}) {\n        Object.defineProperty(this, \"apiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"webUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"batchIngestCaller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout_ms\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_tenantId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        Object.defineProperty(this, \"hideInputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"hideOutputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tracingSampleRate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"filteredPostUuids\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Set()\n        });\n        Object.defineProperty(this, \"autoBatchTracing\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"autoBatchQueue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new AutoBatchQueue()\n        });\n        Object.defineProperty(this, \"autoBatchTimeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"autoBatchAggregationDelayMs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 250\n        });\n        Object.defineProperty(this, \"batchSizeBytesLimit\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"fetchOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"settings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"blockOnRootRunFinalization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: getEnvironmentVariable(\"LANGSMITH_TRACING_BACKGROUND\") === \"false\"\n        });\n        Object.defineProperty(this, \"traceBatchConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 5\n        });\n        Object.defineProperty(this, \"_serverInfo\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"_getServerInfoPromise\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"manualFlushMode\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        const defaultConfig = Client.getDefaultClientConfig();\n        this.tracingSampleRate = getTracingSamplingRate();\n        this.apiUrl = trimQuotes(config.apiUrl ?? defaultConfig.apiUrl) ?? \"\";\n        if (this.apiUrl.endsWith(\"/\")) {\n            this.apiUrl = this.apiUrl.slice(0, -1);\n        }\n        this.apiKey = trimQuotes(config.apiKey ?? defaultConfig.apiKey);\n        this.webUrl = trimQuotes(config.webUrl ?? defaultConfig.webUrl);\n        if (this.webUrl?.endsWith(\"/\")) {\n            this.webUrl = this.webUrl.slice(0, -1);\n        }\n        this.timeout_ms = config.timeout_ms ?? 90_000;\n        this.caller = new AsyncCaller(config.callerOptions ?? {});\n        this.traceBatchConcurrency =\n            config.traceBatchConcurrency ?? this.traceBatchConcurrency;\n        if (this.traceBatchConcurrency < 1) {\n            throw new Error(\"Trace batch concurrency must be positive.\");\n        }\n        this.batchIngestCaller = new AsyncCaller({\n            maxRetries: 2,\n            maxConcurrency: this.traceBatchConcurrency,\n            ...(config.callerOptions ?? {}),\n            onFailedResponseHook: handle429,\n        });\n        this.hideInputs =\n            config.hideInputs ?? config.anonymizer ?? defaultConfig.hideInputs;\n        this.hideOutputs =\n            config.hideOutputs ?? config.anonymizer ?? defaultConfig.hideOutputs;\n        this.autoBatchTracing = config.autoBatchTracing ?? this.autoBatchTracing;\n        this.blockOnRootRunFinalization =\n            config.blockOnRootRunFinalization ?? this.blockOnRootRunFinalization;\n        this.batchSizeBytesLimit = config.batchSizeBytesLimit;\n        this.fetchOptions = config.fetchOptions || {};\n        this.manualFlushMode = config.manualFlushMode ?? this.manualFlushMode;\n    }\n    static getDefaultClientConfig() {\n        const apiKey = getLangSmithEnvironmentVariable(\"API_KEY\");\n        const apiUrl = getLangSmithEnvironmentVariable(\"ENDPOINT\") ??\n            \"https://api.smith.langchain.com\";\n        const hideInputs = getLangSmithEnvironmentVariable(\"HIDE_INPUTS\") === \"true\";\n        const hideOutputs = getLangSmithEnvironmentVariable(\"HIDE_OUTPUTS\") === \"true\";\n        return {\n            apiUrl: apiUrl,\n            apiKey: apiKey,\n            webUrl: undefined,\n            hideInputs: hideInputs,\n            hideOutputs: hideOutputs,\n        };\n    }\n    getHostUrl() {\n        if (this.webUrl) {\n            return this.webUrl;\n        }\n        else if (isLocalhost(this.apiUrl)) {\n            this.webUrl = \"http://localhost:3000\";\n            return this.webUrl;\n        }\n        else if (this.apiUrl.endsWith(\"/api/v1\")) {\n            this.webUrl = this.apiUrl.replace(\"/api/v1\", \"\");\n            return this.webUrl;\n        }\n        else if (this.apiUrl.includes(\"/api\") &&\n            !this.apiUrl.split(\".\", 1)[0].endsWith(\"api\")) {\n            this.webUrl = this.apiUrl.replace(\"/api\", \"\");\n            return this.webUrl;\n        }\n        else if (this.apiUrl.split(\".\", 1)[0].includes(\"dev\")) {\n            this.webUrl = \"https://dev.smith.langchain.com\";\n            return this.webUrl;\n        }\n        else if (this.apiUrl.split(\".\", 1)[0].includes(\"eu\")) {\n            this.webUrl = \"https://eu.smith.langchain.com\";\n            return this.webUrl;\n        }\n        else if (this.apiUrl.split(\".\", 1)[0].includes(\"beta\")) {\n            this.webUrl = \"https://beta.smith.langchain.com\";\n            return this.webUrl;\n        }\n        else {\n            this.webUrl = \"https://smith.langchain.com\";\n            return this.webUrl;\n        }\n    }\n    get headers() {\n        const headers = {\n            \"User-Agent\": `langsmith-js/${__version__}`,\n        };\n        if (this.apiKey) {\n            headers[\"x-api-key\"] = `${this.apiKey}`;\n        }\n        return headers;\n    }\n    processInputs(inputs) {\n        if (this.hideInputs === false) {\n            return inputs;\n        }\n        if (this.hideInputs === true) {\n            return {};\n        }\n        if (typeof this.hideInputs === \"function\") {\n            return this.hideInputs(inputs);\n        }\n        return inputs;\n    }\n    processOutputs(outputs) {\n        if (this.hideOutputs === false) {\n            return outputs;\n        }\n        if (this.hideOutputs === true) {\n            return {};\n        }\n        if (typeof this.hideOutputs === \"function\") {\n            return this.hideOutputs(outputs);\n        }\n        return outputs;\n    }\n    prepareRunCreateOrUpdateInputs(run) {\n        const runParams = { ...run };\n        if (runParams.inputs !== undefined) {\n            runParams.inputs = this.processInputs(runParams.inputs);\n        }\n        if (runParams.outputs !== undefined) {\n            runParams.outputs = this.processOutputs(runParams.outputs);\n        }\n        return runParams;\n    }\n    async _getResponse(path, queryParams) {\n        const paramsString = queryParams?.toString() ?? \"\";\n        const url = `${this.apiUrl}${path}?${paramsString}`;\n        const response = await this.caller.call(_getFetchImplementation(), url, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `Failed to fetch ${path}`);\n        return response;\n    }\n    async _get(path, queryParams) {\n        const response = await this._getResponse(path, queryParams);\n        return response.json();\n    }\n    async *_getPaginated(path, queryParams = new URLSearchParams(), transform) {\n        let offset = Number(queryParams.get(\"offset\")) || 0;\n        const limit = Number(queryParams.get(\"limit\")) || 100;\n        while (true) {\n            queryParams.set(\"offset\", String(offset));\n            queryParams.set(\"limit\", String(limit));\n            const url = `${this.apiUrl}${path}?${queryParams}`;\n            const response = await this.caller.call(_getFetchImplementation(), url, {\n                method: \"GET\",\n                headers: this.headers,\n                signal: AbortSignal.timeout(this.timeout_ms),\n                ...this.fetchOptions,\n            });\n            await raiseForStatus(response, `Failed to fetch ${path}`);\n            const items = transform\n                ? transform(await response.json())\n                : await response.json();\n            if (items.length === 0) {\n                break;\n            }\n            yield items;\n            if (items.length < limit) {\n                break;\n            }\n            offset += items.length;\n        }\n    }\n    async *_getCursorPaginatedList(path, body = null, requestMethod = \"POST\", dataKey = \"runs\") {\n        const bodyParams = body ? { ...body } : {};\n        while (true) {\n            const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}${path}`, {\n                method: requestMethod,\n                headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n                signal: AbortSignal.timeout(this.timeout_ms),\n                ...this.fetchOptions,\n                body: JSON.stringify(bodyParams),\n            });\n            const responseBody = await response.json();\n            if (!responseBody) {\n                break;\n            }\n            if (!responseBody[dataKey]) {\n                break;\n            }\n            yield responseBody[dataKey];\n            const cursors = responseBody.cursors;\n            if (!cursors) {\n                break;\n            }\n            if (!cursors.next) {\n                break;\n            }\n            bodyParams.cursor = cursors.next;\n        }\n    }\n    _filterForSampling(runs, patch = false) {\n        if (this.tracingSampleRate === undefined) {\n            return runs;\n        }\n        if (patch) {\n            const sampled = [];\n            for (const run of runs) {\n                if (!this.filteredPostUuids.has(run.id)) {\n                    sampled.push(run);\n                }\n                else {\n                    this.filteredPostUuids.delete(run.id);\n                }\n            }\n            return sampled;\n        }\n        else {\n            const sampled = [];\n            for (const run of runs) {\n                if ((run.id !== run.trace_id &&\n                    !this.filteredPostUuids.has(run.trace_id)) ||\n                    Math.random() < this.tracingSampleRate) {\n                    sampled.push(run);\n                }\n                else {\n                    this.filteredPostUuids.add(run.id);\n                }\n            }\n            return sampled;\n        }\n    }\n    async _getBatchSizeLimitBytes() {\n        const serverInfo = await this._ensureServerInfo();\n        return (this.batchSizeBytesLimit ??\n            serverInfo.batch_ingest_config?.size_limit_bytes ??\n            DEFAULT_BATCH_SIZE_LIMIT_BYTES);\n    }\n    async _getMultiPartSupport() {\n        const serverInfo = await this._ensureServerInfo();\n        return (serverInfo.instance_flags?.dataset_examples_multipart_enabled ?? false);\n    }\n    drainAutoBatchQueue(batchSizeLimit) {\n        const promises = [];\n        while (this.autoBatchQueue.items.length > 0) {\n            const [batch, done] = this.autoBatchQueue.pop(batchSizeLimit);\n            if (!batch.length) {\n                done();\n                break;\n            }\n            const batchPromise = this._processBatch(batch, done).catch(console.error);\n            promises.push(batchPromise);\n        }\n        return Promise.all(promises);\n    }\n    async _processBatch(batch, done) {\n        if (!batch.length) {\n            done();\n            return;\n        }\n        try {\n            const ingestParams = {\n                runCreates: batch\n                    .filter((item) => item.action === \"create\")\n                    .map((item) => item.item),\n                runUpdates: batch\n                    .filter((item) => item.action === \"update\")\n                    .map((item) => item.item),\n            };\n            const serverInfo = await this._ensureServerInfo();\n            if (serverInfo?.batch_ingest_config?.use_multipart_endpoint) {\n                await this.multipartIngestRuns(ingestParams);\n            }\n            else {\n                await this.batchIngestRuns(ingestParams);\n            }\n        }\n        finally {\n            done();\n        }\n    }\n    async processRunOperation(item) {\n        clearTimeout(this.autoBatchTimeout);\n        this.autoBatchTimeout = undefined;\n        if (item.action === \"create\") {\n            item.item = mergeRuntimeEnvIntoRunCreate(item.item);\n        }\n        const itemPromise = this.autoBatchQueue.push(item);\n        if (this.manualFlushMode) {\n            // Rely on manual flushing in serverless environments\n            return itemPromise;\n        }\n        const sizeLimitBytes = await this._getBatchSizeLimitBytes();\n        if (this.autoBatchQueue.sizeBytes > sizeLimitBytes) {\n            void this.drainAutoBatchQueue(sizeLimitBytes);\n        }\n        if (this.autoBatchQueue.items.length > 0) {\n            this.autoBatchTimeout = setTimeout(() => {\n                this.autoBatchTimeout = undefined;\n                void this.drainAutoBatchQueue(sizeLimitBytes);\n            }, this.autoBatchAggregationDelayMs);\n        }\n        return itemPromise;\n    }\n    async _getServerInfo() {\n        const response = await _getFetchImplementation()(`${this.apiUrl}/info`, {\n            method: \"GET\",\n            headers: { Accept: \"application/json\" },\n            signal: AbortSignal.timeout(SERVER_INFO_REQUEST_TIMEOUT),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"get server info\");\n        return response.json();\n    }\n    async _ensureServerInfo() {\n        if (this._getServerInfoPromise === undefined) {\n            this._getServerInfoPromise = (async () => {\n                if (this._serverInfo === undefined) {\n                    try {\n                        this._serverInfo = await this._getServerInfo();\n                    }\n                    catch (e) {\n                        console.warn(`[WARNING]: LangSmith failed to fetch info on supported operations. Falling back to batch operations and default limits.`);\n                    }\n                }\n                return this._serverInfo ?? {};\n            })();\n        }\n        return this._getServerInfoPromise.then((serverInfo) => {\n            if (this._serverInfo === undefined) {\n                this._getServerInfoPromise = undefined;\n            }\n            return serverInfo;\n        });\n    }\n    async _getSettings() {\n        if (!this.settings) {\n            this.settings = this._get(\"/settings\");\n        }\n        return await this.settings;\n    }\n    /**\n     * Flushes current queued traces.\n     */\n    async flush() {\n        const sizeLimitBytes = await this._getBatchSizeLimitBytes();\n        await this.drainAutoBatchQueue(sizeLimitBytes);\n    }\n    async createRun(run) {\n        if (!this._filterForSampling([run]).length) {\n            return;\n        }\n        const headers = { ...this.headers, \"Content-Type\": \"application/json\" };\n        const session_name = run.project_name;\n        delete run.project_name;\n        const runCreate = this.prepareRunCreateOrUpdateInputs({\n            session_name,\n            ...run,\n            start_time: run.start_time ?? Date.now(),\n        });\n        if (this.autoBatchTracing &&\n            runCreate.trace_id !== undefined &&\n            runCreate.dotted_order !== undefined) {\n            void this.processRunOperation({\n                action: \"create\",\n                item: runCreate,\n            }).catch(console.error);\n            return;\n        }\n        const mergedRunCreateParam = mergeRuntimeEnvIntoRunCreate(runCreate);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs`, {\n            method: \"POST\",\n            headers,\n            body: serializePayloadForTracing(mergedRunCreateParam),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create run\", true);\n    }\n    /**\n     * Batch ingest/upsert multiple runs in the Langsmith system.\n     * @param runs\n     */\n    async batchIngestRuns({ runCreates, runUpdates, }) {\n        if (runCreates === undefined && runUpdates === undefined) {\n            return;\n        }\n        let preparedCreateParams = runCreates?.map((create) => this.prepareRunCreateOrUpdateInputs(create)) ?? [];\n        let preparedUpdateParams = runUpdates?.map((update) => this.prepareRunCreateOrUpdateInputs(update)) ?? [];\n        if (preparedCreateParams.length > 0 && preparedUpdateParams.length > 0) {\n            const createById = preparedCreateParams.reduce((params, run) => {\n                if (!run.id) {\n                    return params;\n                }\n                params[run.id] = run;\n                return params;\n            }, {});\n            const standaloneUpdates = [];\n            for (const updateParam of preparedUpdateParams) {\n                if (updateParam.id !== undefined && createById[updateParam.id]) {\n                    createById[updateParam.id] = {\n                        ...createById[updateParam.id],\n                        ...updateParam,\n                    };\n                }\n                else {\n                    standaloneUpdates.push(updateParam);\n                }\n            }\n            preparedCreateParams = Object.values(createById);\n            preparedUpdateParams = standaloneUpdates;\n        }\n        const rawBatch = {\n            post: this._filterForSampling(preparedCreateParams),\n            patch: this._filterForSampling(preparedUpdateParams, true),\n        };\n        if (!rawBatch.post.length && !rawBatch.patch.length) {\n            return;\n        }\n        const batchChunks = {\n            post: [],\n            patch: [],\n        };\n        for (const k of [\"post\", \"patch\"]) {\n            const key = k;\n            const batchItems = rawBatch[key].reverse();\n            let batchItem = batchItems.pop();\n            while (batchItem !== undefined) {\n                batchChunks[key].push(batchItem);\n                batchItem = batchItems.pop();\n            }\n        }\n        if (batchChunks.post.length > 0 || batchChunks.patch.length > 0) {\n            await this._postBatchIngestRuns(serializePayloadForTracing(batchChunks));\n        }\n    }\n    async _postBatchIngestRuns(body) {\n        const headers = {\n            ...this.headers,\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        };\n        const response = await this.batchIngestCaller.call(_getFetchImplementation(), `${this.apiUrl}/runs/batch`, {\n            method: \"POST\",\n            headers,\n            body: body,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"batch create run\", true);\n    }\n    /**\n     * Batch ingest/upsert multiple runs in the Langsmith system.\n     * @param runs\n     */\n    async multipartIngestRuns({ runCreates, runUpdates, }) {\n        if (runCreates === undefined && runUpdates === undefined) {\n            return;\n        }\n        // transform and convert to dicts\n        const allAttachments = {};\n        let preparedCreateParams = [];\n        for (const create of runCreates ?? []) {\n            const preparedCreate = this.prepareRunCreateOrUpdateInputs(create);\n            if (preparedCreate.id !== undefined &&\n                preparedCreate.attachments !== undefined) {\n                allAttachments[preparedCreate.id] = preparedCreate.attachments;\n            }\n            delete preparedCreate.attachments;\n            preparedCreateParams.push(preparedCreate);\n        }\n        let preparedUpdateParams = [];\n        for (const update of runUpdates ?? []) {\n            preparedUpdateParams.push(this.prepareRunCreateOrUpdateInputs(update));\n        }\n        // require trace_id and dotted_order\n        const invalidRunCreate = preparedCreateParams.find((runCreate) => {\n            return (runCreate.trace_id === undefined || runCreate.dotted_order === undefined);\n        });\n        if (invalidRunCreate !== undefined) {\n            throw new Error(`Multipart ingest requires \"trace_id\" and \"dotted_order\" to be set when creating a run`);\n        }\n        const invalidRunUpdate = preparedUpdateParams.find((runUpdate) => {\n            return (runUpdate.trace_id === undefined || runUpdate.dotted_order === undefined);\n        });\n        if (invalidRunUpdate !== undefined) {\n            throw new Error(`Multipart ingest requires \"trace_id\" and \"dotted_order\" to be set when updating a run`);\n        }\n        // combine post and patch dicts where possible\n        if (preparedCreateParams.length > 0 && preparedUpdateParams.length > 0) {\n            const createById = preparedCreateParams.reduce((params, run) => {\n                if (!run.id) {\n                    return params;\n                }\n                params[run.id] = run;\n                return params;\n            }, {});\n            const standaloneUpdates = [];\n            for (const updateParam of preparedUpdateParams) {\n                if (updateParam.id !== undefined && createById[updateParam.id]) {\n                    createById[updateParam.id] = {\n                        ...createById[updateParam.id],\n                        ...updateParam,\n                    };\n                }\n                else {\n                    standaloneUpdates.push(updateParam);\n                }\n            }\n            preparedCreateParams = Object.values(createById);\n            preparedUpdateParams = standaloneUpdates;\n        }\n        if (preparedCreateParams.length === 0 &&\n            preparedUpdateParams.length === 0) {\n            return;\n        }\n        // send the runs in multipart requests\n        const accumulatedContext = [];\n        const accumulatedParts = [];\n        for (const [method, payloads] of [\n            [\"post\", preparedCreateParams],\n            [\"patch\", preparedUpdateParams],\n        ]) {\n            for (const originalPayload of payloads) {\n                // collect fields to be sent as separate parts\n                const { inputs, outputs, events, attachments, ...payload } = originalPayload;\n                const fields = { inputs, outputs, events };\n                // encode the main run payload\n                const stringifiedPayload = serializePayloadForTracing(payload);\n                accumulatedParts.push({\n                    name: `${method}.${payload.id}`,\n                    payload: new Blob([stringifiedPayload], {\n                        type: `application/json; length=${stringifiedPayload.length}`, // encoding=gzip\n                    }),\n                });\n                // encode the fields we collected\n                for (const [key, value] of Object.entries(fields)) {\n                    if (value === undefined) {\n                        continue;\n                    }\n                    const stringifiedValue = serializePayloadForTracing(value);\n                    accumulatedParts.push({\n                        name: `${method}.${payload.id}.${key}`,\n                        payload: new Blob([stringifiedValue], {\n                            type: `application/json; length=${stringifiedValue.length}`,\n                        }),\n                    });\n                }\n                // encode the attachments\n                if (payload.id !== undefined) {\n                    const attachments = allAttachments[payload.id];\n                    if (attachments) {\n                        delete allAttachments[payload.id];\n                        for (const [name, attachment] of Object.entries(attachments)) {\n                            let contentType;\n                            let content;\n                            if (Array.isArray(attachment)) {\n                                [contentType, content] = attachment;\n                            }\n                            else {\n                                contentType = attachment.mimeType;\n                                content = attachment.data;\n                            }\n                            // Validate that the attachment name doesn't contain a '.'\n                            if (name.includes(\".\")) {\n                                console.warn(`Skipping attachment '${name}' for run ${payload.id}: Invalid attachment name. ` +\n                                    `Attachment names must not contain periods ('.'). Please rename the attachment and try again.`);\n                                continue;\n                            }\n                            accumulatedParts.push({\n                                name: `attachment.${payload.id}.${name}`,\n                                payload: new Blob([content], {\n                                    type: `${contentType}; length=${content.byteLength}`,\n                                }),\n                            });\n                        }\n                    }\n                }\n                // compute context\n                accumulatedContext.push(`trace=${payload.trace_id},id=${payload.id}`);\n            }\n        }\n        await this._sendMultipartRequest(accumulatedParts, accumulatedContext.join(\"; \"));\n    }\n    async _sendMultipartRequest(parts, context) {\n        try {\n            // Create multipart form data manually using Blobs\n            const boundary = \"----LangSmithFormBoundary\" + Math.random().toString(36).slice(2);\n            const chunks = [];\n            for (const part of parts) {\n                // Add field boundary\n                chunks.push(new Blob([`--${boundary}\\r\\n`]));\n                chunks.push(new Blob([\n                    `Content-Disposition: form-data; name=\"${part.name}\"\\r\\n`,\n                    `Content-Type: ${part.payload.type}\\r\\n\\r\\n`,\n                ]));\n                chunks.push(part.payload);\n                chunks.push(new Blob([\"\\r\\n\"]));\n            }\n            // Add final boundary\n            chunks.push(new Blob([`--${boundary}--\\r\\n`]));\n            // Combine all chunks into a single Blob\n            const body = new Blob(chunks);\n            // Convert Blob to ArrayBuffer for compatibility\n            const arrayBuffer = await body.arrayBuffer();\n            const res = await this.batchIngestCaller.call(_getFetchImplementation(), `${this.apiUrl}/runs/multipart`, {\n                method: \"POST\",\n                headers: {\n                    ...this.headers,\n                    \"Content-Type\": `multipart/form-data; boundary=${boundary}`,\n                },\n                body: arrayBuffer,\n                signal: AbortSignal.timeout(this.timeout_ms),\n                ...this.fetchOptions,\n            });\n            await raiseForStatus(res, \"ingest multipart runs\", true);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        catch (e) {\n            console.warn(`${e.message.trim()}\\n\\nContext: ${context}`);\n        }\n    }\n    async updateRun(runId, run) {\n        assertUuid(runId);\n        if (run.inputs) {\n            run.inputs = this.processInputs(run.inputs);\n        }\n        if (run.outputs) {\n            run.outputs = this.processOutputs(run.outputs);\n        }\n        // TODO: Untangle types\n        const data = { ...run, id: runId };\n        if (!this._filterForSampling([data], true).length) {\n            return;\n        }\n        if (this.autoBatchTracing &&\n            data.trace_id !== undefined &&\n            data.dotted_order !== undefined) {\n            if (run.end_time !== undefined &&\n                data.parent_run_id === undefined &&\n                this.blockOnRootRunFinalization &&\n                !this.manualFlushMode) {\n                // Trigger batches as soon as a root trace ends and wait to ensure trace finishes\n                // in serverless environments.\n                await this.processRunOperation({ action: \"update\", item: data }).catch(console.error);\n                return;\n            }\n            else {\n                void this.processRunOperation({ action: \"update\", item: data }).catch(console.error);\n            }\n            return;\n        }\n        const headers = { ...this.headers, \"Content-Type\": \"application/json\" };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/${runId}`, {\n            method: \"PATCH\",\n            headers,\n            body: serializePayloadForTracing(run),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update run\", true);\n    }\n    async readRun(runId, { loadChildRuns } = { loadChildRuns: false }) {\n        assertUuid(runId);\n        let run = await this._get(`/runs/${runId}`);\n        if (loadChildRuns && run.child_run_ids) {\n            run = await this._loadChildRuns(run);\n        }\n        return run;\n    }\n    async getRunUrl({ runId, run, projectOpts, }) {\n        if (run !== undefined) {\n            let sessionId;\n            if (run.session_id) {\n                sessionId = run.session_id;\n            }\n            else if (projectOpts?.projectName) {\n                sessionId = (await this.readProject({ projectName: projectOpts?.projectName })).id;\n            }\n            else if (projectOpts?.projectId) {\n                sessionId = projectOpts?.projectId;\n            }\n            else {\n                const project = await this.readProject({\n                    projectName: getLangSmithEnvironmentVariable(\"PROJECT\") || \"default\",\n                });\n                sessionId = project.id;\n            }\n            const tenantId = await this._getTenantId();\n            return `${this.getHostUrl()}/o/${tenantId}/projects/p/${sessionId}/r/${run.id}?poll=true`;\n        }\n        else if (runId !== undefined) {\n            const run_ = await this.readRun(runId);\n            if (!run_.app_path) {\n                throw new Error(`Run ${runId} has no app_path`);\n            }\n            const baseUrl = this.getHostUrl();\n            return `${baseUrl}${run_.app_path}`;\n        }\n        else {\n            throw new Error(\"Must provide either runId or run\");\n        }\n    }\n    async _loadChildRuns(run) {\n        const childRuns = await toArray(this.listRuns({ id: run.child_run_ids }));\n        const treemap = {};\n        const runs = {};\n        // TODO: make dotted order required when the migration finishes\n        childRuns.sort((a, b) => (a?.dotted_order ?? \"\").localeCompare(b?.dotted_order ?? \"\"));\n        for (const childRun of childRuns) {\n            if (childRun.parent_run_id === null ||\n                childRun.parent_run_id === undefined) {\n                throw new Error(`Child run ${childRun.id} has no parent`);\n            }\n            if (!(childRun.parent_run_id in treemap)) {\n                treemap[childRun.parent_run_id] = [];\n            }\n            treemap[childRun.parent_run_id].push(childRun);\n            runs[childRun.id] = childRun;\n        }\n        run.child_runs = treemap[run.id] || [];\n        for (const runId in treemap) {\n            if (runId !== run.id) {\n                runs[runId].child_runs = treemap[runId];\n            }\n        }\n        return run;\n    }\n    /**\n     * List runs from the LangSmith server.\n     * @param projectId - The ID of the project to filter by.\n     * @param projectName - The name of the project to filter by.\n     * @param parentRunId - The ID of the parent run to filter by.\n     * @param traceId - The ID of the trace to filter by.\n     * @param referenceExampleId - The ID of the reference example to filter by.\n     * @param startTime - The start time to filter by.\n     * @param isRoot - Indicates whether to only return root runs.\n     * @param runType - The run type to filter by.\n     * @param error - Indicates whether to filter by error runs.\n     * @param id - The ID of the run to filter by.\n     * @param query - The query string to filter by.\n     * @param filter - The filter string to apply to the run spans.\n     * @param traceFilter - The filter string to apply on the root run of the trace.\n     * @param limit - The maximum number of runs to retrieve.\n     * @returns {AsyncIterable<Run>} - The runs.\n     *\n     * @example\n     * // List all runs in a project\n     * const projectRuns = client.listRuns({ projectName: \"<your_project>\" });\n     *\n     * @example\n     * // List LLM and Chat runs in the last 24 hours\n     * const todaysLLMRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   start_time: new Date(Date.now() - 24 * 60 * 60 * 1000),\n     *   run_type: \"llm\",\n     * });\n     *\n     * @example\n     * // List traces in a project\n     * const rootRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   execution_order: 1,\n     * });\n     *\n     * @example\n     * // List runs without errors\n     * const correctRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   error: false,\n     * });\n     *\n     * @example\n     * // List runs by run ID\n     * const runIds = [\n     *   \"a36092d2-4ad5-4fb4-9c0d-0dba9a2ed836\",\n     *   \"9398e6be-964f-4aa4-8ae9-ad78cd4b7074\",\n     * ];\n     * const selectedRuns = client.listRuns({ run_ids: runIds });\n     *\n     * @example\n     * // List all \"chain\" type runs that took more than 10 seconds and had `total_tokens` greater than 5000\n     * const chainRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   filter: 'and(eq(run_type, \"chain\"), gt(latency, 10), gt(total_tokens, 5000))',\n     * });\n     *\n     * @example\n     * // List all runs called \"extractor\" whose root of the trace was assigned feedback \"user_score\" score of 1\n     * const goodExtractorRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   filter: 'eq(name, \"extractor\")',\n     *   traceFilter: 'and(eq(feedback_key, \"user_score\"), eq(feedback_score, 1))',\n     * });\n     *\n     * @example\n     * // List all runs that started after a specific timestamp and either have \"error\" not equal to null or a \"Correctness\" feedback score equal to 0\n     * const complexRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   filter: 'and(gt(start_time, \"2023-07-15T12:34:56Z\"), or(neq(error, null), and(eq(feedback_key, \"Correctness\"), eq(feedback_score, 0.0))))',\n     * });\n     *\n     * @example\n     * // List all runs where `tags` include \"experimental\" or \"beta\" and `latency` is greater than 2 seconds\n     * const taggedRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   filter: 'and(or(has(tags, \"experimental\"), has(tags, \"beta\")), gt(latency, 2))',\n     * });\n     */\n    async *listRuns(props) {\n        const { projectId, projectName, parentRunId, traceId, referenceExampleId, startTime, executionOrder, isRoot, runType, error, id, query, filter, traceFilter, treeFilter, limit, select, } = props;\n        let projectIds = [];\n        if (projectId) {\n            projectIds = Array.isArray(projectId) ? projectId : [projectId];\n        }\n        if (projectName) {\n            const projectNames = Array.isArray(projectName)\n                ? projectName\n                : [projectName];\n            const projectIds_ = await Promise.all(projectNames.map((name) => this.readProject({ projectName: name }).then((project) => project.id)));\n            projectIds.push(...projectIds_);\n        }\n        const default_select = [\n            \"app_path\",\n            \"child_run_ids\",\n            \"completion_cost\",\n            \"completion_tokens\",\n            \"dotted_order\",\n            \"end_time\",\n            \"error\",\n            \"events\",\n            \"extra\",\n            \"feedback_stats\",\n            \"first_token_time\",\n            \"id\",\n            \"inputs\",\n            \"name\",\n            \"outputs\",\n            \"parent_run_id\",\n            \"parent_run_ids\",\n            \"prompt_cost\",\n            \"prompt_tokens\",\n            \"reference_example_id\",\n            \"run_type\",\n            \"session_id\",\n            \"start_time\",\n            \"status\",\n            \"tags\",\n            \"total_cost\",\n            \"total_tokens\",\n            \"trace_id\",\n        ];\n        const body = {\n            session: projectIds.length ? projectIds : null,\n            run_type: runType,\n            reference_example: referenceExampleId,\n            query,\n            filter,\n            trace_filter: traceFilter,\n            tree_filter: treeFilter,\n            execution_order: executionOrder,\n            parent_run: parentRunId,\n            start_time: startTime ? startTime.toISOString() : null,\n            error,\n            id,\n            limit,\n            trace: traceId,\n            select: select ? select : default_select,\n            is_root: isRoot,\n        };\n        let runsYielded = 0;\n        for await (const runs of this._getCursorPaginatedList(\"/runs/query\", body)) {\n            if (limit) {\n                if (runsYielded >= limit) {\n                    break;\n                }\n                if (runs.length + runsYielded > limit) {\n                    const newRuns = runs.slice(0, limit - runsYielded);\n                    yield* newRuns;\n                    break;\n                }\n                runsYielded += runs.length;\n                yield* runs;\n            }\n            else {\n                yield* runs;\n            }\n        }\n    }\n    async getRunStats({ id, trace, parentRun, runType, projectNames, projectIds, referenceExampleIds, startTime, endTime, error, query, filter, traceFilter, treeFilter, isRoot, dataSourceType, }) {\n        let projectIds_ = projectIds || [];\n        if (projectNames) {\n            projectIds_ = [\n                ...(projectIds || []),\n                ...(await Promise.all(projectNames.map((name) => this.readProject({ projectName: name }).then((project) => project.id)))),\n            ];\n        }\n        const payload = {\n            id,\n            trace,\n            parent_run: parentRun,\n            run_type: runType,\n            session: projectIds_,\n            reference_example: referenceExampleIds,\n            start_time: startTime,\n            end_time: endTime,\n            error,\n            query,\n            filter,\n            trace_filter: traceFilter,\n            tree_filter: treeFilter,\n            is_root: isRoot,\n            data_source_type: dataSourceType,\n        };\n        // Remove undefined values from the payload\n        const filteredPayload = Object.fromEntries(Object.entries(payload).filter(([_, value]) => value !== undefined));\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/stats`, {\n            method: \"POST\",\n            headers: this.headers,\n            body: JSON.stringify(filteredPayload),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const result = await response.json();\n        return result;\n    }\n    async shareRun(runId, { shareId } = {}) {\n        const data = {\n            run_id: runId,\n            share_token: shareId || uuid.v4(),\n        };\n        assertUuid(runId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/${runId}/share`, {\n            method: \"PUT\",\n            headers: this.headers,\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const result = await response.json();\n        if (result === null || !(\"share_token\" in result)) {\n            throw new Error(\"Invalid response from server\");\n        }\n        return `${this.getHostUrl()}/public/${result[\"share_token\"]}/r`;\n    }\n    async unshareRun(runId) {\n        assertUuid(runId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/${runId}/share`, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"unshare run\", true);\n    }\n    async readRunSharedLink(runId) {\n        assertUuid(runId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/${runId}/share`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const result = await response.json();\n        if (result === null || !(\"share_token\" in result)) {\n            return undefined;\n        }\n        return `${this.getHostUrl()}/public/${result[\"share_token\"]}/r`;\n    }\n    async listSharedRuns(shareToken, { runIds, } = {}) {\n        const queryParams = new URLSearchParams({\n            share_token: shareToken,\n        });\n        if (runIds !== undefined) {\n            for (const runId of runIds) {\n                queryParams.append(\"id\", runId);\n            }\n        }\n        assertUuid(shareToken);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/public/${shareToken}/runs${queryParams}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const runs = await response.json();\n        return runs;\n    }\n    async readDatasetSharedSchema(datasetId, datasetName) {\n        if (!datasetId && !datasetName) {\n            throw new Error(\"Either datasetId or datasetName must be given\");\n        }\n        if (!datasetId) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId = dataset.id;\n        }\n        assertUuid(datasetId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId}/share`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const shareSchema = await response.json();\n        shareSchema.url = `${this.getHostUrl()}/public/${shareSchema.share_token}/d`;\n        return shareSchema;\n    }\n    async shareDataset(datasetId, datasetName) {\n        if (!datasetId && !datasetName) {\n            throw new Error(\"Either datasetId or datasetName must be given\");\n        }\n        if (!datasetId) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId = dataset.id;\n        }\n        const data = {\n            dataset_id: datasetId,\n        };\n        assertUuid(datasetId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId}/share`, {\n            method: \"PUT\",\n            headers: this.headers,\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const shareSchema = await response.json();\n        shareSchema.url = `${this.getHostUrl()}/public/${shareSchema.share_token}/d`;\n        return shareSchema;\n    }\n    async unshareDataset(datasetId) {\n        assertUuid(datasetId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId}/share`, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"unshare dataset\", true);\n    }\n    async readSharedDataset(shareToken) {\n        assertUuid(shareToken);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/public/${shareToken}/datasets`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const dataset = await response.json();\n        return dataset;\n    }\n    /**\n     * Get shared examples.\n     *\n     * @param {string} shareToken The share token to get examples for. A share token is the UUID (or LangSmith URL, including UUID) generated when explicitly marking an example as public.\n     * @param {Object} [options] Additional options for listing the examples.\n     * @param {string[] | undefined} [options.exampleIds] A list of example IDs to filter by.\n     * @returns {Promise<Example[]>} The shared examples.\n     */\n    async listSharedExamples(shareToken, options) {\n        const params = {};\n        if (options?.exampleIds) {\n            params.id = options.exampleIds;\n        }\n        const urlParams = new URLSearchParams();\n        Object.entries(params).forEach(([key, value]) => {\n            if (Array.isArray(value)) {\n                value.forEach((v) => urlParams.append(key, v));\n            }\n            else {\n                urlParams.append(key, value);\n            }\n        });\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/public/${shareToken}/examples?${urlParams.toString()}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const result = await response.json();\n        if (!response.ok) {\n            if (\"detail\" in result) {\n                throw new Error(`Failed to list shared examples.\\nStatus: ${response.status}\\nMessage: ${result.detail.join(\"\\n\")}`);\n            }\n            throw new Error(`Failed to list shared examples: ${response.status} ${response.statusText}`);\n        }\n        return result.map((example) => ({\n            ...example,\n            _hostUrl: this.getHostUrl(),\n        }));\n    }\n    async createProject({ projectName, description = null, metadata = null, upsert = false, projectExtra = null, referenceDatasetId = null, }) {\n        const upsert_ = upsert ? `?upsert=true` : \"\";\n        const endpoint = `${this.apiUrl}/sessions${upsert_}`;\n        const extra = projectExtra || {};\n        if (metadata) {\n            extra[\"metadata\"] = metadata;\n        }\n        const body = {\n            name: projectName,\n            extra,\n            description,\n        };\n        if (referenceDatasetId !== null) {\n            body[\"reference_dataset_id\"] = referenceDatasetId;\n        }\n        const response = await this.caller.call(_getFetchImplementation(), endpoint, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create project\");\n        const result = await response.json();\n        return result;\n    }\n    async updateProject(projectId, { name = null, description = null, metadata = null, projectExtra = null, endTime = null, }) {\n        const endpoint = `${this.apiUrl}/sessions/${projectId}`;\n        let extra = projectExtra;\n        if (metadata) {\n            extra = { ...(extra || {}), metadata };\n        }\n        const body = {\n            name,\n            extra,\n            description,\n            end_time: endTime ? new Date(endTime).toISOString() : null,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), endpoint, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update project\");\n        const result = await response.json();\n        return result;\n    }\n    async hasProject({ projectId, projectName, }) {\n        // TODO: Add a head request\n        let path = \"/sessions\";\n        const params = new URLSearchParams();\n        if (projectId !== undefined && projectName !== undefined) {\n            throw new Error(\"Must provide either projectName or projectId, not both\");\n        }\n        else if (projectId !== undefined) {\n            assertUuid(projectId);\n            path += `/${projectId}`;\n        }\n        else if (projectName !== undefined) {\n            params.append(\"name\", projectName);\n        }\n        else {\n            throw new Error(\"Must provide projectName or projectId\");\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}${path}?${params}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        // consume the response body to release the connection\n        // https://undici.nodejs.org/#/?id=garbage-collection\n        try {\n            const result = await response.json();\n            if (!response.ok) {\n                return false;\n            }\n            // If it's OK and we're querying by name, need to check the list is not empty\n            if (Array.isArray(result)) {\n                return result.length > 0;\n            }\n            // projectId querying\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    async readProject({ projectId, projectName, includeStats, }) {\n        let path = \"/sessions\";\n        const params = new URLSearchParams();\n        if (projectId !== undefined && projectName !== undefined) {\n            throw new Error(\"Must provide either projectName or projectId, not both\");\n        }\n        else if (projectId !== undefined) {\n            assertUuid(projectId);\n            path += `/${projectId}`;\n        }\n        else if (projectName !== undefined) {\n            params.append(\"name\", projectName);\n        }\n        else {\n            throw new Error(\"Must provide projectName or projectId\");\n        }\n        if (includeStats !== undefined) {\n            params.append(\"include_stats\", includeStats.toString());\n        }\n        const response = await this._get(path, params);\n        let result;\n        if (Array.isArray(response)) {\n            if (response.length === 0) {\n                throw new Error(`Project[id=${projectId}, name=${projectName}] not found`);\n            }\n            result = response[0];\n        }\n        else {\n            result = response;\n        }\n        return result;\n    }\n    async getProjectUrl({ projectId, projectName, }) {\n        if (projectId === undefined && projectName === undefined) {\n            throw new Error(\"Must provide either projectName or projectId\");\n        }\n        const project = await this.readProject({ projectId, projectName });\n        const tenantId = await this._getTenantId();\n        return `${this.getHostUrl()}/o/${tenantId}/projects/p/${project.id}`;\n    }\n    async getDatasetUrl({ datasetId, datasetName, }) {\n        if (datasetId === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        const dataset = await this.readDataset({ datasetId, datasetName });\n        const tenantId = await this._getTenantId();\n        return `${this.getHostUrl()}/o/${tenantId}/datasets/${dataset.id}`;\n    }\n    async _getTenantId() {\n        if (this._tenantId !== null) {\n            return this._tenantId;\n        }\n        const queryParams = new URLSearchParams({ limit: \"1\" });\n        for await (const projects of this._getPaginated(\"/sessions\", queryParams)) {\n            this._tenantId = projects[0].tenant_id;\n            return projects[0].tenant_id;\n        }\n        throw new Error(\"No projects found to resolve tenant.\");\n    }\n    async *listProjects({ projectIds, name, nameContains, referenceDatasetId, referenceDatasetName, referenceFree, metadata, } = {}) {\n        const params = new URLSearchParams();\n        if (projectIds !== undefined) {\n            for (const projectId of projectIds) {\n                params.append(\"id\", projectId);\n            }\n        }\n        if (name !== undefined) {\n            params.append(\"name\", name);\n        }\n        if (nameContains !== undefined) {\n            params.append(\"name_contains\", nameContains);\n        }\n        if (referenceDatasetId !== undefined) {\n            params.append(\"reference_dataset\", referenceDatasetId);\n        }\n        else if (referenceDatasetName !== undefined) {\n            const dataset = await this.readDataset({\n                datasetName: referenceDatasetName,\n            });\n            params.append(\"reference_dataset\", dataset.id);\n        }\n        if (referenceFree !== undefined) {\n            params.append(\"reference_free\", referenceFree.toString());\n        }\n        if (metadata !== undefined) {\n            params.append(\"metadata\", JSON.stringify(metadata));\n        }\n        for await (const projects of this._getPaginated(\"/sessions\", params)) {\n            yield* projects;\n        }\n    }\n    async deleteProject({ projectId, projectName, }) {\n        let projectId_;\n        if (projectId === undefined && projectName === undefined) {\n            throw new Error(\"Must provide projectName or projectId\");\n        }\n        else if (projectId !== undefined && projectName !== undefined) {\n            throw new Error(\"Must provide either projectName or projectId, not both\");\n        }\n        else if (projectId === undefined) {\n            projectId_ = (await this.readProject({ projectName })).id;\n        }\n        else {\n            projectId_ = projectId;\n        }\n        assertUuid(projectId_);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/sessions/${projectId_}`, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `delete session ${projectId_} (${projectName})`, true);\n    }\n    async uploadCsv({ csvFile, fileName, inputKeys, outputKeys, description, dataType, name, }) {\n        const url = `${this.apiUrl}/datasets/upload`;\n        const formData = new FormData();\n        formData.append(\"file\", csvFile, fileName);\n        inputKeys.forEach((key) => {\n            formData.append(\"input_keys\", key);\n        });\n        outputKeys.forEach((key) => {\n            formData.append(\"output_keys\", key);\n        });\n        if (description) {\n            formData.append(\"description\", description);\n        }\n        if (dataType) {\n            formData.append(\"data_type\", dataType);\n        }\n        if (name) {\n            formData.append(\"name\", name);\n        }\n        const response = await this.caller.call(_getFetchImplementation(), url, {\n            method: \"POST\",\n            headers: this.headers,\n            body: formData,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"upload CSV\");\n        const result = await response.json();\n        return result;\n    }\n    async createDataset(name, { description, dataType, inputsSchema, outputsSchema, metadata, } = {}) {\n        const body = {\n            name,\n            description,\n            extra: metadata ? { metadata } : undefined,\n        };\n        if (dataType) {\n            body.data_type = dataType;\n        }\n        if (inputsSchema) {\n            body.inputs_schema_definition = inputsSchema;\n        }\n        if (outputsSchema) {\n            body.outputs_schema_definition = outputsSchema;\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create dataset\");\n        const result = await response.json();\n        return result;\n    }\n    async readDataset({ datasetId, datasetName, }) {\n        let path = \"/datasets\";\n        // limit to 1 result\n        const params = new URLSearchParams({ limit: \"1\" });\n        if (datasetId !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId !== undefined) {\n            assertUuid(datasetId);\n            path += `/${datasetId}`;\n        }\n        else if (datasetName !== undefined) {\n            params.append(\"name\", datasetName);\n        }\n        else {\n            throw new Error(\"Must provide datasetName or datasetId\");\n        }\n        const response = await this._get(path, params);\n        let result;\n        if (Array.isArray(response)) {\n            if (response.length === 0) {\n                throw new Error(`Dataset[id=${datasetId}, name=${datasetName}] not found`);\n            }\n            result = response[0];\n        }\n        else {\n            result = response;\n        }\n        return result;\n    }\n    async hasDataset({ datasetId, datasetName, }) {\n        try {\n            await this.readDataset({ datasetId, datasetName });\n            return true;\n        }\n        catch (e) {\n            if (\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            e instanceof Error &&\n                e.message.toLocaleLowerCase().includes(\"not found\")) {\n                return false;\n            }\n            throw e;\n        }\n    }\n    async diffDatasetVersions({ datasetId, datasetName, fromVersion, toVersion, }) {\n        let datasetId_ = datasetId;\n        if (datasetId_ === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        else if (datasetId_ !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId_ === undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        const urlParams = new URLSearchParams({\n            from_version: typeof fromVersion === \"string\"\n                ? fromVersion\n                : fromVersion.toISOString(),\n            to_version: typeof toVersion === \"string\" ? toVersion : toVersion.toISOString(),\n        });\n        const response = await this._get(`/datasets/${datasetId_}/versions/diff`, urlParams);\n        return response;\n    }\n    async readDatasetOpenaiFinetuning({ datasetId, datasetName, }) {\n        const path = \"/datasets\";\n        if (datasetId !== undefined) {\n            // do nothing\n        }\n        else if (datasetName !== undefined) {\n            datasetId = (await this.readDataset({ datasetName })).id;\n        }\n        else {\n            throw new Error(\"Must provide datasetName or datasetId\");\n        }\n        const response = await this._getResponse(`${path}/${datasetId}/openai_ft`);\n        const datasetText = await response.text();\n        const dataset = datasetText\n            .trim()\n            .split(\"\\n\")\n            .map((line) => JSON.parse(line));\n        return dataset;\n    }\n    async *listDatasets({ limit = 100, offset = 0, datasetIds, datasetName, datasetNameContains, metadata, } = {}) {\n        const path = \"/datasets\";\n        const params = new URLSearchParams({\n            limit: limit.toString(),\n            offset: offset.toString(),\n        });\n        if (datasetIds !== undefined) {\n            for (const id_ of datasetIds) {\n                params.append(\"id\", id_);\n            }\n        }\n        if (datasetName !== undefined) {\n            params.append(\"name\", datasetName);\n        }\n        if (datasetNameContains !== undefined) {\n            params.append(\"name_contains\", datasetNameContains);\n        }\n        if (metadata !== undefined) {\n            params.append(\"metadata\", JSON.stringify(metadata));\n        }\n        for await (const datasets of this._getPaginated(path, params)) {\n            yield* datasets;\n        }\n    }\n    /**\n     * Update a dataset\n     * @param props The dataset details to update\n     * @returns The updated dataset\n     */\n    async updateDataset(props) {\n        const { datasetId, datasetName, ...update } = props;\n        if (!datasetId && !datasetName) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        const _datasetId = datasetId ?? (await this.readDataset({ datasetName })).id;\n        assertUuid(_datasetId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${_datasetId}`, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(update),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update dataset\");\n        return (await response.json());\n    }\n    /**\n     * Updates a tag on a dataset.\n     *\n     * If the tag is already assigned to a different version of this dataset,\n     * the tag will be moved to the new version. The as_of parameter is used to\n     * determine which version of the dataset to apply the new tags to.\n     *\n     * It must be an exact version of the dataset to succeed. You can\n     * use the \"readDatasetVersion\" method to find the exact version\n     * to apply the tags to.\n     * @param params.datasetId The ID of the dataset to update. Must be provided if \"datasetName\" is not provided.\n     * @param params.datasetName The name of the dataset to update. Must be provided if \"datasetId\" is not provided.\n     * @param params.asOf The timestamp of the dataset to apply the new tags to.\n     * @param params.tag The new tag to apply to the dataset.\n     */\n    async updateDatasetTag(props) {\n        const { datasetId, datasetName, asOf, tag } = props;\n        if (!datasetId && !datasetName) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        const _datasetId = datasetId ?? (await this.readDataset({ datasetName })).id;\n        assertUuid(_datasetId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${_datasetId}/tags`, {\n            method: \"PUT\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                as_of: typeof asOf === \"string\" ? asOf : asOf.toISOString(),\n                tag,\n            }),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update dataset tags\");\n    }\n    async deleteDataset({ datasetId, datasetName, }) {\n        let path = \"/datasets\";\n        let datasetId_ = datasetId;\n        if (datasetId !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetName !== undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        if (datasetId_ !== undefined) {\n            assertUuid(datasetId_);\n            path += `/${datasetId_}`;\n        }\n        else {\n            throw new Error(\"Must provide datasetName or datasetId\");\n        }\n        const response = await this.caller.call(_getFetchImplementation(), this.apiUrl + path, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `delete ${path}`);\n        await response.json();\n    }\n    async indexDataset({ datasetId, datasetName, tag, }) {\n        let datasetId_ = datasetId;\n        if (!datasetId_ && !datasetName) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        else if (datasetId_ && datasetName) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (!datasetId_) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        assertUuid(datasetId_);\n        const data = {\n            tag: tag,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId_}/index`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"index dataset\");\n        await response.json();\n    }\n    /**\n     * Lets you run a similarity search query on a dataset.\n     *\n     * Requires the dataset to be indexed. Please see the `indexDataset` method to set up indexing.\n     *\n     * @param inputs      The input on which to run the similarity search. Must have the\n     *                    same schema as the dataset.\n     *\n     * @param datasetId   The dataset to search for similar examples.\n     *\n     * @param limit       The maximum number of examples to return. Will return the top `limit` most\n     *                    similar examples in order of most similar to least similar. If no similar\n     *                    examples are found, random examples will be returned.\n     *\n     * @param filter      A filter string to apply to the search. Only examples will be returned that\n     *                    match the filter string. Some examples of filters\n     *\n     *                    - eq(metadata.mykey, \"value\")\n     *                    - and(neq(metadata.my.nested.key, \"value\"), neq(metadata.mykey, \"value\"))\n     *                    - or(eq(metadata.mykey, \"value\"), eq(metadata.mykey, \"othervalue\"))\n     *\n     * @returns           A list of similar examples.\n     *\n     *\n     * @example\n     * dataset_id = \"123e4567-e89b-12d3-a456-426614174000\"\n     * inputs = {\"text\": \"How many people live in Berlin?\"}\n     * limit = 5\n     * examples = await client.similarExamples(inputs, dataset_id, limit)\n     */\n    async similarExamples(inputs, datasetId, limit, { filter, } = {}) {\n        const data = {\n            limit: limit,\n            inputs: inputs,\n        };\n        if (filter !== undefined) {\n            data[\"filter\"] = filter;\n        }\n        assertUuid(datasetId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId}/search`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"fetch similar examples\");\n        const result = await response.json();\n        return result[\"examples\"];\n    }\n    async createExample(inputs, outputs, { datasetId, datasetName, createdAt, exampleId, metadata, split, sourceRunId, }) {\n        let datasetId_ = datasetId;\n        if (datasetId_ === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        else if (datasetId_ !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId_ === undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        const createdAt_ = createdAt || new Date();\n        const data = {\n            dataset_id: datasetId_,\n            inputs,\n            outputs,\n            created_at: createdAt_?.toISOString(),\n            id: exampleId,\n            metadata,\n            split,\n            source_run_id: sourceRunId,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/examples`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create example\");\n        const result = await response.json();\n        return result;\n    }\n    async createExamples(props) {\n        const { inputs, outputs, metadata, sourceRunIds, exampleIds, datasetId, datasetName, } = props;\n        let datasetId_ = datasetId;\n        if (datasetId_ === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        else if (datasetId_ !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId_ === undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        const formattedExamples = inputs.map((input, idx) => {\n            return {\n                dataset_id: datasetId_,\n                inputs: input,\n                outputs: outputs ? outputs[idx] : undefined,\n                metadata: metadata ? metadata[idx] : undefined,\n                split: props.splits ? props.splits[idx] : undefined,\n                id: exampleIds ? exampleIds[idx] : undefined,\n                source_run_id: sourceRunIds ? sourceRunIds[idx] : undefined,\n            };\n        });\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/examples/bulk`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(formattedExamples),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create examples\");\n        const result = await response.json();\n        return result;\n    }\n    async createLLMExample(input, generation, options) {\n        return this.createExample({ input }, { output: generation }, options);\n    }\n    async createChatExample(input, generations, options) {\n        const finalInput = input.map((message) => {\n            if (isLangChainMessage(message)) {\n                return convertLangChainMessageToExample(message);\n            }\n            return message;\n        });\n        const finalOutput = isLangChainMessage(generations)\n            ? convertLangChainMessageToExample(generations)\n            : generations;\n        return this.createExample({ input: finalInput }, { output: finalOutput }, options);\n    }\n    async readExample(exampleId) {\n        assertUuid(exampleId);\n        const path = `/examples/${exampleId}`;\n        const rawExample = await this._get(path);\n        const { attachment_urls, ...rest } = rawExample;\n        const example = rest;\n        if (attachment_urls) {\n            // add attachments back to the example\n            example.attachments = Object.entries(attachment_urls).reduce((acc, [key, value]) => {\n                acc[key.slice(\"attachment.\".length)] = {\n                    presigned_url: value.presigned_url,\n                    mime_type: value.mime_type,\n                };\n                return acc;\n            }, {});\n        }\n        return example;\n    }\n    async *listExamples({ datasetId, datasetName, exampleIds, asOf, splits, inlineS3Urls, metadata, limit, offset, filter, includeAttachments, } = {}) {\n        let datasetId_;\n        if (datasetId !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId !== undefined) {\n            datasetId_ = datasetId;\n        }\n        else if (datasetName !== undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        else {\n            throw new Error(\"Must provide a datasetName or datasetId\");\n        }\n        const params = new URLSearchParams({ dataset: datasetId_ });\n        const dataset_version = asOf\n            ? typeof asOf === \"string\"\n                ? asOf\n                : asOf?.toISOString()\n            : undefined;\n        if (dataset_version) {\n            params.append(\"as_of\", dataset_version);\n        }\n        const inlineS3Urls_ = inlineS3Urls ?? true;\n        params.append(\"inline_s3_urls\", inlineS3Urls_.toString());\n        if (exampleIds !== undefined) {\n            for (const id_ of exampleIds) {\n                params.append(\"id\", id_);\n            }\n        }\n        if (splits !== undefined) {\n            for (const split of splits) {\n                params.append(\"splits\", split);\n            }\n        }\n        if (metadata !== undefined) {\n            const serializedMetadata = JSON.stringify(metadata);\n            params.append(\"metadata\", serializedMetadata);\n        }\n        if (limit !== undefined) {\n            params.append(\"limit\", limit.toString());\n        }\n        if (offset !== undefined) {\n            params.append(\"offset\", offset.toString());\n        }\n        if (filter !== undefined) {\n            params.append(\"filter\", filter);\n        }\n        if (includeAttachments === true) {\n            [\"attachment_urls\", \"outputs\", \"metadata\"].forEach((field) => params.append(\"select\", field));\n        }\n        let i = 0;\n        for await (const rawExamples of this._getPaginated(\"/examples\", params)) {\n            for (const rawExample of rawExamples) {\n                const { attachment_urls, ...rest } = rawExample;\n                const example = rest;\n                if (attachment_urls) {\n                    example.attachments = Object.entries(attachment_urls).reduce((acc, [key, value]) => {\n                        acc[key.slice(\"attachment.\".length)] = {\n                            presigned_url: value.presigned_url,\n                            mime_type: value.mime_type || undefined,\n                        };\n                        return acc;\n                    }, {});\n                }\n                yield example;\n                i++;\n            }\n            if (limit !== undefined && i >= limit) {\n                break;\n            }\n        }\n    }\n    async deleteExample(exampleId) {\n        assertUuid(exampleId);\n        const path = `/examples/${exampleId}`;\n        const response = await this.caller.call(_getFetchImplementation(), this.apiUrl + path, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `delete ${path}`);\n        await response.json();\n    }\n    async updateExample(exampleId, update) {\n        assertUuid(exampleId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/examples/${exampleId}`, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(update),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update example\");\n        const result = await response.json();\n        return result;\n    }\n    async updateExamples(update) {\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/examples/bulk`, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(update),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update examples\");\n        const result = await response.json();\n        return result;\n    }\n    /**\n     * Get dataset version by closest date or exact tag.\n     *\n     * Use this to resolve the nearest version to a given timestamp or for a given tag.\n     *\n     * @param options The options for getting the dataset version\n     * @param options.datasetId The ID of the dataset\n     * @param options.datasetName The name of the dataset\n     * @param options.asOf The timestamp of the dataset to retrieve\n     * @param options.tag The tag of the dataset to retrieve\n     * @returns The dataset version\n     */\n    async readDatasetVersion({ datasetId, datasetName, asOf, tag, }) {\n        let resolvedDatasetId;\n        if (!datasetId) {\n            const dataset = await this.readDataset({ datasetName });\n            resolvedDatasetId = dataset.id;\n        }\n        else {\n            resolvedDatasetId = datasetId;\n        }\n        assertUuid(resolvedDatasetId);\n        if ((asOf && tag) || (!asOf && !tag)) {\n            throw new Error(\"Exactly one of asOf and tag must be specified.\");\n        }\n        const params = new URLSearchParams();\n        if (asOf !== undefined) {\n            params.append(\"as_of\", typeof asOf === \"string\" ? asOf : asOf.toISOString());\n        }\n        if (tag !== undefined) {\n            params.append(\"tag\", tag);\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${resolvedDatasetId}/version?${params.toString()}`, {\n            method: \"GET\",\n            headers: { ...this.headers },\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"read dataset version\");\n        return await response.json();\n    }\n    async listDatasetSplits({ datasetId, datasetName, asOf, }) {\n        let datasetId_;\n        if (datasetId === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide dataset name or ID\");\n        }\n        else if (datasetId !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId === undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        else {\n            datasetId_ = datasetId;\n        }\n        assertUuid(datasetId_);\n        const params = new URLSearchParams();\n        const dataset_version = asOf\n            ? typeof asOf === \"string\"\n                ? asOf\n                : asOf?.toISOString()\n            : undefined;\n        if (dataset_version) {\n            params.append(\"as_of\", dataset_version);\n        }\n        const response = await this._get(`/datasets/${datasetId_}/splits`, params);\n        return response;\n    }\n    async updateDatasetSplits({ datasetId, datasetName, splitName, exampleIds, remove = false, }) {\n        let datasetId_;\n        if (datasetId === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide dataset name or ID\");\n        }\n        else if (datasetId !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId === undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        else {\n            datasetId_ = datasetId;\n        }\n        assertUuid(datasetId_);\n        const data = {\n            split_name: splitName,\n            examples: exampleIds.map((id) => {\n                assertUuid(id);\n                return id;\n            }),\n            remove,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId_}/splits`, {\n            method: \"PUT\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update dataset splits\", true);\n    }\n    /**\n     * @deprecated This method is deprecated and will be removed in future LangSmith versions, use `evaluate` from `langsmith/evaluation` instead.\n     */\n    async evaluateRun(run, evaluator, { sourceInfo, loadChildRuns, referenceExample, } = { loadChildRuns: false }) {\n        warnOnce(\"This method is deprecated and will be removed in future LangSmith versions, use `evaluate` from `langsmith/evaluation` instead.\");\n        let run_;\n        if (typeof run === \"string\") {\n            run_ = await this.readRun(run, { loadChildRuns });\n        }\n        else if (typeof run === \"object\" && \"id\" in run) {\n            run_ = run;\n        }\n        else {\n            throw new Error(`Invalid run type: ${typeof run}`);\n        }\n        if (run_.reference_example_id !== null &&\n            run_.reference_example_id !== undefined) {\n            referenceExample = await this.readExample(run_.reference_example_id);\n        }\n        const feedbackResult = await evaluator.evaluateRun(run_, referenceExample);\n        const [_, feedbacks] = await this._logEvaluationFeedback(feedbackResult, run_, sourceInfo);\n        return feedbacks[0];\n    }\n    async createFeedback(runId, key, { score, value, correction, comment, sourceInfo, feedbackSourceType = \"api\", sourceRunId, feedbackId, feedbackConfig, projectId, comparativeExperimentId, }) {\n        if (!runId && !projectId) {\n            throw new Error(\"One of runId or projectId must be provided\");\n        }\n        if (runId && projectId) {\n            throw new Error(\"Only one of runId or projectId can be provided\");\n        }\n        const feedback_source = {\n            type: feedbackSourceType ?? \"api\",\n            metadata: sourceInfo ?? {},\n        };\n        if (sourceRunId !== undefined &&\n            feedback_source?.metadata !== undefined &&\n            !feedback_source.metadata[\"__run\"]) {\n            feedback_source.metadata[\"__run\"] = { run_id: sourceRunId };\n        }\n        if (feedback_source?.metadata !== undefined &&\n            feedback_source.metadata[\"__run\"]?.run_id !== undefined) {\n            assertUuid(feedback_source.metadata[\"__run\"].run_id);\n        }\n        const feedback = {\n            id: feedbackId ?? uuid.v4(),\n            run_id: runId,\n            key,\n            score,\n            value,\n            correction,\n            comment,\n            feedback_source: feedback_source,\n            comparative_experiment_id: comparativeExperimentId,\n            feedbackConfig,\n            session_id: projectId,\n        };\n        const url = `${this.apiUrl}/feedback`;\n        const response = await this.caller.call(_getFetchImplementation(), url, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(feedback),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create feedback\", true);\n        return feedback;\n    }\n    async updateFeedback(feedbackId, { score, value, correction, comment, }) {\n        const feedbackUpdate = {};\n        if (score !== undefined && score !== null) {\n            feedbackUpdate[\"score\"] = score;\n        }\n        if (value !== undefined && value !== null) {\n            feedbackUpdate[\"value\"] = value;\n        }\n        if (correction !== undefined && correction !== null) {\n            feedbackUpdate[\"correction\"] = correction;\n        }\n        if (comment !== undefined && comment !== null) {\n            feedbackUpdate[\"comment\"] = comment;\n        }\n        assertUuid(feedbackId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/feedback/${feedbackId}`, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(feedbackUpdate),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update feedback\", true);\n    }\n    async readFeedback(feedbackId) {\n        assertUuid(feedbackId);\n        const path = `/feedback/${feedbackId}`;\n        const response = await this._get(path);\n        return response;\n    }\n    async deleteFeedback(feedbackId) {\n        assertUuid(feedbackId);\n        const path = `/feedback/${feedbackId}`;\n        const response = await this.caller.call(_getFetchImplementation(), this.apiUrl + path, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `delete ${path}`);\n        await response.json();\n    }\n    async *listFeedback({ runIds, feedbackKeys, feedbackSourceTypes, } = {}) {\n        const queryParams = new URLSearchParams();\n        if (runIds) {\n            queryParams.append(\"run\", runIds.join(\",\"));\n        }\n        if (feedbackKeys) {\n            for (const key of feedbackKeys) {\n                queryParams.append(\"key\", key);\n            }\n        }\n        if (feedbackSourceTypes) {\n            for (const type of feedbackSourceTypes) {\n                queryParams.append(\"source\", type);\n            }\n        }\n        for await (const feedbacks of this._getPaginated(\"/feedback\", queryParams)) {\n            yield* feedbacks;\n        }\n    }\n    /**\n     * Creates a presigned feedback token and URL.\n     *\n     * The token can be used to authorize feedback metrics without\n     * needing an API key. This is useful for giving browser-based\n     * applications the ability to submit feedback without needing\n     * to expose an API key.\n     *\n     * @param runId - The ID of the run.\n     * @param feedbackKey - The feedback key.\n     * @param options - Additional options for the token.\n     * @param options.expiration - The expiration time for the token.\n     *\n     * @returns A promise that resolves to a FeedbackIngestToken.\n     */\n    async createPresignedFeedbackToken(runId, feedbackKey, { expiration, feedbackConfig, } = {}) {\n        const body = {\n            run_id: runId,\n            feedback_key: feedbackKey,\n            feedback_config: feedbackConfig,\n        };\n        if (expiration) {\n            if (typeof expiration === \"string\") {\n                body[\"expires_at\"] = expiration;\n            }\n            else if (expiration?.hours || expiration?.minutes || expiration?.days) {\n                body[\"expires_in\"] = expiration;\n            }\n        }\n        else {\n            body[\"expires_in\"] = {\n                hours: 3,\n            };\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/feedback/tokens`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const result = await response.json();\n        return result;\n    }\n    async createComparativeExperiment({ name, experimentIds, referenceDatasetId, createdAt, description, metadata, id, }) {\n        if (experimentIds.length === 0) {\n            throw new Error(\"At least one experiment is required\");\n        }\n        if (!referenceDatasetId) {\n            referenceDatasetId = (await this.readProject({\n                projectId: experimentIds[0],\n            })).reference_dataset_id;\n        }\n        if (!referenceDatasetId == null) {\n            throw new Error(\"A reference dataset is required\");\n        }\n        const body = {\n            id,\n            name,\n            experiment_ids: experimentIds,\n            reference_dataset_id: referenceDatasetId,\n            description,\n            created_at: (createdAt ?? new Date())?.toISOString(),\n            extra: {},\n        };\n        if (metadata)\n            body.extra[\"metadata\"] = metadata;\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/comparative`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        return await response.json();\n    }\n    /**\n     * Retrieves a list of presigned feedback tokens for a given run ID.\n     * @param runId The ID of the run.\n     * @returns An async iterable of FeedbackIngestToken objects.\n     */\n    async *listPresignedFeedbackTokens(runId) {\n        assertUuid(runId);\n        const params = new URLSearchParams({ run_id: runId });\n        for await (const tokens of this._getPaginated(\"/feedback/tokens\", params)) {\n            yield* tokens;\n        }\n    }\n    _selectEvalResults(results) {\n        let results_;\n        if (\"results\" in results) {\n            results_ = results.results;\n        }\n        else {\n            results_ = [results];\n        }\n        return results_;\n    }\n    async _logEvaluationFeedback(evaluatorResponse, run, sourceInfo) {\n        const evalResults = this._selectEvalResults(evaluatorResponse);\n        const feedbacks = [];\n        for (const res of evalResults) {\n            let sourceInfo_ = sourceInfo || {};\n            if (res.evaluatorInfo) {\n                sourceInfo_ = { ...res.evaluatorInfo, ...sourceInfo_ };\n            }\n            let runId_ = null;\n            if (res.targetRunId) {\n                runId_ = res.targetRunId;\n            }\n            else if (run) {\n                runId_ = run.id;\n            }\n            feedbacks.push(await this.createFeedback(runId_, res.key, {\n                score: res.score,\n                value: res.value,\n                comment: res.comment,\n                correction: res.correction,\n                sourceInfo: sourceInfo_,\n                sourceRunId: res.sourceRunId,\n                feedbackConfig: res.feedbackConfig,\n                feedbackSourceType: \"model\",\n            }));\n        }\n        return [evalResults, feedbacks];\n    }\n    async logEvaluationFeedback(evaluatorResponse, run, sourceInfo) {\n        const [results] = await this._logEvaluationFeedback(evaluatorResponse, run, sourceInfo);\n        return results;\n    }\n    /**\n     * API for managing annotation queues\n     */\n    /**\n     * List the annotation queues on the LangSmith API.\n     * @param options - The options for listing annotation queues\n     * @param options.queueIds - The IDs of the queues to filter by\n     * @param options.name - The name of the queue to filter by\n     * @param options.nameContains - The substring that the queue name should contain\n     * @param options.limit - The maximum number of queues to return\n     * @returns An iterator of AnnotationQueue objects\n     */\n    async *listAnnotationQueues(options = {}) {\n        const { queueIds, name, nameContains, limit } = options;\n        const params = new URLSearchParams();\n        if (queueIds) {\n            queueIds.forEach((id, i) => {\n                assertUuid(id, `queueIds[${i}]`);\n                params.append(\"ids\", id);\n            });\n        }\n        if (name)\n            params.append(\"name\", name);\n        if (nameContains)\n            params.append(\"name_contains\", nameContains);\n        params.append(\"limit\", (limit !== undefined ? Math.min(limit, 100) : 100).toString());\n        let count = 0;\n        for await (const queues of this._getPaginated(\"/annotation-queues\", params)) {\n            yield* queues;\n            count++;\n            if (limit !== undefined && count >= limit)\n                break;\n        }\n    }\n    /**\n     * Create an annotation queue on the LangSmith API.\n     * @param options - The options for creating an annotation queue\n     * @param options.name - The name of the annotation queue\n     * @param options.description - The description of the annotation queue\n     * @param options.queueId - The ID of the annotation queue\n     * @returns The created AnnotationQueue object\n     */\n    async createAnnotationQueue(options) {\n        const { name, description, queueId } = options;\n        const body = {\n            name,\n            description,\n            id: queueId || uuid.v4(),\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(Object.fromEntries(Object.entries(body).filter(([_, v]) => v !== undefined))),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create annotation queue\");\n        const data = await response.json();\n        return data;\n    }\n    /**\n     * Read an annotation queue with the specified queue ID.\n     * @param queueId - The ID of the annotation queue to read\n     * @returns The AnnotationQueue object\n     */\n    async readAnnotationQueue(queueId) {\n        // TODO: Replace when actual endpoint is added\n        const queueIteratorResult = await this.listAnnotationQueues({\n            queueIds: [queueId],\n        }).next();\n        if (queueIteratorResult.done) {\n            throw new Error(`Annotation queue with ID ${queueId} not found`);\n        }\n        return queueIteratorResult.value;\n    }\n    /**\n     * Update an annotation queue with the specified queue ID.\n     * @param queueId - The ID of the annotation queue to update\n     * @param options - The options for updating the annotation queue\n     * @param options.name - The new name for the annotation queue\n     * @param options.description - The new description for the annotation queue\n     */\n    async updateAnnotationQueue(queueId, options) {\n        const { name, description } = options;\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}`, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ name, description }),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update annotation queue\");\n    }\n    /**\n     * Delete an annotation queue with the specified queue ID.\n     * @param queueId - The ID of the annotation queue to delete\n     */\n    async deleteAnnotationQueue(queueId) {\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}`, {\n            method: \"DELETE\",\n            headers: { ...this.headers, Accept: \"application/json\" },\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"delete annotation queue\");\n    }\n    /**\n     * Add runs to an annotation queue with the specified queue ID.\n     * @param queueId - The ID of the annotation queue\n     * @param runIds - The IDs of the runs to be added to the annotation queue\n     */\n    async addRunsToAnnotationQueue(queueId, runIds) {\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}/runs`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(runIds.map((id, i) => assertUuid(id, `runIds[${i}]`).toString())),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"add runs to annotation queue\");\n    }\n    /**\n     * Get a run from an annotation queue at the specified index.\n     * @param queueId - The ID of the annotation queue\n     * @param index - The index of the run to retrieve\n     * @returns A Promise that resolves to a RunWithAnnotationQueueInfo object\n     * @throws {Error} If the run is not found at the given index or for other API-related errors\n     */\n    async getRunFromAnnotationQueue(queueId, index) {\n        const baseUrl = `/annotation-queues/${assertUuid(queueId, \"queueId\")}/run`;\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}${baseUrl}/${index}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"get run from annotation queue\");\n        return await response.json();\n    }\n    /**\n     * Delete a run from an an annotation queue.\n     * @param queueId - The ID of the annotation queue to delete the run from\n     * @param queueRunId - The ID of the run to delete from the annotation queue\n     */\n    async deleteRunFromAnnotationQueue(queueId, queueRunId) {\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}/runs/${assertUuid(queueRunId, \"queueRunId\")}`, {\n            method: \"DELETE\",\n            headers: { ...this.headers, Accept: \"application/json\" },\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"delete run from annotation queue\");\n    }\n    /**\n     * Get the size of an annotation queue.\n     * @param queueId - The ID of the annotation queue\n     */\n    async getSizeFromAnnotationQueue(queueId) {\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}/size`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"get size from annotation queue\");\n        return await response.json();\n    }\n    async _currentTenantIsOwner(owner) {\n        const settings = await this._getSettings();\n        return owner == \"-\" || settings.tenant_handle === owner;\n    }\n    async _ownerConflictError(action, owner) {\n        const settings = await this._getSettings();\n        return new Error(`Cannot ${action} for another tenant.\\n\n      Current tenant: ${settings.tenant_handle}\\n\n      Requested tenant: ${owner}`);\n    }\n    async _getLatestCommitHash(promptOwnerAndName) {\n        const res = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/commits/${promptOwnerAndName}/?limit=${1}&offset=${0}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const json = await res.json();\n        if (!res.ok) {\n            const detail = typeof json.detail === \"string\"\n                ? json.detail\n                : JSON.stringify(json.detail);\n            const error = new Error(`Error ${res.status}: ${res.statusText}\\n${detail}`);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            error.statusCode = res.status;\n            throw error;\n        }\n        if (json.commits.length === 0) {\n            return undefined;\n        }\n        return json.commits[0].commit_hash;\n    }\n    async _likeOrUnlikePrompt(promptIdentifier, like) {\n        const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/likes/${owner}/${promptName}`, {\n            method: \"POST\",\n            body: JSON.stringify({ like: like }),\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `${like ? \"like\" : \"unlike\"} prompt`);\n        return await response.json();\n    }\n    async _getPromptUrl(promptIdentifier) {\n        const [owner, promptName, commitHash] = parsePromptIdentifier(promptIdentifier);\n        if (!(await this._currentTenantIsOwner(owner))) {\n            if (commitHash !== \"latest\") {\n                return `${this.getHostUrl()}/hub/${owner}/${promptName}/${commitHash.substring(0, 8)}`;\n            }\n            else {\n                return `${this.getHostUrl()}/hub/${owner}/${promptName}`;\n            }\n        }\n        else {\n            const settings = await this._getSettings();\n            if (commitHash !== \"latest\") {\n                return `${this.getHostUrl()}/prompts/${promptName}/${commitHash.substring(0, 8)}?organizationId=${settings.id}`;\n            }\n            else {\n                return `${this.getHostUrl()}/prompts/${promptName}?organizationId=${settings.id}`;\n            }\n        }\n    }\n    async promptExists(promptIdentifier) {\n        const prompt = await this.getPrompt(promptIdentifier);\n        return !!prompt;\n    }\n    async likePrompt(promptIdentifier) {\n        return this._likeOrUnlikePrompt(promptIdentifier, true);\n    }\n    async unlikePrompt(promptIdentifier) {\n        return this._likeOrUnlikePrompt(promptIdentifier, false);\n    }\n    async *listCommits(promptOwnerAndName) {\n        for await (const commits of this._getPaginated(`/commits/${promptOwnerAndName}/`, new URLSearchParams(), (res) => res.commits)) {\n            yield* commits;\n        }\n    }\n    async *listPrompts(options) {\n        const params = new URLSearchParams();\n        params.append(\"sort_field\", options?.sortField ?? \"updated_at\");\n        params.append(\"sort_direction\", \"desc\");\n        params.append(\"is_archived\", (!!options?.isArchived).toString());\n        if (options?.isPublic !== undefined) {\n            params.append(\"is_public\", options.isPublic.toString());\n        }\n        if (options?.query) {\n            params.append(\"query\", options.query);\n        }\n        for await (const prompts of this._getPaginated(\"/repos\", params, (res) => res.repos)) {\n            yield* prompts;\n        }\n    }\n    async getPrompt(promptIdentifier) {\n        const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/repos/${owner}/${promptName}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        if (response.status === 404) {\n            return null;\n        }\n        await raiseForStatus(response, \"get prompt\");\n        const result = await response.json();\n        if (result.repo) {\n            return result.repo;\n        }\n        else {\n            return null;\n        }\n    }\n    async createPrompt(promptIdentifier, options) {\n        const settings = await this._getSettings();\n        if (options?.isPublic && !settings.tenant_handle) {\n            throw new Error(`Cannot create a public prompt without first\\n\n        creating a LangChain Hub handle. \n        You can add a handle by creating a public prompt at:\\n\n        https://smith.langchain.com/prompts`);\n        }\n        const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n        if (!(await this._currentTenantIsOwner(owner))) {\n            throw await this._ownerConflictError(\"create a prompt\", owner);\n        }\n        const data = {\n            repo_handle: promptName,\n            ...(options?.description && { description: options.description }),\n            ...(options?.readme && { readme: options.readme }),\n            ...(options?.tags && { tags: options.tags }),\n            is_public: !!options?.isPublic,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/repos/`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create prompt\");\n        const { repo } = await response.json();\n        return repo;\n    }\n    async createCommit(promptIdentifier, object, options) {\n        if (!(await this.promptExists(promptIdentifier))) {\n            throw new Error(\"Prompt does not exist, you must create it first.\");\n        }\n        const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n        const resolvedParentCommitHash = options?.parentCommitHash === \"latest\" || !options?.parentCommitHash\n            ? await this._getLatestCommitHash(`${owner}/${promptName}`)\n            : options?.parentCommitHash;\n        const payload = {\n            manifest: JSON.parse(JSON.stringify(object)),\n            parent_commit: resolvedParentCommitHash,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/commits/${owner}/${promptName}`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(payload),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create commit\");\n        const result = await response.json();\n        return this._getPromptUrl(`${owner}/${promptName}${result.commit_hash ? `:${result.commit_hash}` : \"\"}`);\n    }\n    /**\n     * Update examples with attachments using multipart form data.\n     * @param updates List of ExampleUpdateWithAttachments objects to upsert\n     * @returns Promise with the update response\n     */\n    async updateExamplesMultipart(datasetId, updates = []) {\n        if (!(await this._getMultiPartSupport())) {\n            throw new Error(\"Your LangSmith version does not allow using the multipart examples endpoint, please update to the latest version.\");\n        }\n        const formData = new FormData();\n        for (const example of updates) {\n            const exampleId = example.id;\n            // Prepare the main example body\n            const exampleBody = {\n                ...(example.metadata && { metadata: example.metadata }),\n                ...(example.split && { split: example.split }),\n            };\n            // Add main example data\n            const stringifiedExample = serializePayloadForTracing(exampleBody);\n            const exampleBlob = new Blob([stringifiedExample], {\n                type: \"application/json\",\n            });\n            formData.append(exampleId, exampleBlob);\n            // Add inputs\n            if (example.inputs) {\n                const stringifiedInputs = serializePayloadForTracing(example.inputs);\n                const inputsBlob = new Blob([stringifiedInputs], {\n                    type: \"application/json\",\n                });\n                formData.append(`${exampleId}.inputs`, inputsBlob);\n            }\n            // Add outputs if present\n            if (example.outputs) {\n                const stringifiedOutputs = serializePayloadForTracing(example.outputs);\n                const outputsBlob = new Blob([stringifiedOutputs], {\n                    type: \"application/json\",\n                });\n                formData.append(`${exampleId}.outputs`, outputsBlob);\n            }\n            // Add attachments if present\n            if (example.attachments) {\n                for (const [name, attachment] of Object.entries(example.attachments)) {\n                    let mimeType;\n                    let data;\n                    if (Array.isArray(attachment)) {\n                        [mimeType, data] = attachment;\n                    }\n                    else {\n                        mimeType = attachment.mimeType;\n                        data = attachment.data;\n                    }\n                    const attachmentBlob = new Blob([data], {\n                        type: `${mimeType}; length=${data.byteLength}`,\n                    });\n                    formData.append(`${exampleId}.attachment.${name}`, attachmentBlob);\n                }\n            }\n            if (example.attachments_operations) {\n                const stringifiedAttachmentsOperations = serializePayloadForTracing(example.attachments_operations);\n                const attachmentsOperationsBlob = new Blob([stringifiedAttachmentsOperations], {\n                    type: \"application/json\",\n                });\n                formData.append(`${exampleId}.attachments_operations`, attachmentsOperationsBlob);\n            }\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/v1/platform/datasets/${datasetId}/examples`, {\n            method: \"PATCH\",\n            headers: this.headers,\n            body: formData,\n        });\n        const result = await response.json();\n        return result;\n    }\n    /**\n     * Upload examples with attachments using multipart form data.\n     * @param uploads List of ExampleUploadWithAttachments objects to upload\n     * @returns Promise with the upload response\n     */\n    async uploadExamplesMultipart(datasetId, uploads = []) {\n        if (!(await this._getMultiPartSupport())) {\n            throw new Error(\"Your LangSmith version does not allow using the multipart examples endpoint, please update to the latest version.\");\n        }\n        const formData = new FormData();\n        for (const example of uploads) {\n            const exampleId = (example.id ?? uuid.v4()).toString();\n            // Prepare the main example body\n            const exampleBody = {\n                created_at: example.created_at,\n                ...(example.metadata && { metadata: example.metadata }),\n                ...(example.split && { split: example.split }),\n            };\n            // Add main example data\n            const stringifiedExample = serializePayloadForTracing(exampleBody);\n            const exampleBlob = new Blob([stringifiedExample], {\n                type: \"application/json\",\n            });\n            formData.append(exampleId, exampleBlob);\n            // Add inputs\n            const stringifiedInputs = serializePayloadForTracing(example.inputs);\n            const inputsBlob = new Blob([stringifiedInputs], {\n                type: \"application/json\",\n            });\n            formData.append(`${exampleId}.inputs`, inputsBlob);\n            // Add outputs if present\n            if (example.outputs) {\n                const stringifiedOutputs = serializePayloadForTracing(example.outputs);\n                const outputsBlob = new Blob([stringifiedOutputs], {\n                    type: \"application/json\",\n                });\n                formData.append(`${exampleId}.outputs`, outputsBlob);\n            }\n            // Add attachments if present\n            if (example.attachments) {\n                for (const [name, attachment] of Object.entries(example.attachments)) {\n                    let mimeType;\n                    let data;\n                    if (Array.isArray(attachment)) {\n                        [mimeType, data] = attachment;\n                    }\n                    else {\n                        mimeType = attachment.mimeType;\n                        data = attachment.data;\n                    }\n                    const attachmentBlob = new Blob([data], {\n                        type: `${mimeType}; length=${data.byteLength}`,\n                    });\n                    formData.append(`${exampleId}.attachment.${name}`, attachmentBlob);\n                }\n            }\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/v1/platform/datasets/${datasetId}/examples`, {\n            method: \"POST\",\n            headers: this.headers,\n            body: formData,\n        });\n        const result = await response.json();\n        return result;\n    }\n    async updatePrompt(promptIdentifier, options) {\n        if (!(await this.promptExists(promptIdentifier))) {\n            throw new Error(\"Prompt does not exist, you must create it first.\");\n        }\n        const [owner, promptName] = parsePromptIdentifier(promptIdentifier);\n        if (!(await this._currentTenantIsOwner(owner))) {\n            throw await this._ownerConflictError(\"update a prompt\", owner);\n        }\n        const payload = {};\n        if (options?.description !== undefined)\n            payload.description = options.description;\n        if (options?.readme !== undefined)\n            payload.readme = options.readme;\n        if (options?.tags !== undefined)\n            payload.tags = options.tags;\n        if (options?.isPublic !== undefined)\n            payload.is_public = options.isPublic;\n        if (options?.isArchived !== undefined)\n            payload.is_archived = options.isArchived;\n        // Check if payload is empty\n        if (Object.keys(payload).length === 0) {\n            throw new Error(\"No valid update options provided\");\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/repos/${owner}/${promptName}`, {\n            method: \"PATCH\",\n            body: JSON.stringify(payload),\n            headers: {\n                ...this.headers,\n                \"Content-Type\": \"application/json\",\n            },\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update prompt\");\n        return response.json();\n    }\n    async deletePrompt(promptIdentifier) {\n        if (!(await this.promptExists(promptIdentifier))) {\n            throw new Error(\"Prompt does not exist, you must create it first.\");\n        }\n        const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n        if (!(await this._currentTenantIsOwner(owner))) {\n            throw await this._ownerConflictError(\"delete a prompt\", owner);\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/repos/${owner}/${promptName}`, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        return await response.json();\n    }\n    async pullPromptCommit(promptIdentifier, options) {\n        const [owner, promptName, commitHash] = parsePromptIdentifier(promptIdentifier);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/commits/${owner}/${promptName}/${commitHash}${options?.includeModel ? \"?include_model=true\" : \"\"}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"pull prompt commit\");\n        const result = await response.json();\n        return {\n            owner,\n            repo: promptName,\n            commit_hash: result.commit_hash,\n            manifest: result.manifest,\n            examples: result.examples,\n        };\n    }\n    /**\n     * This method should not be used directly, use `import { pull } from \"langchain/hub\"` instead.\n     * Using this method directly returns the JSON string of the prompt rather than a LangChain object.\n     * @private\n     */\n    async _pullPrompt(promptIdentifier, options) {\n        const promptObject = await this.pullPromptCommit(promptIdentifier, {\n            includeModel: options?.includeModel,\n        });\n        const prompt = JSON.stringify(promptObject.manifest);\n        return prompt;\n    }\n    async pushPrompt(promptIdentifier, options) {\n        // Create or update prompt metadata\n        if (await this.promptExists(promptIdentifier)) {\n            if (options && Object.keys(options).some((key) => key !== \"object\")) {\n                await this.updatePrompt(promptIdentifier, {\n                    description: options?.description,\n                    readme: options?.readme,\n                    tags: options?.tags,\n                    isPublic: options?.isPublic,\n                });\n            }\n        }\n        else {\n            await this.createPrompt(promptIdentifier, {\n                description: options?.description,\n                readme: options?.readme,\n                tags: options?.tags,\n                isPublic: options?.isPublic,\n            });\n        }\n        if (!options?.object) {\n            return await this._getPromptUrl(promptIdentifier);\n        }\n        // Create a commit with the new manifest\n        const url = await this.createCommit(promptIdentifier, options?.object, {\n            parentCommitHash: options?.parentCommitHash,\n        });\n        return url;\n    }\n    /**\n     * Clone a public dataset to your own langsmith tenant.\n     * This operation is idempotent. If you already have a dataset with the given name,\n     * this function will do nothing.\n  \n     * @param {string} tokenOrUrl The token of the public dataset to clone.\n     * @param {Object} [options] Additional options for cloning the dataset.\n     * @param {string} [options.sourceApiUrl] The URL of the langsmith server where the data is hosted. Defaults to the API URL of your current client.\n     * @param {string} [options.datasetName] The name of the dataset to create in your tenant. Defaults to the name of the public dataset.\n     * @returns {Promise<void>}\n     */\n    async clonePublicDataset(tokenOrUrl, options = {}) {\n        const { sourceApiUrl = this.apiUrl, datasetName } = options;\n        const [parsedApiUrl, tokenUuid] = this.parseTokenOrUrl(tokenOrUrl, sourceApiUrl);\n        const sourceClient = new Client({\n            apiUrl: parsedApiUrl,\n            // Placeholder API key not needed anymore in most cases, but\n            // some private deployments may have API key-based rate limiting\n            // that would cause this to fail if we provide no value.\n            apiKey: \"placeholder\",\n        });\n        const ds = await sourceClient.readSharedDataset(tokenUuid);\n        const finalDatasetName = datasetName || ds.name;\n        try {\n            if (await this.hasDataset({ datasetId: finalDatasetName })) {\n                console.log(`Dataset ${finalDatasetName} already exists in your tenant. Skipping.`);\n                return;\n            }\n        }\n        catch (_) {\n            // `.hasDataset` will throw an error if the dataset does not exist.\n            // no-op in that case\n        }\n        // Fetch examples first, then create the dataset\n        const examples = await sourceClient.listSharedExamples(tokenUuid);\n        const dataset = await this.createDataset(finalDatasetName, {\n            description: ds.description,\n            dataType: ds.data_type || \"kv\",\n            inputsSchema: ds.inputs_schema_definition ?? undefined,\n            outputsSchema: ds.outputs_schema_definition ?? undefined,\n        });\n        try {\n            await this.createExamples({\n                inputs: examples.map((e) => e.inputs),\n                outputs: examples.flatMap((e) => (e.outputs ? [e.outputs] : [])),\n                datasetId: dataset.id,\n            });\n        }\n        catch (e) {\n            console.error(`An error occurred while creating dataset ${finalDatasetName}. ` +\n                \"You should delete it manually.\");\n            throw e;\n        }\n    }\n    parseTokenOrUrl(urlOrToken, apiUrl, numParts = 2, kind = \"dataset\") {\n        // Try parsing as UUID\n        try {\n            assertUuid(urlOrToken); // Will throw if it's not a UUID.\n            return [apiUrl, urlOrToken];\n        }\n        catch (_) {\n            // no-op if it's not a uuid\n        }\n        // Parse as URL\n        try {\n            const parsedUrl = new URL(urlOrToken);\n            const pathParts = parsedUrl.pathname\n                .split(\"/\")\n                .filter((part) => part !== \"\");\n            if (pathParts.length >= numParts) {\n                const tokenUuid = pathParts[pathParts.length - numParts];\n                return [apiUrl, tokenUuid];\n            }\n            else {\n                throw new Error(`Invalid public ${kind} URL: ${urlOrToken}`);\n            }\n        }\n        catch (error) {\n            throw new Error(`Invalid public ${kind} URL or token: ${urlOrToken}`);\n        }\n    }\n    /**\n     * Awaits all pending trace batches. Useful for environments where\n     * you need to be sure that all tracing requests finish before execution ends,\n     * such as serverless environments.\n     *\n     * @example\n     * ```\n     * import { Client } from \"langsmith\";\n     *\n     * const client = new Client();\n     *\n     * try {\n     *   // Tracing happens here\n     *   ...\n     * } finally {\n     *   await client.awaitPendingTraceBatches();\n     * }\n     * ```\n     *\n     * @returns A promise that resolves once all currently pending traces have sent.\n     */\n    awaitPendingTraceBatches() {\n        if (this.manualFlushMode) {\n            console.warn(\"[WARNING]: When tracing in manual flush mode, you must call `await client.flush()` manually to submit trace batches.\");\n            return Promise.resolve();\n        }\n        return Promise.all([\n            ...this.autoBatchQueue.items.map(({ itemPromise }) => itemPromise),\n            this.batchIngestCaller.queue.onIdle(),\n        ]);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}