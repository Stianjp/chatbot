{"ast":null,"code":"var _jsxFileName = \"/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeni\\xF8r - bachelor/3.a\\u030Aret/Bachelor/Bacheloroppgave/chatbot/src/components/Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { askChatbot } from \"../utils/langchainChatbot\";\nimport { initialMessage, questions, categoryResponses, chatgptPrompts } from \"../data/chatbotPrompts\";\nimport { clearBackendData, saveUserData, analyzeUserData } from \"../api/chatbotApi\";\nimport \"../styles/Chatbot.css\";\nimport logo from \"../media/logo.png\";\nimport miniLogo from \"../media/MH_logo.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    text: initialMessage,\n    sender: \"bot\"\n  }]);\n  const [consent, setConsent] = useState(null);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [userData, setUserData] = useState({});\n  const [currentStep, setCurrentStep] = useState(0);\n  const [category, setCategory] = useState(null);\n  const [chatgptActive, setChatgptActive] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [botResponseCount, setBotResponseCount] = useState(0);\n  const [summaryGenerated, setSummaryGenerated] = useState(false);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    clearBackendData();\n  }, []);\n  const handleConsent = userConsent => {\n    setConsent(userConsent);\n    setMessages(prev => [...prev, {\n      text: userConsent ? \"Ja, jeg godtar.\" : \"Nei, jeg ønsker ikke lagring.\",\n      sender: \"user\"\n    }, {\n      text: \"Takk for tilbakemeldingen!\",\n      sender: \"bot\"\n    }, {\n      text: questions[0].text,\n      sender: \"bot\"\n    }]);\n  };\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n    const userMessage = {\n      text: input,\n      sender: \"user\"\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput(\"\");\n    setIsTyping(true);\n    setTimeout(async () => {\n      let botResponse = \"\";\n      if (chatgptActive) {\n        const chatGptPrompt = chatgptPrompts[category] || \"Hjelp brukeren med karriereveiledning basert på tidligere svar.\";\n        botResponse = await askChatbot(input, chatGptPrompt);\n      } else if (currentStep < questions.length) {\n        const updatedUserData = {\n          ...userData,\n          [questions[currentStep].key]: input\n        };\n        setUserData(updatedUserData);\n        if (currentStep + 1 < questions.length) {\n          botResponse = questions[currentStep + 1].text;\n        } else {\n          await saveUserData(consent, updatedUserData);\n          analyzeCategory(updatedUserData);\n        }\n        setCurrentStep(currentStep + 1);\n      }\n      if (botResponse) {\n        setMessages(prev => [...prev, {\n          text: botResponse,\n          sender: \"bot\"\n        }]);\n      }\n      setIsTyping(false);\n      setLoading(false);\n      setBotResponseCount(prevCount => {\n        const newCount = prevCount + 1;\n        if (newCount === 10 && !summaryGenerated) {\n          generateSummary();\n        }\n        return newCount;\n      });\n    }, 1500);\n  };\n  const generateSummary = async () => {\n    if (summaryGenerated) return;\n    setSummaryGenerated(true);\n    setIsTyping(true);\n    const chatHistory = messages.map(msg => `${msg.sender}: ${msg.text}`).join(\"\\n\");\n    const summaryPrompt = `Oppsummer denne samtalen og gi veiledning basert på det som har blitt sagt:\\n${chatHistory}`;\n    const summary = await askChatbot(summaryPrompt);\n    setMessages(prev => [...prev, {\n      text: summary,\n      sender: \"bot\"\n    }]);\n    setIsTyping(false);\n  };\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const analyzeCategory = async userData => {\n    const result = await analyzeUserData(userData);\n    setCategory(result.category);\n    const nextMessage = categoryResponses[result.category] || \"Det oppstod en feil ved analyse av dataene dine.\";\n    setMessages(prev => [...prev, {\n      text: nextMessage,\n      sender: \"bot\"\n    }]);\n    setChatgptActive(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"MeyerHaugen\",\n        className: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chat-date\",\n        children: new Date().toLocaleDateString(\"no-NO\", {\n          weekday: \"long\",\n          day: \"numeric\",\n          month: \"long\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.sender}`,\n        children: [msg.sender === \"bot\" ? index === messages.length - 1 ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: miniLogo,\n          alt: \"Bot\",\n          className: \"bot-avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot-avatar-placeholder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-bubble ${msg.sender}`,\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-bubble\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), consent === null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"consent-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"accept\",\n        onClick: () => handleConsent(true),\n        children: \"Godta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"decline\",\n        onClick: () => handleConsent(false),\n        children: \"Avsl\\xE5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this), consent !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Skriv melding her\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: e => e.key === \"Enter\" && sendMessage(),\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: loading,\n        children: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"lF87dxEMwTHtWCfoZBOALs3XBNI=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","askChatbot","initialMessage","questions","categoryResponses","chatgptPrompts","clearBackendData","saveUserData","analyzeUserData","logo","miniLogo","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","text","sender","consent","setConsent","input","setInput","loading","setLoading","userData","setUserData","currentStep","setCurrentStep","category","setCategory","chatgptActive","setChatgptActive","isTyping","setIsTyping","botResponseCount","setBotResponseCount","summaryGenerated","setSummaryGenerated","messagesEndRef","handleConsent","userConsent","prev","sendMessage","trim","userMessage","setTimeout","botResponse","chatGptPrompt","length","updatedUserData","key","analyzeCategory","prevCount","newCount","generateSummary","chatHistory","map","msg","join","summaryPrompt","summary","scrollToBottom","current","scrollIntoView","behavior","result","nextMessage","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","Date","toLocaleDateString","weekday","day","month","index","ref","onClick","type","placeholder","value","onChange","e","target","onKeyDown","disabled","_c","$RefreshReg$"],"sources":["/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeniør - bachelor/3.året/Bachelor/Bacheloroppgave/chatbot/src/components/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { askChatbot } from \"../utils/langchainChatbot\";\nimport { initialMessage, questions, categoryResponses, chatgptPrompts } from \"../data/chatbotPrompts\";\nimport { clearBackendData, saveUserData, analyzeUserData } from \"../api/chatbotApi\";\nimport \"../styles/Chatbot.css\";\nimport logo from \"../media/logo.png\";\nimport miniLogo from \"../media/MH_logo.png\";\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([{ text: initialMessage, sender: \"bot\" }]);\n  const [consent, setConsent] = useState(null);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [userData, setUserData] = useState({});\n  const [currentStep, setCurrentStep] = useState(0);\n  const [category, setCategory] = useState(null);\n  const [chatgptActive, setChatgptActive] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [botResponseCount, setBotResponseCount] = useState(0);\n  const [summaryGenerated, setSummaryGenerated] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    clearBackendData();\n  }, []);\n\n  const handleConsent = (userConsent) => {\n    setConsent(userConsent);\n    setMessages((prev) => [\n      ...prev,\n      { text: userConsent ? \"Ja, jeg godtar.\" : \"Nei, jeg ønsker ikke lagring.\", sender: \"user\" },\n      { text: \"Takk for tilbakemeldingen!\", sender: \"bot\" },\n      { text: questions[0].text, sender: \"bot\" }\n    ]);\n  };\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n\n    const userMessage = { text: input, sender: \"user\" };\n    setMessages((prev) => [...prev, userMessage]);\n    setInput(\"\");\n\n    setIsTyping(true);\n\n    setTimeout(async () => {\n      let botResponse = \"\";\n\n      if (chatgptActive) {\n        const chatGptPrompt = chatgptPrompts[category] || \"Hjelp brukeren med karriereveiledning basert på tidligere svar.\";\n        botResponse = await askChatbot(input, chatGptPrompt);\n      } else if (currentStep < questions.length) {\n        const updatedUserData = { ...userData, [questions[currentStep].key]: input };\n        setUserData(updatedUserData);\n\n        if (currentStep + 1 < questions.length) {\n          botResponse = questions[currentStep + 1].text;\n        } else {\n          await saveUserData(consent, updatedUserData);\n          analyzeCategory(updatedUserData);\n        }\n\n        setCurrentStep(currentStep + 1);\n      }\n\n      if (botResponse) {\n        setMessages((prev) => [...prev, { text: botResponse, sender: \"bot\" }]);\n      }\n      \n      setIsTyping(false);\n      setLoading(false);\n\n      setBotResponseCount((prevCount) => {\n        const newCount = prevCount + 1;\n        if (newCount === 10 && !summaryGenerated) {\n          generateSummary();\n        }\n        return newCount;\n      });\n    }, 1500);\n  };\n\n  const generateSummary = async () => {\n    if (summaryGenerated) return;\n    setSummaryGenerated(true);\n    setIsTyping(true);\n    const chatHistory = messages.map(msg => `${msg.sender}: ${msg.text}`).join(\"\\n\");\n    const summaryPrompt = `Oppsummer denne samtalen og gi veiledning basert på det som har blitt sagt:\\n${chatHistory}`;\n    const summary = await askChatbot(summaryPrompt);\n    setMessages((prev) => [...prev, { text: summary, sender: \"bot\" }]);\n    setIsTyping(false);\n  };\n\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const analyzeCategory = async (userData) => {\n    const result = await analyzeUserData(userData);\n    setCategory(result.category);\n\n    const nextMessage = categoryResponses[result.category] || \"Det oppstod en feil ved analyse av dataene dine.\";\n    setMessages((prev) => [...prev, { text: nextMessage, sender: \"bot\" }]);\n\n    setChatgptActive(true);\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <header className=\"chat-header\">\n        <img src={logo} alt=\"MeyerHaugen\" className=\"logo\" />\n        <p className=\"chat-date\">\n          {new Date().toLocaleDateString(\"no-NO\", { weekday: \"long\", day: \"numeric\", month: \"long\" })}\n        </p>\n      </header>\n\n      <div className=\"chatbot-messages\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`chat-message ${msg.sender}`}>\n            {msg.sender === \"bot\" ? (\n              index === messages.length - 1 ? (\n                <img src={miniLogo} alt=\"Bot\" className=\"bot-avatar\" />\n              ) : (\n                <div className=\"bot-avatar-placeholder\"></div>\n              )\n            ) : null}\n            <div className={`chat-bubble ${msg.sender}`}>{msg.text}</div>\n          </div>        \n        ))}\n\n        {isTyping && (\n          <div className=\"typing-bubble\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n\n      {consent === null && (\n        <div className=\"consent-buttons\">\n          <button className=\"accept\" onClick={() => handleConsent(true)}>Godta</button>\n          <button className=\"decline\" onClick={() => handleConsent(false)}>Avslå</button>\n        </div>\n      )}\n\n      {consent !== null && (\n        <div className=\"chat-input\">\n          <input\n            type=\"text\"\n            placeholder=\"Skriv melding her\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\n            disabled={loading}\n          />\n          <button onClick={sendMessage} disabled={loading}>➤</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}