{"ast":null,"code":"var _jsxFileName = \"/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeni\\xF8r - bachelor/3.a\\u030Aret/Bachelor/Bacheloroppgave/chatbot/src/components/Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { initialMessage, phaseOnePrompt, phaseTwoPrompt } from \"../data/chatbotPrompts\"; // Tilpass stien\nimport { saveData, clearBackendData // valgfritt om du vil lagre data\n} from \"../api/chatbotApi\"; // Tilpass hvis du ønsker\nimport { askChatbot } from \"../utils/langchainChatbot\"; // Tilpass stien\nimport \"../styles/Chatbot.css\";\nimport logo from \"../media/logo.png\";\nimport miniLogo from \"../media/MH_logo.png\";\n\n/*\n  Chatbot.jsx:\n  - Fase = 1 => GPT bruker phaseOnePrompt (5-8 spørsmål).\n  - Fase = 2 => GPT bruker phaseTwoPrompt (7 spørsmål + oppsummering).\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  // Meldingshistorikk\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: initialMessage\n  }]);\n\n  // Samtykke (hvis du fremdeles vil bruke det)\n  const [consent, setConsent] = useState(null);\n\n  // Brukerens input + states\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Fase-styring: 1 = kort kartlegging, 2 = dyp motivasjon\n  const [phase, setPhase] = useState(1);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // Tøm backend-data ved start\n  useEffect(() => {\n    clearBackendData();\n  }, []);\n\n  // Autoscroll / autofokus\n  useEffect(() => {\n    scrollToBottom();\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [messages]);\n\n  // Samtykke-håndtering\n  const handleConsent = userConsent => {\n    setConsent(userConsent);\n    const userMsg = userConsent ? \"Ja, jeg godtar.\" : \"Nei, jeg ønsker ikke lagring.\";\n    const newMessages = [...messages, {\n      sender: \"user\",\n      text: userMsg\n    }, {\n      sender: \"bot\",\n      text: \"Takk for tilbakemeldingen! Da setter vi i gang. Hva heter du?\"\n    }];\n    setMessages(newMessages);\n\n    // Kall saveData-funksjonen hvis brukeren gir samtykke\n    if (userConsent) {\n      saveData(userConsent, newMessages);\n    }\n  };\n\n  // Send melding\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n\n    // Legg til brukermelding\n    const userMessage = {\n      sender: \"user\",\n      text: input.trim()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput(\"\");\n    inputRef.current.style.height = \"30px\";\n    setIsTyping(true);\n\n    // Vent litt og kall GPT\n    setTimeout(async () => {\n      let botReply = \"\";\n\n      // 1) Bygg hele konversasjonen i GPT-format\n      //const conversationMessages = buildConversationForGPT([...messages, userMessage]);\n\n      // 2) Velg prompt basert på fase\n      let systemPrompt = phaseOnePrompt;\n      if (phase === 2) {\n        systemPrompt = phaseTwoPrompt;\n      }\n\n      // 3) Kall GPT\n      botReply = await askChatbot(conversationMessages, systemPrompt);\n\n      // 4) TELL antall assistent-svar i denne fasen\n      //const newAssistantCount = countAssistantMessages([...messages, { sender: \"bot\", text: botReply }], phase);\n\n      // 5) Bytt til fase 2 hvis vi er i fase 1 og GPT har passert ~5–8 meldinger\n      if (phase === 1 >= 8) {\n        // Legg til avslutning på kartleggingen før vi går videre til fase 2\n        //botReply = \"Takk for at du delte det. Jeg tror vi har kartlagt endel. Nå går vi over til dyp motivasjon.\";\n\n        // Sett fase til 2\n        setPhase(2);\n      }\n\n      // 6) Oppdater meldinger med GPT-svar\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: botReply\n      }]);\n      setIsTyping(false);\n      setLoading(false);\n    }, 500);\n  };\n\n  // Autoscroll\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"MeyerHaugen\",\n        className: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chat-date\",\n        children: new Date().toLocaleDateString(\"no-NO\", {\n          weekday: \"long\",\n          day: \"numeric\",\n          month: \"long\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: [messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.sender}`,\n        children: [msg.sender === \"bot\" ? i === messages.length - 1 ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: miniLogo,\n          alt: \"Bot\",\n          className: \"bot-avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot-avatar-placeholder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 17\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-bubble ${msg.sender}`,\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-bubble\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), consent === null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"consent-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"accept\",\n        onClick: () => handleConsent(true),\n        children: \"Godta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"decline\",\n        onClick: () => handleConsent(false),\n        children: \"Avsl\\xE5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this), consent !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: inputRef,\n        placeholder: \"Skriv melding her\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: e => {\n          if (e.key === 'Enter') sendMessage();\n        },\n        disabled: loading,\n        rows: 1,\n        style: {\n          resize: \"none\",\n          minHeight: \"30px\",\n          maxHeight: \"200px\",\n          overflowY: \"auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: loading,\n        children: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"nsgl8Zuhb1ArpRIWsByljRNk0EA=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","initialMessage","phaseOnePrompt","phaseTwoPrompt","saveData","clearBackendData","askChatbot","logo","miniLogo","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","consent","setConsent","input","setInput","loading","setLoading","isTyping","setIsTyping","phase","setPhase","messagesEndRef","inputRef","scrollToBottom","current","focus","handleConsent","userConsent","userMsg","newMessages","sendMessage","trim","userMessage","prev","style","height","setTimeout","botReply","systemPrompt","conversationMessages","scrollIntoView","behavior","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","Date","toLocaleDateString","weekday","day","month","map","msg","i","length","ref","onClick","placeholder","value","onChange","e","target","onKeyDown","key","disabled","rows","resize","minHeight","maxHeight","overflowY","_c","$RefreshReg$"],"sources":["/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeniør - bachelor/3.året/Bachelor/Bacheloroppgave/chatbot/src/components/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  initialMessage,\n  phaseOnePrompt,\n  phaseTwoPrompt,\n} from \"../data/chatbotPrompts\"; // Tilpass stien\nimport {\n  saveData,\n  clearBackendData // valgfritt om du vil lagre data\n} from \"../api/chatbotApi\"; // Tilpass hvis du ønsker\nimport { askChatbot } from \"../utils/langchainChatbot\"; // Tilpass stien\nimport \"../styles/Chatbot.css\";\nimport logo from \"../media/logo.png\";\nimport miniLogo from \"../media/MH_logo.png\";\n\n/*\n  Chatbot.jsx:\n  - Fase = 1 => GPT bruker phaseOnePrompt (5-8 spørsmål).\n  - Fase = 2 => GPT bruker phaseTwoPrompt (7 spørsmål + oppsummering).\n*/\n\nconst Chatbot = () => {\n  // Meldingshistorikk\n  const [messages, setMessages] = useState([\n    { sender: \"bot\", text: initialMessage },\n  ]);\n\n  // Samtykke (hvis du fremdeles vil bruke det)\n  const [consent, setConsent] = useState(null);\n\n  // Brukerens input + states\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Fase-styring: 1 = kort kartlegging, 2 = dyp motivasjon\n  const [phase, setPhase] = useState(1);\n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // Tøm backend-data ved start\n  useEffect(() => {\n    clearBackendData();\n  }, []);\n\n  // Autoscroll / autofokus\n  useEffect(() => {\n    scrollToBottom();\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [messages]);\n\n  // Samtykke-håndtering\n  const handleConsent = (userConsent) => {\n    setConsent(userConsent);\n    const userMsg = userConsent ? \"Ja, jeg godtar.\" : \"Nei, jeg ønsker ikke lagring.\";\n    const newMessages = [\n      ...messages,\n      { sender: \"user\", text: userMsg },\n      { sender: \"bot\", text: \"Takk for tilbakemeldingen! Da setter vi i gang. Hva heter du?\" },\n    ];\n    setMessages(newMessages);\n\n    // Kall saveData-funksjonen hvis brukeren gir samtykke\n    if (userConsent) {\n      saveData(userConsent, newMessages);\n    }\n  };\n\n  // Send melding\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n\n    // Legg til brukermelding\n    const userMessage = { sender: \"user\", text: input.trim() };\n    setMessages((prev) => [...prev, userMessage]);\n    setInput(\"\");\n    inputRef.current.style.height = \"30px\";\n\n    setIsTyping(true);\n\n    // Vent litt og kall GPT\n    setTimeout(async () => {\n      let botReply = \"\";\n\n      // 1) Bygg hele konversasjonen i GPT-format\n      //const conversationMessages = buildConversationForGPT([...messages, userMessage]);\n\n      // 2) Velg prompt basert på fase\n      let systemPrompt = phaseOnePrompt;\n      if (phase === 2) {\n        systemPrompt = phaseTwoPrompt;\n      }\n\n      // 3) Kall GPT\n      botReply = await askChatbot(conversationMessages, systemPrompt);\n\n      // 4) TELL antall assistent-svar i denne fasen\n      //const newAssistantCount = countAssistantMessages([...messages, { sender: \"bot\", text: botReply }], phase);\n\n      // 5) Bytt til fase 2 hvis vi er i fase 1 og GPT har passert ~5–8 meldinger\n      if (phase === 1 >= 8) {\n        // Legg til avslutning på kartleggingen før vi går videre til fase 2\n        //botReply = \"Takk for at du delte det. Jeg tror vi har kartlagt endel. Nå går vi over til dyp motivasjon.\";\n\n        // Sett fase til 2\n        setPhase(2);\n      }\n\n      // 6) Oppdater meldinger med GPT-svar\n      setMessages((prev) => [...prev, { sender: \"bot\", text: botReply }]);\n\n      setIsTyping(false);\n      setLoading(false);\n    }, 500);\n  };\n\n  // Autoscroll\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <header className=\"chat-header\">\n        <img src={logo} alt=\"MeyerHaugen\" className=\"logo\" />\n        <p className=\"chat-date\">\n          {new Date().toLocaleDateString(\"no-NO\", { weekday: \"long\", day: \"numeric\", month: \"long\" })}\n        </p>\n      </header>\n\n      <div className=\"chatbot-messages\">\n        {messages.map((msg, i) => (\n          <div key={i} className={`chat-message ${msg.sender}`}>\n            {msg.sender === \"bot\" ? (\n              i === messages.length - 1 ? (\n                <img src={miniLogo} alt=\"Bot\" className=\"bot-avatar\" />\n              ) : (\n                <div className=\"bot-avatar-placeholder\"></div>\n              )\n            ) : null}\n            <div className={`chat-bubble ${msg.sender}`}>{msg.text}</div>\n          </div>\n        ))}\n\n        {isTyping && (\n          <div className=\"typing-bubble\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n        )}\n\n        <div ref={messagesEndRef} />\n      </div>\n\n      {consent === null && (\n        <div className=\"consent-buttons\">\n          <button className=\"accept\" onClick={() => handleConsent(true)}>Godta</button>\n          <button className=\"decline\" onClick={() => handleConsent(false)}>Avslå</button>\n        </div>\n      )}\n\n      {consent !== null && (\n        <div className=\"chat-input\">\n          <textarea\n            ref={inputRef}\n            placeholder=\"Skriv melding her\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onKeyDown={(e) => { if (e.key === 'Enter') sendMessage(); }}\n            disabled={loading}\n            rows={1}\n            style={{ resize: \"none\", minHeight: \"30px\", maxHeight: \"200px\", overflowY: \"auto\" }}\n          />\n          <button onClick={sendMessage} disabled={loading}>\n            ➤\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}