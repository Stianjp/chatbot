{"ast":null,"code":"// chatbotApi.js\n\n/*\n    Hva: Denne filen inneholder funksjoner for å kommunisere med backend-serveren.\n\n    Hvordan: Denne filen eksporterer tre funksjoner:\n    - `clearBackendData` tømmer all brukerdata i backend.\n    - `saveUserData` lagrer brukerdata i backend.\n    - `analyzeUserData` analyserer brukerdata i backend.\n    Dette gjøres ved å sende POST-forespørsler til serveren.\n    Og slik\n\n    Hvorfor: For å lagre og analysere brukerdata i backend.\n\n*/\n\nconst API_BASE_URL = \"http://localhost:5001/api\";\nexport const clearBackendData = async () => {\n  try {\n    await fetch(`${API_BASE_URL}/clearData`, {\n      method: \"POST\"\n    });\n  } catch (error) {\n    console.error(\"❌ Feil ved tømming av data:\", error);\n  }\n};\nexport const saveUserData = async (consent, userData) => {\n  if (!consent) return;\n  try {\n    await fetch(`${API_BASE_URL}/saveData`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        consent,\n        data: userData\n      })\n    });\n  } catch (error) {\n    console.error(\"❌ Feil ved lagring av data:\", error);\n  }\n};\nexport const analyzeUserData = async userData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/analyzeUser`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        jobStatus: userData.jobStatus,\n        goal: userData.goal\n      })\n    });\n    return await response.json();\n  } catch (error) {\n    console.error(\"❌ Feil ved analyse av brukerdata:\", error);\n    return {\n      category: null\n    };\n  }\n};","map":{"version":3,"names":["API_BASE_URL","clearBackendData","fetch","method","error","console","saveUserData","consent","userData","headers","body","JSON","stringify","data","analyzeUserData","response","jobStatus","goal","json","category"],"sources":["/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeniør - bachelor/3.året/Bachelor/Bacheloroppgave/chatbot/src/api/chatbotApi.js"],"sourcesContent":["// chatbotApi.js\n\n/*\n    Hva: Denne filen inneholder funksjoner for å kommunisere med backend-serveren.\n\n    Hvordan: Denne filen eksporterer tre funksjoner:\n    - `clearBackendData` tømmer all brukerdata i backend.\n    - `saveUserData` lagrer brukerdata i backend.\n    - `analyzeUserData` analyserer brukerdata i backend.\n    Dette gjøres ved å sende POST-forespørsler til serveren.\n    Og slik\n\n    Hvorfor: For å lagre og analysere brukerdata i backend.\n\n*/\n\nconst API_BASE_URL = \"http://localhost:5001/api\";\n\nexport const clearBackendData = async () => {\n  try {\n    await fetch(`${API_BASE_URL}/clearData`, { method: \"POST\" });\n  } catch (error) {\n    console.error(\"❌ Feil ved tømming av data:\", error);\n  }\n};\n\nexport const saveUserData = async (consent, userData) => {\n  if (!consent) return;\n  try {\n    await fetch(`${API_BASE_URL}/saveData`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ consent, data: userData })\n    });\n  } catch (error) {\n    console.error(\"❌ Feil ved lagring av data:\", error);\n  }\n};\n\nexport const analyzeUserData = async (userData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/analyzeUser`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ jobStatus: userData.jobStatus, goal: userData.goal })\n    });\n    return await response.json();\n  } catch (error) {\n    console.error(\"❌ Feil ved analyse av brukerdata:\", error);\n    return { category: null };\n  }\n};"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAG,2BAA2B;AAEhD,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACF,MAAMC,KAAK,CAAC,GAAGF,YAAY,YAAY,EAAE;MAAEG,MAAM,EAAE;IAAO,CAAC,CAAC;EAC9D,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;EACrD;AACF,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,MAAAA,CAAOC,OAAO,EAAEC,QAAQ,KAAK;EACvD,IAAI,CAACD,OAAO,EAAE;EACd,IAAI;IACF,MAAML,KAAK,CAAC,GAAGF,YAAY,WAAW,EAAE;MACtCG,MAAM,EAAE,MAAM;MACdM,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEL,OAAO;QAAEM,IAAI,EAAEL;MAAS,CAAC;IAClD,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;EACrD;AACF,CAAC;AAED,OAAO,MAAMU,eAAe,GAAG,MAAON,QAAQ,IAAK;EACjD,IAAI;IACF,MAAMO,QAAQ,GAAG,MAAMb,KAAK,CAAC,GAAGF,YAAY,cAAc,EAAE;MAC1DG,MAAM,EAAE,MAAM;MACdM,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEI,SAAS,EAAER,QAAQ,CAACQ,SAAS;QAAEC,IAAI,EAAET,QAAQ,CAACS;MAAK,CAAC;IAC7E,CAAC,CAAC;IACF,OAAO,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOd,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,OAAO;MAAEe,QAAQ,EAAE;IAAK,CAAC;EAC3B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}