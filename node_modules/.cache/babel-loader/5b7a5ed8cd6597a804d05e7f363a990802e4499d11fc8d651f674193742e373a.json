{"ast":null,"code":"var _jsxFileName = \"/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeni\\xF8r - bachelor/3.a\\u030Aret/Bachelor/Bacheloroppgave/chatbot/src/components/Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { initialMessage, phaseOnePrompt, phaseTwoPrompt } from \"../data/chatbotPrompts\";\nimport \"../styles/Chatbot.css\";\nimport { askChatbot } from \"../utils/langchainChatbot\";\nimport logo from \"../media/logo.png\";\nimport miniLogo from \"../media/MH_logo.png\";\nimport { IoClose } from \"react-icons/io5\";\n\n/*\n  Chatbot.jsx:\n  - Fase = 1 => GPT bruker phaseOnePrompt (5-8 spørsmål).\n  - Fase = 2 => GPT bruker phaseTwoPrompt (7 spørsmål + oppsummering).\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  // Meldingshistorikk\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: initialMessage\n  }]);\n\n  // Samtykke (hvis du fremdeles vil bruke det)\n  const [consent, setConsent] = useState(null);\n\n  // Brukerens input + states\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [chatId, setChatId] = useState(null); // ID for samtalen\n  const [hoverText, setHoverText] = useState(\"Klikk for å kopiere ID\");\n  const [hoverXbottom, setHoverXbottom] = useState(\"Klikk for å avslutte samtalen\");\n\n  // Fase-styring: 1 = kort kartlegging, 2 = dyp motivasjon\n  const [phase, setPhase] = useState(1);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  useEffect(() => {\n    clearData(); // Tøm userData.json når siden lastes inn\n    startNewChat(); // Start en ny samtale når chatboten lastes inn\n  }, []);\n\n  // Start en ny samtale og hent en ID\n  const startNewChat = async () => {\n    try {\n      const response = await axios.post(\"http://localhost:5001/saveData/start\");\n      setChatId(response.data.chatId);\n      console.log(\"Ny samtale startet med ID:\", response.data.chatId);\n    } catch (error) {\n      console.error(\"❌ Feil ved oppstart av chat:\", error);\n    }\n  };\n\n  // Autoscroll / autofokus\n  useEffect(() => {\n    scrollToBottom();\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [messages]);\n\n  // Tøm userData.json\n  const clearData = async () => {\n    try {\n      await axios.post(\"http://localhost:5001/api/clearData\");\n      console.log(\"userData.json tømt\");\n    } catch (error) {\n      console.error(\"❌ Feil ved tømming av userData.json:\", error);\n    }\n  };\n\n  // Samtykke-håndtering\n  const handleConsent = userConsent => {\n    setConsent(userConsent);\n    const userMsg = {\n      sender: \"user\",\n      text: userConsent ? \"Ja, jeg samtykker.\" : \"Nei, jeg ønsker ikke lagring.\"\n    };\n    const botMsg = {\n      sender: \"bot\",\n      text: \"Tusen takk! Mitt navn er SoftAI, hva heter du?\"\n    };\n    const newMessages = [...messages, userMsg, botMsg];\n    setMessages(newMessages);\n    if (userConsent) {\n      saveMessage(userMsg);\n      saveMessage(botMsg);\n    }\n  };\n\n  // Send melding\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n\n    // Legg til brukermelding\n    const userMessage = {\n      sender: \"user\",\n      text: input.trim()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    saveMessage(userMessage);\n    setInput(\"\");\n    inputRef.current.style.height = \"30px\";\n    setIsTyping(true);\n\n    // Vent litt og kall GPT\n    setTimeout(async () => {\n      let botReply = \"\";\n\n      // 1) Bygg hele konversasjonen i GPT-format\n      const conversationMessages = buildConversationForGPT([...messages, userMessage]);\n\n      // 2) Velg prompt basert på fase\n      let systemPrompt = phaseOnePrompt;\n      if (phase === 2) {\n        systemPrompt = phaseTwoPrompt;\n      }\n\n      // 3) Kall GPT\n      botReply = await askChatbot(conversationMessages, systemPrompt);\n\n      // 4) TELL antall assistent-svar i denne fasen\n      const newAssistantCount = countAssistantMessages([...messages, {\n        sender: \"bot\",\n        text: botReply\n      }], phase);\n\n      // 5) Bytt til fase 2 hvis vi er i fase 1 og GPT har passert ~5–8 meldinger\n      if (phase === 1 && newAssistantCount >= 8) {\n        console.log(\"Bytter til fase 2...\");\n        // Sett fase til 2\n        setPhase(2);\n      }\n\n      // 6) Oppdater meldinger med GPT-svar\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: botReply\n      }]);\n      saveMessage({\n        sender: \"bot\",\n        text: botReply\n      });\n      setIsTyping(false);\n      setLoading(false);\n    }, 500);\n  };\n\n  // Ensure phase 2 is activated properly\n  useEffect(() => {\n    if (phase === 2) {\n      console.log(\" Fase 2 er aktivert! Bytter til dyp motivasjonsanalyse.\");\n    }\n  }, [phase]);\n\n  // Lagre en melding til backend\n  const saveMessage = async message => {\n    try {\n      await axios.post(\"http://localhost:5001/saveData/save\", {\n        chatId,\n        sender: message.sender,\n        text: message.text\n      });\n    } catch (error) {\n      console.error(\"❌ Feil ved lagring av melding:\", error);\n    }\n  };\n  const [chatEnded, setChatEnded] = useState(false);\n\n  // Avslutt samtale og lagre den\n  const finishChat = async () => {\n    if (isFinishingChat) return; // Hindre flere trykk\n    setIsFinishingChat(true); // Lås knappen\n\n    try {\n      if (consent === false) {\n        console.log(\"🚫 Bruker har ikke samtykket. Samtalen slettes.\");\n        await axios.delete(`http://localhost:5001/saveData/delete/${chatId}`);\n        console.log(\"🚫 Samtale slettet siden brukeren ikke ga samtykke.\");\n      } else {\n        const response = await axios.post(\"http://localhost:5001/saveData/finish\", {\n          chatId\n        });\n        console.log(response.data.message, \"Fil lagret på:\", response.data.filePath);\n      }\n    } catch (error) {\n      console.error(\"❌ Feil ved sletting/lagring av samtale:\", error);\n    }\n    setMessages(prevMessages => [...prevMessages, {\n      sender: \"bot\",\n      text: \"Takk for samtalen!😊 Ha en fin dag videre!\"\n    }]);\n    setChatEnded(true); // Sørg for at knappen vises\n  };\n  // Slett samtalen dersom brukeren ikke samtykket\n\n  const [isFinishingChat, setIsFinishingChat] = useState(false); // For å hindre dobbelklikk\n\n  // Start en ny samtale fra bunnen av\n  const restartChat = async () => {\n    setChatId(null);\n    setConsent(null);\n    setChatEnded(false); // Tillat meldinger igjen\n    setIsFinishingChat(false); // 🔄 Reset finishChat-knappen\n    setMessages([{\n      sender: \"bot\",\n      text: initialMessage\n    }]);\n    startNewChat(); // Start en ny samtale med ny ID\n  };\n\n  // Autoscroll\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  };\n\n  // Juster inputfeltets høyde\n  const handleInputChange = e => {\n    setInput(e.target.value);\n    e.target.style.height = \"30px\";\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n\n  // Kopier chat-ID til utklippstavlen\n  const copyChatId = () => {\n    navigator.clipboard.writeText(chatId).then(() => {\n      setHoverText(\"ID kopiert!\");\n      setTimeout(() => setHoverText(\"Klikk for å kopiere ID\"), 2000);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"MeyerHaugen\",\n        className: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chat-date\",\n        children: new Date().toLocaleDateString(\"no-NO\", {\n          weekday: \"long\",\n          day: \"numeric\",\n          month: \"long\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), chatId && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chat-id\",\n        onClick: copyChatId,\n        title: hoverText,\n        style: {\n          cursor: \"pointer\"\n        },\n        children: [\"Chat ID: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            textDecoration: \"underline\"\n          },\n          children: chatId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: [messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.sender}`,\n        children: [msg.sender === \"bot\" ? i === messages.length - 1 ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: miniLogo,\n          alt: \"Bot\",\n          className: \"bot-avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot-avatar-placeholder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 17\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-bubble ${msg.sender}`,\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-bubble\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), chatEnded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"restart-chat\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"restart-button\",\n        onClick: restartChat,\n        children: \"Start ny samtale\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }, this), consent === null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"consent-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"accept\",\n        onClick: () => handleConsent(true),\n        children: \"Godta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"decline\",\n        onClick: () => handleConsent(false),\n        children: \"Avsl\\xE5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }, this), consent !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: inputRef,\n        placeholder: \"Skriv melding her\",\n        value: input,\n        onChange: handleInputChange,\n        onKeyDown: e => {\n          if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            if (!chatEnded) sendMessage(); // Kun send hvis chat ikke er avsluttet\n          }\n        },\n        disabled: loading || chatEnded // Deaktivert hvis chat er avsluttet\n        ,\n        rows: 1,\n        style: {\n          resize: \"none\",\n          minHeight: \"30px\",\n          maxHeight: \"200px\",\n          overflowY: \"auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: loading || chatEnded,\n        children: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: finishChat,\n        title: hoverXbottom,\n        disabled: isFinishingChat // Deaktiver knappen etter første trykk\n        ,\n        children: /*#__PURE__*/_jsxDEV(IoClose, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};\n\n/** \n * Bygg et array i GPT-format: {role: \"assistant\"|\"user\", content: \"...\"}\n * Basert på {sender: \"bot\"|\"user\", text: \"...\"} \n */\n_s(Chatbot, \"XM7X0b1PDyYcohv7F3ElXUCoU3o=\");\n_c = Chatbot;\nfunction buildConversationForGPT(allMessages) {\n  return allMessages.map(m => ({\n    role: m.sender === \"bot\" ? \"assistant\" : \"user\",\n    content: m.text\n  }));\n}\n\n/**\n * Teller hvor mange meldinger \"bot\" har kommet med i gjeldende fase.\n * Du kan velge å differensiere på om meldingen ble postet i currentPhase. Men i en enkel variant:\n */\nfunction countAssistantMessages(allMessages, currentPhase) {\n  let count = 0;\n  for (const msg of allMessages) {\n    if (msg.sender === \"bot\") {\n      count++;\n    }\n  }\n  return count;\n}\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","initialMessage","phaseOnePrompt","phaseTwoPrompt","askChatbot","logo","miniLogo","IoClose","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","consent","setConsent","input","setInput","loading","setLoading","isTyping","setIsTyping","chatId","setChatId","hoverText","setHoverText","hoverXbottom","setHoverXbottom","phase","setPhase","messagesEndRef","inputRef","clearData","startNewChat","response","post","data","console","log","error","scrollToBottom","current","focus","handleConsent","userConsent","userMsg","botMsg","newMessages","saveMessage","sendMessage","trim","userMessage","prev","style","height","setTimeout","botReply","conversationMessages","buildConversationForGPT","systemPrompt","newAssistantCount","countAssistantMessages","message","chatEnded","setChatEnded","finishChat","isFinishingChat","setIsFinishingChat","delete","filePath","prevMessages","restartChat","scrollIntoView","behavior","handleInputChange","e","target","value","scrollHeight","copyChatId","navigator","clipboard","writeText","then","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","Date","toLocaleDateString","weekday","day","month","onClick","title","cursor","textDecoration","map","msg","i","length","ref","placeholder","onChange","onKeyDown","key","shiftKey","preventDefault","disabled","rows","resize","minHeight","maxHeight","overflowY","_c","allMessages","m","role","content","currentPhase","count","$RefreshReg$"],"sources":["/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeniør - bachelor/3.året/Bachelor/Bacheloroppgave/chatbot/src/components/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport {\n  initialMessage,\n  phaseOnePrompt,\n  phaseTwoPrompt,\n} from \"../data/chatbotPrompts\";\nimport \"../styles/Chatbot.css\";\nimport { askChatbot } from \"../utils/langchainChatbot\";\nimport logo from \"../media/logo.png\";\nimport miniLogo from \"../media/MH_logo.png\";\nimport { IoClose } from \"react-icons/io5\";\n\n/*\n  Chatbot.jsx:\n  - Fase = 1 => GPT bruker phaseOnePrompt (5-8 spørsmål).\n  - Fase = 2 => GPT bruker phaseTwoPrompt (7 spørsmål + oppsummering).\n*/\n\nconst Chatbot = () => {\n  // Meldingshistorikk\n  const [messages, setMessages] = useState([\n    { sender: \"bot\", text: initialMessage },\n  ]);\n\n  // Samtykke (hvis du fremdeles vil bruke det)\n  const [consent, setConsent] = useState(null);\n\n  // Brukerens input + states\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [chatId, setChatId] = useState(null); // ID for samtalen\n  const [hoverText, setHoverText] = useState(\"Klikk for å kopiere ID\");\n  const [hoverXbottom, setHoverXbottom] = useState(\"Klikk for å avslutte samtalen\");\n\n  // Fase-styring: 1 = kort kartlegging, 2 = dyp motivasjon\n  const [phase, setPhase] = useState(1);\n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    clearData(); // Tøm userData.json når siden lastes inn\n    startNewChat(); // Start en ny samtale når chatboten lastes inn\n  }, []);\n\n  // Start en ny samtale og hent en ID\n  const startNewChat = async () => {\n    try {\n      const response = await axios.post(\"http://localhost:5001/saveData/start\");\n      setChatId(response.data.chatId);\n      console.log(\"Ny samtale startet med ID:\", response.data.chatId);\n    } catch (error) {\n      console.error(\"❌ Feil ved oppstart av chat:\", error);\n    }\n  };\n\n  // Autoscroll / autofokus\n  useEffect(() => {\n    scrollToBottom();\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [messages]);\n\n  // Tøm userData.json\n  const clearData = async () => {\n    try {\n      await axios.post(\"http://localhost:5001/api/clearData\");\n      console.log(\"userData.json tømt\");\n    } catch (error) {\n      console.error(\"❌ Feil ved tømming av userData.json:\", error);\n    }\n  };\n\n  // Samtykke-håndtering\n  const handleConsent = (userConsent) => {\n    setConsent(userConsent);\n    const userMsg = { sender: \"user\", text: userConsent ? \"Ja, jeg samtykker.\" : \"Nei, jeg ønsker ikke lagring.\" };\n    const botMsg = { sender: \"bot\", text: \"Tusen takk! Mitt navn er SoftAI, hva heter du?\" };\n\n    const newMessages = [...messages, userMsg, botMsg];\n    setMessages(newMessages);\n\n    if (userConsent) {\n      saveMessage(userMsg);\n      saveMessage(botMsg);\n    }\n  };\n\n  // Send melding\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n\n    // Legg til brukermelding\n    const userMessage = { sender: \"user\", text: input.trim() };\n    setMessages((prev) => [...prev, userMessage]);\n    saveMessage(userMessage);\n    setInput(\"\");\n    inputRef.current.style.height = \"30px\";\n\n    setIsTyping(true);\n\n    // Vent litt og kall GPT\n    setTimeout(async () => {\n      let botReply = \"\";\n\n      // 1) Bygg hele konversasjonen i GPT-format\n      const conversationMessages = buildConversationForGPT([...messages, userMessage]);\n\n      // 2) Velg prompt basert på fase\n      let systemPrompt = phaseOnePrompt;\n      if (phase === 2) {\n        systemPrompt = phaseTwoPrompt;\n      }\n\n      // 3) Kall GPT\n      botReply = await askChatbot(conversationMessages, systemPrompt);\n\n      // 4) TELL antall assistent-svar i denne fasen\n      const newAssistantCount = countAssistantMessages([...messages, { sender: \"bot\", text: botReply }], phase);\n\n      // 5) Bytt til fase 2 hvis vi er i fase 1 og GPT har passert ~5–8 meldinger\n      if (phase === 1 && newAssistantCount >= 8) {\n        console.log(\"Bytter til fase 2...\");\n        // Sett fase til 2\n        setPhase(2);\n      }\n\n      // 6) Oppdater meldinger med GPT-svar\n      setMessages((prev) => [...prev, { sender: \"bot\", text: botReply }]);\n      saveMessage({ sender: \"bot\", text: botReply });\n\n      setIsTyping(false);\n      setLoading(false);\n    }, 500);\n  };\n\n  // Ensure phase 2 is activated properly\nuseEffect(() => {\n  if (phase === 2) {\n    console.log(\" Fase 2 er aktivert! Bytter til dyp motivasjonsanalyse.\");\n  }\n}, [phase]);\n\n  // Lagre en melding til backend\n  const saveMessage = async (message) => {\n    try {\n      await axios.post(\"http://localhost:5001/saveData/save\", {\n        chatId,\n        sender: message.sender,\n        text: message.text,\n      });\n    } catch (error) {\n      console.error(\"❌ Feil ved lagring av melding:\", error);\n    }\n  };\n\n  const [chatEnded, setChatEnded] = useState(false);\n\n  // Avslutt samtale og lagre den\n  const finishChat = async () => {\n    if (isFinishingChat) return; // Hindre flere trykk\n    setIsFinishingChat(true); // Lås knappen\n\n    try {\n        if (consent === false) {\n            console.log(\"🚫 Bruker har ikke samtykket. Samtalen slettes.\");\n            await axios.delete(`http://localhost:5001/saveData/delete/${chatId}`);\n            console.log(\"🚫 Samtale slettet siden brukeren ikke ga samtykke.\");\n        } else {\n              const response = await axios.post(\"http://localhost:5001/saveData/finish\", { chatId });\n              console.log(response.data.message, \"Fil lagret på:\", response.data.filePath);\n        }\n    } catch (error) {\n          console.error(\"❌ Feil ved sletting/lagring av samtale:\", error);\n    }\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { sender: \"bot\", text: \"Takk for samtalen!😊 Ha en fin dag videre!\" }\n    ]);\n    setChatEnded(true); // Sørg for at knappen vises\n  };\n  // Slett samtalen dersom brukeren ikke samtykket\n  \n  const [isFinishingChat, setIsFinishingChat] = useState(false); // For å hindre dobbelklikk\n\n  // Start en ny samtale fra bunnen av\n  const restartChat = async () => {\n    setChatId(null);\n    setConsent(null);\n    setChatEnded(false); // Tillat meldinger igjen\n    setIsFinishingChat(false); // 🔄 Reset finishChat-knappen\n    setMessages([{ sender: \"bot\", text: initialMessage }]);\n    startNewChat(); // Start en ny samtale med ny ID\n  };\n\n  // Autoscroll\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  // Juster inputfeltets høyde\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n    e.target.style.height = \"30px\";\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n\n  // Kopier chat-ID til utklippstavlen\n  const copyChatId = () => {\n    navigator.clipboard.writeText(chatId).then(() => {\n      setHoverText(\"ID kopiert!\");\n      setTimeout(() => setHoverText(\"Klikk for å kopiere ID\"), 2000);\n    });\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <header className=\"chat-header\">\n        <img src={logo} alt=\"MeyerHaugen\" className=\"logo\" />\n        <p className=\"chat-date\">\n          {new Date().toLocaleDateString(\"no-NO\", { weekday: \"long\", day: \"numeric\", month: \"long\" })}\n        </p>\n        {chatId && (\n          <p\n            className=\"chat-id\"\n            onClick={copyChatId}\n            title={hoverText}\n            style={{ cursor: \"pointer\" }}\n          >\n            Chat ID: <span style={{textDecoration: \"underline\" }}>{chatId}</span> \n          </p>\n        )}\n      </header>\n\n      <div className=\"chatbot-messages\">\n        {messages.map((msg, i) => (\n          <div key={i} className={`chat-message ${msg.sender}`}>\n            {msg.sender === \"bot\" ? (\n              i === messages.length - 1 ? (\n                <img src={miniLogo} alt=\"Bot\" className=\"bot-avatar\" />\n              ) : (\n                <div className=\"bot-avatar-placeholder\"></div>\n              )\n            ) : null}\n            <div className={`chat-bubble ${msg.sender}`}>{msg.text}</div>\n          </div>\n        ))}\n\n        {isTyping && (\n          <div className=\"typing-bubble\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n        )}\n\n        <div ref={messagesEndRef} />\n      </div>\n\n      {chatEnded && (\n        <div className=\"restart-chat\">\n          <button className=\"restart-button\" onClick={restartChat}>\n                Start ny samtale\n          </button>\n        </div>\n      )}\n\n      {consent === null && (\n        <div className=\"consent-buttons\">\n          <button className=\"accept\" onClick={() => handleConsent(true)}>Godta</button>\n          <button className=\"decline\" onClick={() => handleConsent(false)}>Avslå</button>\n        </div>\n      )}\n\n      {consent !== null && (\n          <div className=\"chat-input\">\n              <textarea\n                  ref={inputRef}\n                  placeholder=\"Skriv melding her\"\n                  value={input}\n                  onChange={handleInputChange}\n                  onKeyDown={(e) => {\n                      if (e.key === \"Enter\" && !e.shiftKey) {\n                          e.preventDefault();\n                          if (!chatEnded) sendMessage(); // Kun send hvis chat ikke er avsluttet\n                      }\n                  }}\n                  disabled={loading || chatEnded} // Deaktivert hvis chat er avsluttet\n                  rows={1}\n                  style={{ resize: \"none\", minHeight: \"30px\", maxHeight: \"200px\", overflowY: \"auto\" }}\n              />\n              <button onClick={sendMessage} disabled={loading || chatEnded}>\n                  ➤\n              </button>\n              <button \n                  onClick={finishChat} \n                  title={hoverXbottom}\n                  disabled={isFinishingChat} // Deaktiver knappen etter første trykk\n                  >                         \n                  <IoClose />\n              </button>\n          </div>\n      )}\n    </div>\n  );\n};\n\n/** \n * Bygg et array i GPT-format: {role: \"assistant\"|\"user\", content: \"...\"}\n * Basert på {sender: \"bot\"|\"user\", text: \"...\"} \n */\nfunction buildConversationForGPT(allMessages) {\n  return allMessages.map((m) => ({\n    role: m.sender === \"bot\" ? \"assistant\" : \"user\",\n    content: m.text,\n  }));\n}\n\n/**\n * Teller hvor mange meldinger \"bot\" har kommet med i gjeldende fase.\n * Du kan velge å differensiere på om meldingen ble postet i currentPhase. Men i en enkel variant:\n */\nfunction countAssistantMessages(allMessages, currentPhase) {\n  let count = 0;\n  for (const msg of allMessages) {\n    if (msg.sender === \"bot\") {\n      count++;\n    }\n  }\n  return count;\n}\n\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}