{"ast":null,"code":"var _jsxFileName = \"/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeni\\xF8r - bachelor/3.a\\u030Aret/Bachelor/Bacheloroppgave/chatbot/src/components/Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { initialMessage, questions, categoryResponses, chatgptPrompts } from \"../data/chatbotPrompts\";\nimport { clearBackendData, saveUserData, analyzeUserData, reanalyzeUserData } from \"../api/chatbotApi\";\nimport { askChatbot } from \"../utils/langchainChatbot\";\nimport \"../styles/Chatbot.css\";\nimport logo from \"../media/logo.png\";\nimport miniLogo from \"../media/MH_logo.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    text: initialMessage,\n    sender: \"bot\"\n  }]);\n  const [consent, setConsent] = useState(null);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [userData, setUserData] = useState({});\n  const [currentStep, setCurrentStep] = useState(0);\n  const [category, setCategory] = useState(null);\n  const [chatgptActive, setChatgptActive] = useState(false);\n\n  // Teller for hvor mange meldinger brukeren har sendt etter at chatgptActive er true\n  const [gptQuestionCount, setGptQuestionCount] = useState(0);\n\n  // Typing-indikator\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Ref for textarea\n  const inputRef = useRef(null);\n  // Ref for å scrolle bunn\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    clearBackendData();\n  }, []);\n\n  // 1) Håndtering av samtykke\n  const handleConsent = userConsent => {\n    setConsent(userConsent);\n    setMessages(prev => [...prev, {\n      text: userConsent ? \"Ja, jeg godtar.\" : \"Nei, jeg ønsker ikke lagring.\",\n      sender: \"user\"\n    }, {\n      text: \"Takk for tilbakemeldingen!\",\n      sender: \"bot\"\n    }, {\n      text: questions[0].text,\n      sender: \"bot\"\n    }]);\n  };\n\n  // 2) Hovedfunksjon for å sende melding\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n\n    // Legg meldingen i chat-historikken\n    const userMessage = {\n      text: input,\n      sender: \"user\"\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    // Rens inputfelt\n    setInput(\"\");\n    inputRef.current.style.height = \"30px\";\n    setIsTyping(true);\n    setTimeout(async () => {\n      let botResponse = \"\";\n\n      // Hvis vi allerede har kategorien => chatgptActive = true (coach-modus)\n      if (chatgptActive && category) {\n        // Øk teller for meldinger i GPT-modus\n        setGptQuestionCount(count => count + 1);\n\n        // Hent tilpasset prompt for nåværende kategori\n        const chatGptPrompt = chatgptPrompts[category] || \"Hjelp brukeren med karriereveiledning basert på tidligere svar.\";\n\n        // Kall GPT\n        botResponse = await askChatbot(input, chatGptPrompt);\n\n        // **Re-analyse** etter 5 meldinger (du kan endre tallet her)\n        if (gptQuestionCount + 1 >= 5) {\n          // Hent utdrag av de siste meldingene (f.eks 5–10)\n          const snippetCount = 6; // antall meldinger å sende\n          const conversationSnippet = getConversationSnippet(messages, snippetCount);\n\n          // Kall reanalyze\n          const reanalysis = await reanalyzeUserData({\n            jobStatus: userData.jobStatus,\n            goal: userData.goal,\n            conversationSnippet: conversationSnippet\n          });\n          if (reanalysis.newCategory && reanalysis.newCategory !== category) {\n            // Oppdater kategori\n            setCategory(reanalysis.newCategory);\n            // Nullstill teller\n            setGptQuestionCount(0);\n\n            // Oppdater respons\n            botResponse += `\\n\\nJeg har revurdert situasjonen din, og det ser ut som vi bør gå videre med kategori: ${reanalysis.newCategory}.`;\n          } else {\n            // Forblir i samme kategori\n            botResponse += \"\\n\\n(Forblir i samme kategori.)\";\n          }\n        }\n      }\n      // Hvis vi IKKE er i GPT-modus, stiller vi ut de innledende spørsmålene\n      else if (currentStep < questions.length) {\n        // Oppdater userData basert på spørsmålet\n        const updatedUserData = {\n          ...userData,\n          [questions[currentStep].key]: input\n        };\n        setUserData(updatedUserData);\n\n        // Hvis vi ikke er ved siste spørsmål, gå til neste\n        if (currentStep + 1 < questions.length) {\n          botResponse = questions[currentStep + 1].text;\n          setCurrentStep(currentStep + 1);\n        } else {\n          // Har besvart alle innledende spørsmål\n          await saveUserData(consent, updatedUserData);\n\n          // Analyser kategori\n          const result = await analyzeUserData(updatedUserData);\n          setCategory(result.category);\n\n          // Baserer første GPT-svar på categoryResponses\n          botResponse = categoryResponses[result.category] || \"Det oppstod en feil ved analyse av dataene dine.\";\n\n          // Aktiver GPT-modus\n          setChatgptActive(true);\n        }\n      }\n\n      // Legg til chatbot-respons\n      setMessages(prev => [...prev, {\n        text: botResponse,\n        sender: \"bot\"\n      }]);\n      setIsTyping(false);\n      setLoading(false);\n    }, 500);\n  };\n\n  // Hjelpefunksjon for å scrolle til bunn\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  };\n  useEffect(() => {\n    scrollToBottom();\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [messages]);\n\n  // Håndtere \"auto-resize\" av textarea\n  const handleInputChange = e => {\n    setInput(e.target.value);\n    e.target.style.height = \"30px\";\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"MeyerHaugen\",\n        className: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chat-date\",\n        children: new Date().toLocaleDateString(\"no-NO\", {\n          weekday: \"long\",\n          day: \"numeric\",\n          month: \"long\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.sender}`,\n        children: [msg.sender === \"bot\" ? index === messages.length - 1 ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: miniLogo,\n          alt: \"Bot\",\n          className: \"bot-avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot-avatar-placeholder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 17\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-bubble ${msg.sender}`,\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-bubble\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), consent === null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"consent-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"accept\",\n        onClick: () => handleConsent(true),\n        children: \"Godta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"decline\",\n        onClick: () => handleConsent(false),\n        children: \"Avsl\\xE5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this), consent !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: inputRef,\n        placeholder: \"Skriv melding her\",\n        value: input,\n        onChange: handleInputChange,\n        onKeyDown: e => {\n          if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            sendMessage();\n          }\n        },\n        disabled: loading,\n        rows: 1,\n        style: {\n          resize: \"none\",\n          minHeight: \"30px\",\n          maxHeight: \"200px\",\n          overflowY: \"auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: loading,\n        children: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n\n/**\n * Hent en \"snippet\" av de siste meldingene\n * Du kan justere antallet meldinger du sender til reanalyzeUser\n */\n_s(Chatbot, \"dbuyM/tnEtGzxYMUpxybURpgfn8=\");\n_c = Chatbot;\nfunction getConversationSnippet(allMessages, snippetCount = 5) {\n  // Hopp over bot-sine \"spørsmål\" hvis du vil. Her tar vi bare all historikk.\n  const relevant = allMessages.slice(-snippetCount);\n  const snippet = relevant.map(m => `${m.sender}: ${m.text}`).join(\"\\n\");\n  return snippet;\n}\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","initialMessage","questions","categoryResponses","chatgptPrompts","clearBackendData","saveUserData","analyzeUserData","reanalyzeUserData","askChatbot","logo","miniLogo","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","text","sender","consent","setConsent","input","setInput","loading","setLoading","userData","setUserData","currentStep","setCurrentStep","category","setCategory","chatgptActive","setChatgptActive","gptQuestionCount","setGptQuestionCount","isTyping","setIsTyping","inputRef","messagesEndRef","handleConsent","userConsent","prev","sendMessage","trim","userMessage","current","style","height","setTimeout","botResponse","count","chatGptPrompt","snippetCount","conversationSnippet","getConversationSnippet","reanalysis","jobStatus","goal","newCategory","length","updatedUserData","key","result","scrollToBottom","scrollIntoView","behavior","focus","handleInputChange","e","target","value","scrollHeight","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","Date","toLocaleDateString","weekday","day","month","map","msg","index","ref","onClick","placeholder","onChange","onKeyDown","shiftKey","preventDefault","disabled","rows","resize","minHeight","maxHeight","overflowY","_c","allMessages","relevant","slice","snippet","m","join","$RefreshReg$"],"sources":["/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeniør - bachelor/3.året/Bachelor/Bacheloroppgave/chatbot/src/components/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  initialMessage,\n  questions,\n  categoryResponses,\n  chatgptPrompts,\n} from \"../data/chatbotPrompts\";\nimport {\n  clearBackendData,\n  saveUserData,\n  analyzeUserData,\n  reanalyzeUserData,\n} from \"../api/chatbotApi\";\nimport { askChatbot } from \"../utils/langchainChatbot\";\nimport \"../styles/Chatbot.css\";\nimport logo from \"../media/logo.png\";\nimport miniLogo from \"../media/MH_logo.png\";\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([{ text: initialMessage, sender: \"bot\" }]);\n  const [consent, setConsent] = useState(null);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [userData, setUserData] = useState({});\n  const [currentStep, setCurrentStep] = useState(0);\n  const [category, setCategory] = useState(null);\n  const [chatgptActive, setChatgptActive] = useState(false);\n\n  // Teller for hvor mange meldinger brukeren har sendt etter at chatgptActive er true\n  const [gptQuestionCount, setGptQuestionCount] = useState(0);\n\n  // Typing-indikator\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Ref for textarea\n  const inputRef = useRef(null);\n  // Ref for å scrolle bunn\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    clearBackendData();\n  }, []);\n\n  // 1) Håndtering av samtykke\n  const handleConsent = (userConsent) => {\n    setConsent(userConsent);\n    setMessages((prev) => [\n      ...prev,\n      { text: userConsent ? \"Ja, jeg godtar.\" : \"Nei, jeg ønsker ikke lagring.\", sender: \"user\" },\n      { text: \"Takk for tilbakemeldingen!\", sender: \"bot\" },\n      { text: questions[0].text, sender: \"bot\" },\n    ]);\n  };\n\n  // 2) Hovedfunksjon for å sende melding\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n\n    // Legg meldingen i chat-historikken\n    const userMessage = { text: input, sender: \"user\" };\n    setMessages((prev) => [...prev, userMessage]);\n\n    // Rens inputfelt\n    setInput(\"\");\n    inputRef.current.style.height = \"30px\";\n\n    setIsTyping(true);\n\n    setTimeout(async () => {\n      let botResponse = \"\";\n\n      // Hvis vi allerede har kategorien => chatgptActive = true (coach-modus)\n      if (chatgptActive && category) {\n        // Øk teller for meldinger i GPT-modus\n        setGptQuestionCount((count) => count + 1);\n\n        // Hent tilpasset prompt for nåværende kategori\n        const chatGptPrompt = chatgptPrompts[category] || \"Hjelp brukeren med karriereveiledning basert på tidligere svar.\";\n\n        // Kall GPT\n        botResponse = await askChatbot(input, chatGptPrompt);\n\n        // **Re-analyse** etter 5 meldinger (du kan endre tallet her)\n        if (gptQuestionCount + 1 >= 5) {\n          // Hent utdrag av de siste meldingene (f.eks 5–10)\n          const snippetCount = 6; // antall meldinger å sende\n          const conversationSnippet = getConversationSnippet(messages, snippetCount);\n\n          // Kall reanalyze\n          const reanalysis = await reanalyzeUserData({\n            jobStatus: userData.jobStatus,\n            goal: userData.goal,\n            conversationSnippet: conversationSnippet,\n          });\n\n          if (reanalysis.newCategory && reanalysis.newCategory !== category) {\n            // Oppdater kategori\n            setCategory(reanalysis.newCategory);\n            // Nullstill teller\n            setGptQuestionCount(0);\n\n            // Oppdater respons\n            botResponse += `\\n\\nJeg har revurdert situasjonen din, og det ser ut som vi bør gå videre med kategori: ${reanalysis.newCategory}.`;\n          } else {\n            // Forblir i samme kategori\n            botResponse += \"\\n\\n(Forblir i samme kategori.)\";\n          }\n        }\n      }\n      // Hvis vi IKKE er i GPT-modus, stiller vi ut de innledende spørsmålene\n      else if (currentStep < questions.length) {\n        // Oppdater userData basert på spørsmålet\n        const updatedUserData = { ...userData, [questions[currentStep].key]: input };\n        setUserData(updatedUserData);\n\n        // Hvis vi ikke er ved siste spørsmål, gå til neste\n        if (currentStep + 1 < questions.length) {\n          botResponse = questions[currentStep + 1].text;\n          setCurrentStep(currentStep + 1);\n        } else {\n          // Har besvart alle innledende spørsmål\n          await saveUserData(consent, updatedUserData);\n\n          // Analyser kategori\n          const result = await analyzeUserData(updatedUserData);\n          setCategory(result.category);\n\n          // Baserer første GPT-svar på categoryResponses\n          botResponse = categoryResponses[result.category] || \"Det oppstod en feil ved analyse av dataene dine.\";\n\n          // Aktiver GPT-modus\n          setChatgptActive(true);\n        }\n      }\n\n      // Legg til chatbot-respons\n      setMessages((prev) => [...prev, { text: botResponse, sender: \"bot\" }]);\n\n      setIsTyping(false);\n      setLoading(false);\n    }, 500);\n  };\n\n  // Hjelpefunksjon for å scrolle til bunn\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [messages]);\n\n  // Håndtere \"auto-resize\" av textarea\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n    e.target.style.height = \"30px\";\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <header className=\"chat-header\">\n        <img src={logo} alt=\"MeyerHaugen\" className=\"logo\" />\n        <p className=\"chat-date\">\n          {new Date().toLocaleDateString(\"no-NO\", { weekday: \"long\", day: \"numeric\", month: \"long\" })}\n        </p>\n      </header>\n\n      <div className=\"chatbot-messages\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`chat-message ${msg.sender}`}>\n            {msg.sender === \"bot\" ? (\n              index === messages.length - 1 ? (\n                <img src={miniLogo} alt=\"Bot\" className=\"bot-avatar\" />\n              ) : (\n                <div className=\"bot-avatar-placeholder\"></div>\n              )\n            ) : null}\n            <div className={`chat-bubble ${msg.sender}`}>{msg.text}</div>\n          </div>\n        ))}\n\n        {isTyping && (\n          <div className=\"typing-bubble\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n        )}\n\n        <div ref={messagesEndRef} />\n      </div>\n\n      {consent === null && (\n        <div className=\"consent-buttons\">\n          <button className=\"accept\" onClick={() => handleConsent(true)}>\n            Godta\n          </button>\n          <button className=\"decline\" onClick={() => handleConsent(false)}>\n            Avslå\n          </button>\n        </div>\n      )}\n\n      {consent !== null && (\n        <div className=\"chat-input\">\n          <textarea\n            ref={inputRef}\n            placeholder=\"Skriv melding her\"\n            value={input}\n            onChange={handleInputChange}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\" && !e.shiftKey) {\n                e.preventDefault();\n                sendMessage();\n              }\n            }}\n            disabled={loading}\n            rows={1}\n            style={{\n              resize: \"none\",\n              minHeight: \"30px\",\n              maxHeight: \"200px\",\n              overflowY: \"auto\",\n            }}\n          />\n          <button onClick={sendMessage} disabled={loading}>\n            ➤\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\n/**\n * Hent en \"snippet\" av de siste meldingene\n * Du kan justere antallet meldinger du sender til reanalyzeUser\n */\nfunction getConversationSnippet(allMessages, snippetCount = 5) {\n  // Hopp over bot-sine \"spørsmål\" hvis du vil. Her tar vi bare all historikk.\n  const relevant = allMessages.slice(-snippetCount);\n  const snippet = relevant.map((m) => `${m.sender}: ${m.text}`).join(\"\\n\");\n  return snippet;\n}\n\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}