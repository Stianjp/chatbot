{"ast":null,"code":"var _jsxFileName = \"/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeni\\xF8r - bachelor/3.a\\u030Aret/Bachelor/Bacheloroppgave/chatbot/src/components/Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { askChatbot } from \"../utils/langchainChatbot\";\nimport \"./Styling/Chatbot.css\";\nimport logo from \"./media/logo.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    text: \"Hei! Ønsker du å godta lagring av samtalen for bedre analyse?\",\n    sender: \"bot\"\n  }]);\n  const [consent, setConsent] = useState(null);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [userData, setUserData] = useState({});\n  const [currentStep, setCurrentStep] = useState(0);\n  const [category, setCategory] = useState(null);\n\n  // Henter dagens dato i norsk format\n  const today = new Date().toLocaleDateString(\"no-NO\", {\n    weekday: \"long\",\n    day: \"numeric\",\n    month: \"long\"\n  });\n\n  // Liste over spørsmål chatboten skal stille\n  const questions = [{\n    key: \"name\",\n    text: \"Hva heter du?\"\n  }, {\n    key: \"age\",\n    text: \"Hvor gammel er du?\"\n  }, {\n    key: \"jobStatus\",\n    text: \"Er du i fast jobb, søker jobb, eller er du usikker på hva du vil?\"\n  }, {\n    key: \"goal\",\n    text: \"Hva er målet ditt med denne samtalen?\"\n  }];\n\n  // 🔹 **Tømmer backend-data når brukeren refresher**\n  useEffect(() => {\n    fetch(\"http://localhost:5001/api/clearData\", {\n      method: \"POST\"\n    }).catch(error => console.error(\"❌ Feil ved tømming av data:\", error));\n  }, []);\n\n  // 🔹 **Håndter samtykkevalg og start første spørsmål**\n  const handleConsent = async userConsent => {\n    setConsent(userConsent);\n    setMessages(prev => [...prev, {\n      text: userConsent ? \"Ja, jeg godtar.\" : \"Nei, jeg ønsker ikke lagring.\",\n      sender: \"user\"\n    }, {\n      text: \"Takk for tilbakemeldingen!\",\n      sender: \"bot\"\n    }, {\n      text: questions[0].text,\n      sender: \"bot\"\n    }]);\n  };\n\n  // 🔹 **Håndter brukerens svar**\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n    const userMessage = {\n      text: input,\n      sender: \"user\"\n    };\n    setMessages(prev => [...prev, userMessage]);\n    if (currentStep < questions.length) {\n      const updatedUserData = {\n        ...userData,\n        [questions[currentStep].key]: input\n      };\n      setUserData(updatedUserData);\n      if (currentStep + 1 < questions.length) {\n        setMessages(prev => [...prev, {\n          text: questions[currentStep + 1].text,\n          sender: \"bot\"\n        }]);\n      } else {\n        const summary = `\n          Takk for informasjonen! Her er en oppsummering:\n          - Navn: ${updatedUserData.name}\n          - Alder: ${updatedUserData.age}\n          - Jobbsituasjon: ${updatedUserData.jobStatus}\n          - Mål: ${updatedUserData.goal}\n          \n          Nå analyserer jeg informasjonen din for å hjelpe deg videre...\n        `;\n        setMessages(prev => [...prev, {\n          text: summary,\n          sender: \"bot\"\n        }]);\n\n        // **Send brukerdata til backend for lagring**\n        if (consent) {\n          await fetch(\"http://localhost:5001/api/saveData\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              consent,\n              data: updatedUserData\n            })\n          });\n        }\n\n        // **Send data til GPT for analyse**\n        analyzeUserData(updatedUserData);\n      }\n      setCurrentStep(currentStep + 1);\n    } else {\n      const botResponse = await askChatbot(input);\n      setMessages(prev => [...prev, {\n        text: botResponse,\n        sender: \"bot\"\n      }]);\n    }\n    setInput(\"\");\n    setLoading(false);\n  };\n\n  // 🔹 **Send data til GPT og bestemme kategori**\n  const analyzeUserData = async userData => {\n    try {\n      const response = await fetch(\"http://localhost:5001/api/analyzeUser\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          jobStatus: userData.jobStatus,\n          goal: userData.goal\n        })\n      });\n      const result = await response.json();\n      setCategory(result.category);\n      let nextMessage = \"\";\n      if (result.category === \"a\") {\n        nextMessage = \"Du er i jobbsøking. Hvordan kan jeg hjelpe deg med CV og intervjuforberedelser?\";\n      } else if (result.category === \"b\") {\n        nextMessage = \"Du vurderer å bytte karriere. Skal vi se på hvilke muligheter som kan passe for deg?\";\n      } else if (result.category === \"c\") {\n        nextMessage = \"Du ønsker å utvikle karrieren din. Vil du ha tips om videreutdanning eller nye ferdigheter?\";\n      } else if (result.category === \"d\") {\n        nextMessage = \"Du ønsker å finne din motivasjon. La oss utforske hva som inspirerer deg!\";\n      }\n      setMessages(prev => [...prev, {\n        text: nextMessage,\n        sender: \"bot\"\n      }]);\n    } catch (error) {\n      console.error(\"❌ Feil ved analyse av brukerdata:\", error);\n      setMessages(prev => [...prev, {\n        text: \"Det oppstod en feil ved analyse av dataene dine.\",\n        sender: \"bot\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"MeyerHaugen\",\n        className: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chat-date\",\n        children: today\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-bubble ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), consent === null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"consent-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"accept\",\n        onClick: () => handleConsent(true),\n        children: \"Godta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"decline\",\n        onClick: () => handleConsent(false),\n        children: \"Avsl\\xE5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this), consent !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Skriv melding her\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: e => e.key === \"Enter\" && sendMessage(),\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: loading,\n        children: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"X/yYmbzW6TOAYCrvjVRtpngSYeM=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","askChatbot","logo","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","text","sender","consent","setConsent","input","setInput","loading","setLoading","userData","setUserData","currentStep","setCurrentStep","category","setCategory","today","Date","toLocaleDateString","weekday","day","month","questions","key","fetch","method","catch","error","console","handleConsent","userConsent","prev","sendMessage","trim","userMessage","length","updatedUserData","summary","name","age","jobStatus","goal","headers","body","JSON","stringify","data","analyzeUserData","botResponse","response","result","json","nextMessage","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","onClick","type","placeholder","value","onChange","e","target","onKeyPress","disabled","_c","$RefreshReg$"],"sources":["/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeniør - bachelor/3.året/Bachelor/Bacheloroppgave/chatbot/src/components/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { askChatbot } from \"../utils/langchainChatbot\";\nimport \"./Styling/Chatbot.css\";\nimport logo from \"./media/logo.png\";\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([\n    { text: \"Hei! Ønsker du å godta lagring av samtalen for bedre analyse?\", sender: \"bot\" }\n  ]);\n  const [consent, setConsent] = useState(null);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [userData, setUserData] = useState({});\n  const [currentStep, setCurrentStep] = useState(0);\n  const [category, setCategory] = useState(null);\n\n  // Henter dagens dato i norsk format\n  const today = new Date().toLocaleDateString(\"no-NO\", {\n    weekday: \"long\",\n    day: \"numeric\",\n    month: \"long\"\n  });\n\n  // Liste over spørsmål chatboten skal stille\n  const questions = [\n    { key: \"name\", text: \"Hva heter du?\" },\n    { key: \"age\", text: \"Hvor gammel er du?\" },\n    { key: \"jobStatus\", text: \"Er du i fast jobb, søker jobb, eller er du usikker på hva du vil?\" },\n    { key: \"goal\", text: \"Hva er målet ditt med denne samtalen?\" }\n  ];\n\n  // 🔹 **Tømmer backend-data når brukeren refresher**\n  useEffect(() => {\n    fetch(\"http://localhost:5001/api/clearData\", { method: \"POST\" })\n      .catch((error) => console.error(\"❌ Feil ved tømming av data:\", error));\n  }, []);\n\n  // 🔹 **Håndter samtykkevalg og start første spørsmål**\n  const handleConsent = async (userConsent) => {\n    setConsent(userConsent);\n    setMessages((prev) => [\n      ...prev,\n      { text: userConsent ? \"Ja, jeg godtar.\" : \"Nei, jeg ønsker ikke lagring.\", sender: \"user\" },\n      { text: \"Takk for tilbakemeldingen!\", sender: \"bot\" },\n      { text: questions[0].text, sender: \"bot\" }\n    ]);\n  };\n\n  // 🔹 **Håndter brukerens svar**\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n\n    const userMessage = { text: input, sender: \"user\" };\n    setMessages((prev) => [...prev, userMessage]);\n\n    if (currentStep < questions.length) {\n      const updatedUserData = { ...userData, [questions[currentStep].key]: input };\n      setUserData(updatedUserData);\n\n      if (currentStep + 1 < questions.length) {\n        setMessages((prev) => [...prev, { text: questions[currentStep + 1].text, sender: \"bot\" }]);\n      } else {\n        const summary = `\n          Takk for informasjonen! Her er en oppsummering:\n          - Navn: ${updatedUserData.name}\n          - Alder: ${updatedUserData.age}\n          - Jobbsituasjon: ${updatedUserData.jobStatus}\n          - Mål: ${updatedUserData.goal}\n          \n          Nå analyserer jeg informasjonen din for å hjelpe deg videre...\n        `;\n        setMessages((prev) => [...prev, { text: summary, sender: \"bot\" }]);\n\n        // **Send brukerdata til backend for lagring**\n        if (consent) {\n          await fetch(\"http://localhost:5001/api/saveData\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ consent, data: updatedUserData })\n          });\n        }\n\n        // **Send data til GPT for analyse**\n        analyzeUserData(updatedUserData);\n      }\n\n      setCurrentStep(currentStep + 1);\n    } else {\n      const botResponse = await askChatbot(input);\n      setMessages((prev) => [...prev, { text: botResponse, sender: \"bot\" }]);\n    }\n\n    setInput(\"\");\n    setLoading(false);\n  };\n\n  // 🔹 **Send data til GPT og bestemme kategori**\n  const analyzeUserData = async (userData) => {\n    try {\n      const response = await fetch(\"http://localhost:5001/api/analyzeUser\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ jobStatus: userData.jobStatus, goal: userData.goal })\n      });\n\n      const result = await response.json();\n      setCategory(result.category);\n\n      let nextMessage = \"\";\n      if (result.category === \"a\") {\n        nextMessage = \"Du er i jobbsøking. Hvordan kan jeg hjelpe deg med CV og intervjuforberedelser?\";\n      } else if (result.category === \"b\") {\n        nextMessage = \"Du vurderer å bytte karriere. Skal vi se på hvilke muligheter som kan passe for deg?\";\n      } else if (result.category === \"c\") {\n        nextMessage = \"Du ønsker å utvikle karrieren din. Vil du ha tips om videreutdanning eller nye ferdigheter?\";\n      } else if (result.category === \"d\") {\n        nextMessage = \"Du ønsker å finne din motivasjon. La oss utforske hva som inspirerer deg!\";\n      }\n\n      setMessages((prev) => [...prev, { text: nextMessage, sender: \"bot\" }]);\n\n    } catch (error) {\n      console.error(\"❌ Feil ved analyse av brukerdata:\", error);\n      setMessages((prev) => [...prev, { text: \"Det oppstod en feil ved analyse av dataene dine.\", sender: \"bot\" }]);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <header className=\"chat-header\">\n        <img src={logo} alt=\"MeyerHaugen\" className=\"logo\" />\n        <p className=\"chat-date\">{today}</p>\n      </header>\n\n      <div className=\"chatbot-messages\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`chat-bubble ${msg.sender}`}>\n            {msg.text}\n          </div>\n        ))}\n      </div>\n\n      {consent === null && (\n        <div className=\"consent-buttons\">\n          <button className=\"accept\" onClick={() => handleConsent(true)}>Godta</button>\n          <button className=\"decline\" onClick={() => handleConsent(false)}>Avslå</button>\n        </div>\n      )}\n\n      {consent !== null && (\n        <div className=\"chat-input\">\n          <input\n            type=\"text\"\n            placeholder=\"Skriv melding her\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onKeyPress={(e) => e.key === \"Enter\" && sendMessage()}\n            disabled={loading}\n          />\n          <button onClick={sendMessage} disabled={loading}>\n            ➤\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}