{"ast":null,"code":"var _jsxFileName = \"/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeni\\xF8r - bachelor/3.a\\u030Aret/Bachelor/Bacheloroppgave/chatbot/src/components/Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { initialMessage, phaseOnePrompt, phaseTwoPrompt } from \"../data/chatbotPrompts\"; // Tilpass stien\nimport { saveData, clearBackendData // valgfritt om du vil lagre data\n} from \"../api/chatbotApi\"; // Tilpass hvis du ønsker\nimport { askChatbot } from \"../utils/langchainChatbot\"; // Tilpass stien\nimport \"../styles/Chatbot.css\";\nimport logo from \"../media/logo.png\";\nimport miniLogo from \"../media/MH_logo.png\";\n\n/*\n  Chatbot.jsx:\n  - Fase = 1 => GPT bruker phaseOnePrompt (5-8 spørsmål).\n  - Fase = 2 => GPT bruker phaseTwoPrompt (7 spørsmål + oppsummering).\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  // Meldingshistorikk\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: initialMessage\n  }]);\n\n  // Samtykke (hvis du fremdeles vil bruke det)\n  const [consent, setConsent] = useState(null);\n\n  // Brukerens input + states\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [chatId, setChatId] = useState(null); // ID for samtalen\n\n  // Fase-styring: 1 = kort kartlegging, 2 = dyp motivasjon\n  const [phase, setPhase] = useState(1);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  useEffect(() => {\n    startNewChat(); // Start en ny samtale når chatboten lastes inn\n  }, []);\n\n  // Start en ny samtale og hent en ID\n  const startNewChat = async () => {\n    try {\n      const response = await axios.post(\"http://localhost:5001/saveData/start\");\n      setChatId(response.data.chatId);\n      console.log(\"Ny samtale startet med ID:\", response.data.chatId);\n    } catch (error) {\n      console.error(\"❌ Feil ved oppstart av chat:\", error);\n    }\n  };\n\n  // Tøm backend-data ved start\n  useEffect(() => {\n    clearBackendData();\n  }, []);\n\n  // Autoscroll / autofokus\n  useEffect(() => {\n    scrollToBottom();\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [messages]);\n\n  // Lagre meldinger når de oppdateres, hvis brukeren har gitt samtykke\n  useEffect(() => {\n    if (consent) {\n      saveData(consent, messages);\n    }\n  }, [messages, consent]);\n\n  // Samtykke-håndtering\n  const handleConsent = userConsent => {\n    setConsent(userConsent);\n    const userMsg = userConsent ? \"Ja, jeg godtar.\" : \"Nei, jeg ønsker ikke lagring.\";\n    const newMessages = [...messages, {\n      sender: \"user\",\n      text: userMsg\n    }, {\n      sender: \"bot\",\n      text: \"Takk for tilbakemeldingen! Da setter vi i gang. Hva heter du?\"\n    }];\n    setMessages(newMessages);\n  };\n\n  // Send melding\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n\n    // Legg til brukermelding\n    const userMessage = {\n      sender: \"user\",\n      text: input.trim()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput(\"\");\n    inputRef.current.style.height = \"30px\";\n    try {\n      await axios.post(\"http://localhost:5001/saveData/save\", {\n        chatId,\n        sender: \"user\",\n        text: input.trim()\n      });\n    } catch (error) {\n      console.error(\"❌ Feil ved lagring av melding:\", error);\n    }\n    setIsTyping(true);\n\n    // Vent litt og kall GPT\n    setTimeout(async () => {\n      let botReply = \"\";\n\n      // 1) Bygg hele konversasjonen i GPT-format\n      const conversationMessages = buildConversationForGPT([...messages, userMessage]);\n\n      // 2) Velg prompt basert på fase\n      let systemPrompt = phaseOnePrompt;\n      if (phase === 2) {\n        systemPrompt = phaseTwoPrompt;\n      }\n\n      // 3) Kall GPT\n      botReply = await askChatbot(conversationMessages, systemPrompt);\n\n      // 4) TELL antall assistent-svar i denne fasen\n      const newAssistantCount = countAssistantMessages([...messages, {\n        sender: \"bot\",\n        text: botReply\n      }], phase);\n\n      // 5) Bytt til fase 2 hvis vi er i fase 1 og GPT har passert ~5–8 meldinger\n      if (phase === 1 && newAssistantCount >= 5) {\n        const hasEnoughData = messages.some(msg => msg.sender === \"user\" && msg.text.length > 20);\n        if (hasEnoughData) {\n          setMessages(prev => [...prev, {\n            sender: \"bot\",\n            text: \"Ok, nå har vi snakket litt om hvor du er. La oss gå litt dypere – hva er det egentlig du vil?\"\n          }]);\n          setPhase(2);\n        } else {\n          setMessages(prev => [...prev, {\n            sender: \"bot\",\n            text: \"Jeg vil forstå litt mer før vi går videre. Kan du utdype litt på det vi snakket om sist?\"\n          }]);\n        }\n      }\n\n      // 6) Oppdater meldinger med GPT-svar\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: botReply\n      }]);\n      setIsTyping(false);\n      setLoading(false);\n    }, 500);\n  };\n\n  // Avslutt samtale og lagre den\n  const finishChat = async () => {\n    try {\n      const response = await axios.post(\"http://localhost:5001/saveData/finish\", {\n        chatId\n      });\n      console.log(response.data.message, \"Fil lagret på:\", response.data.filePath);\n    } catch (error) {\n      console.error(\"❌ Feil ved lagring av full samtale:\", error);\n    }\n  };\n\n  // Autoscroll\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  };\n\n  // Juster inputfeltets høyde\n  const handleInputChange = e => {\n    setInput(e.target.value);\n    e.target.style.height = \"30px\";\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"jAV/VxCPyew0OKXGLpSY1Zqatz0=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","initialMessage","phaseOnePrompt","phaseTwoPrompt","saveData","clearBackendData","askChatbot","logo","miniLogo","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","consent","setConsent","input","setInput","loading","setLoading","isTyping","setIsTyping","chatId","setChatId","phase","setPhase","messagesEndRef","inputRef","startNewChat","response","post","data","console","log","error","scrollToBottom","current","focus","handleConsent","userConsent","userMsg","newMessages","sendMessage","trim","userMessage","prev","style","height","setTimeout","botReply","conversationMessages","buildConversationForGPT","systemPrompt","newAssistantCount","countAssistantMessages","hasEnoughData","some","msg","length","finishChat","message","filePath","scrollIntoView","behavior","handleInputChange","e","target","value","scrollHeight","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeniør - bachelor/3.året/Bachelor/Bacheloroppgave/chatbot/src/components/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport {\n  initialMessage,\n  phaseOnePrompt,\n  phaseTwoPrompt,\n} from \"../data/chatbotPrompts\"; // Tilpass stien\nimport {\n  saveData,\n  clearBackendData // valgfritt om du vil lagre data\n} from \"../api/chatbotApi\"; // Tilpass hvis du ønsker\nimport { askChatbot } from \"../utils/langchainChatbot\"; // Tilpass stien\nimport \"../styles/Chatbot.css\";\nimport logo from \"../media/logo.png\";\nimport miniLogo from \"../media/MH_logo.png\";\n\n/*\n  Chatbot.jsx:\n  - Fase = 1 => GPT bruker phaseOnePrompt (5-8 spørsmål).\n  - Fase = 2 => GPT bruker phaseTwoPrompt (7 spørsmål + oppsummering).\n*/\n\nconst Chatbot = () => {\n  // Meldingshistorikk\n  const [messages, setMessages] = useState([\n    { sender: \"bot\", text: initialMessage },\n  ]);\n\n  // Samtykke (hvis du fremdeles vil bruke det)\n  const [consent, setConsent] = useState(null);\n\n  // Brukerens input + states\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [chatId, setChatId] = useState(null); // ID for samtalen\n\n  // Fase-styring: 1 = kort kartlegging, 2 = dyp motivasjon\n  const [phase, setPhase] = useState(1);\n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    startNewChat(); // Start en ny samtale når chatboten lastes inn\n  }, []);\n\n  // Start en ny samtale og hent en ID\n  const startNewChat = async () => {\n    try {\n      const response = await axios.post(\"http://localhost:5001/saveData/start\");\n      setChatId(response.data.chatId);\n      console.log(\"Ny samtale startet med ID:\", response.data.chatId);\n    } catch (error) {\n      console.error(\"❌ Feil ved oppstart av chat:\", error);\n    }\n  };\n\n  // Tøm backend-data ved start\n  useEffect(() => {\n    clearBackendData();\n  }, []);\n\n  // Autoscroll / autofokus\n  useEffect(() => {\n    scrollToBottom();\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [messages]);\n\n  // Lagre meldinger når de oppdateres, hvis brukeren har gitt samtykke\n  useEffect(() => {\n    if (consent) {\n      saveData(consent, messages);\n    }\n  }, [messages, consent]);\n\n  // Samtykke-håndtering\n  const handleConsent = (userConsent) => {\n    setConsent(userConsent);\n    const userMsg = userConsent ? \"Ja, jeg godtar.\" : \"Nei, jeg ønsker ikke lagring.\";\n    const newMessages = [\n      ...messages,\n      { sender: \"user\", text: userMsg },\n      { sender: \"bot\", text: \"Takk for tilbakemeldingen! Da setter vi i gang. Hva heter du?\" },\n    ];\n    setMessages(newMessages);\n  };\n\n  // Send melding\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n\n    // Legg til brukermelding\n    const userMessage = { sender: \"user\", text: input.trim() };\n    setMessages((prev) => [...prev, userMessage]);\n    setInput(\"\");\n    inputRef.current.style.height = \"30px\";\n\n    try {\n      await axios.post(\"http://localhost:5001/saveData/save\", {\n        chatId,\n        sender: \"user\",\n        text: input.trim(),\n      });\n    } catch (error) {\n      console.error(\"❌ Feil ved lagring av melding:\", error);\n    }\n\n    setIsTyping(true);\n\n    // Vent litt og kall GPT\n    setTimeout(async () => {\n      let botReply = \"\";\n\n      // 1) Bygg hele konversasjonen i GPT-format\n      const conversationMessages = buildConversationForGPT([...messages, userMessage]);\n\n      // 2) Velg prompt basert på fase\n      let systemPrompt = phaseOnePrompt;\n      if (phase === 2) {\n        systemPrompt = phaseTwoPrompt;\n      }\n\n      // 3) Kall GPT\n      botReply = await askChatbot(conversationMessages, systemPrompt);\n\n      // 4) TELL antall assistent-svar i denne fasen\n      const newAssistantCount = countAssistantMessages([...messages, { sender: \"bot\", text: botReply }], phase);\n\n      // 5) Bytt til fase 2 hvis vi er i fase 1 og GPT har passert ~5–8 meldinger\n      if (phase === 1 && newAssistantCount >= 5) {\n        const hasEnoughData = messages.some(msg => msg.sender === \"user\" && msg.text.length > 20);\n        \n        if (hasEnoughData) {\n          setMessages(prev => [\n            ...prev,\n            { sender: \"bot\", text: \"Ok, nå har vi snakket litt om hvor du er. La oss gå litt dypere – hva er det egentlig du vil?\" }\n          ]);\n          setPhase(2);\n        } else {\n          setMessages(prev => [\n            ...prev,\n            { sender: \"bot\", text: \"Jeg vil forstå litt mer før vi går videre. Kan du utdype litt på det vi snakket om sist?\" }\n          ]);\n        }\n      }\n\n      // 6) Oppdater meldinger med GPT-svar\n      setMessages((prev) => [...prev, { sender: \"bot\", text: botReply }]);\n\n      setIsTyping(false);\n      setLoading(false);\n    }, 500);\n  };\n\n  // Avslutt samtale og lagre den\n  const finishChat = async () => {\n    try {\n      const response = await axios.post(\"http://localhost:5001/saveData/finish\", { chatId });\n      console.log(response.data.message, \"Fil lagret på:\", response.data.filePath);\n    } catch (error) {\n      console.error(\"❌ Feil ved lagring av full samtale:\", error);\n    }\n  };\n\n  // Autoscroll\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  // Juster inputfeltets høyde\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n    e.target.style.height = \"30px\";\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n\n  return (\n    <div className=\"chat-container\">\n    </div>\n  );\n};\n\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}