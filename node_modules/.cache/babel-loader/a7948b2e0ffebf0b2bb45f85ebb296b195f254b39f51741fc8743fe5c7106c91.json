{"ast":null,"code":"var _jsxFileName = \"/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeni\\xF8r - bachelor/3.a\\u030Aret/Bachelor/Bacheloroppgave/chatbot/src/components/Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { initialMessage, phaseOnePrompt, phaseTwoPrompt } from \"../data/chatbotPrompts\"; // Tilpass stien\nimport { saveData // valgfritt om du vil lagre data\n} from \"../api/chatbotApi\"; // Tilpass hvis du ønsker\nimport { askChatbot } from \"../utils/langchainChatbot\"; // Tilpass stien\nimport \"../styles/Chatbot.css\";\nimport logo from \"../media/logo.png\";\nimport miniLogo from \"../media/MH_logo.png\";\n\n/*\n  Chatbot.jsx:\n  - Fase = 1 => GPT bruker phaseOnePrompt (5-8 spørsmål).\n  - Fase = 2 => GPT bruker phaseTwoPrompt (7 spørsmål + oppsummering).\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  // Meldingshistorikk\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: initialMessage\n  }]);\n\n  // Samtykke (hvis du fremdeles vil bruke det)\n  const [consent, setConsent] = useState(null);\n\n  // Brukerens input + states\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Fase-styring: 1 = kort kartlegging, 2 = dyp motivasjon\n  const [phase, setPhase] = useState(1);\n\n  // Teller antall meldinger fra GPT i hver fase\n  const [assistantQuestionCount, setAssistantQuestionCount] = useState(0);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // Tøm backend-data ved start\n  useEffect(() => {\n    clearBackendData();\n  }, []);\n\n  // Autoscroll / autofokus\n  useEffect(() => {\n    scrollToBottom();\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [messages]);\n\n  // Samtykke-håndtering\n  const handleConsent = userConsent => {\n    setConsent(userConsent);\n    const userMsg = userConsent ? \"Ja, jeg godtar.\" : \"Nei, jeg ønsker ikke lagring.\";\n    setMessages(prev => [...prev, {\n      sender: \"user\",\n      text: userMsg\n    }, {\n      sender: \"bot\",\n      text: \"Takk for tilbakemeldingen! Da setter vi i gang. Hva heter du?\"\n    }]);\n  };\n\n  // Send melding\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n\n    // Legg til brukermelding\n    const userMessage = {\n      sender: \"user\",\n      text: input.trim()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput(\"\");\n    inputRef.current.style.height = \"30px\";\n    setIsTyping(true);\n\n    // Vent litt og kall GPT\n    setTimeout(async () => {\n      let botReply = \"\";\n\n      // 1) Bygg hele konversasjonen i GPT-format\n      const conversationMessages = buildConversationForGPT([...messages, userMessage]);\n\n      // 2) Velg prompt basert på fase\n      let systemPrompt = phaseOnePrompt;\n      if (phase === 2) {\n        systemPrompt = phaseTwoPrompt;\n      }\n\n      // 3) Kall GPT\n      botReply = await askChatbot(conversationMessages, systemPrompt);\n\n      // 4) TELL antall assistent-svar i denne fasen\n      const newAssistantCount = countAssistantMessages([...messages, {\n        sender: \"bot\",\n        text: botReply\n      }], phase);\n\n      // 5) Bytt til fase 2 hvis vi er i fase 1 og GPT har passert ~5–8 meldinger\n      if (phase === 1 && newAssistantCount >= 8) {\n        // Legg til avslutning på kartleggingen før vi går videre til fase 2\n        // botReply = \"Takk for at du delte det. Jeg tror vi har kartlagt endel. Nå går vi over til dyp motivasjon.\";\n\n        // Sett fase til 2\n        setPhase(2);\n      }\n\n      // 6) Oppdater meldinger med GPT-svar\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: botReply\n      }]);\n      setIsTyping(false);\n      setLoading(false);\n    }, 500);\n  };\n\n  // Autoscroll\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  };\n\n  // Juster inputfeltets høyde\n  const handleInputChange = e => {\n    setInput(e.target.value);\n    e.target.style.height = \"30px\";\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"MeyerHaugen\",\n        className: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chat-date\",\n        children: new Date().toLocaleDateString(\"no-NO\", {\n          weekday: \"long\",\n          day: \"numeric\",\n          month: \"long\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: [messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.sender}`,\n        children: [msg.sender === \"bot\" ? i === messages.length - 1 ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: miniLogo,\n          alt: \"Bot\",\n          className: \"bot-avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot-avatar-placeholder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 17\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-bubble ${msg.sender}`,\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-bubble\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), consent === null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"consent-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"accept\",\n        onClick: () => handleConsent(true),\n        children: \"Godta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"decline\",\n        onClick: () => handleConsent(false),\n        children: \"Avsl\\xE5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this), consent !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: inputRef,\n        placeholder: \"Skriv melding her\",\n        value: input,\n        onChange: handleInputChange,\n        onKeyDown: e => {\n          if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            sendMessage();\n          }\n        },\n        disabled: loading,\n        rows: 1,\n        style: {\n          resize: \"none\",\n          minHeight: \"30px\",\n          maxHeight: \"200px\",\n          overflowY: \"auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: loading,\n        children: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\n/** \n * Bygg et array i GPT-format: {role: \"assistant\"|\"user\", content: \"...\"}\n * Basert på {sender: \"bot\"|\"user\", text: \"...\"} \n */\n_s(Chatbot, \"g4FAKoGIkda0bwgIOeSGVXVeaXg=\");\n_c = Chatbot;\nfunction buildConversationForGPT(allMessages) {\n  return allMessages.map(m => ({\n    role: m.sender === \"bot\" ? \"assistant\" : \"user\",\n    content: m.text\n  }));\n}\n\n/**\n * Teller hvor mange meldinger \"bot\" har kommet med i gjeldende fase.\n * Du kan velge å differensiere på om meldingen ble postet i currentPhase. Men i en enkel variant:\n */\nfunction countAssistantMessages(allMessages, currentPhase) {\n  let count = 0;\n  for (const msg of allMessages) {\n    if (msg.sender === \"bot\") {\n      count++;\n    }\n  }\n  return count;\n}\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","initialMessage","phaseOnePrompt","phaseTwoPrompt","saveData","askChatbot","logo","miniLogo","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","consent","setConsent","input","setInput","loading","setLoading","isTyping","setIsTyping","phase","setPhase","assistantQuestionCount","setAssistantQuestionCount","messagesEndRef","inputRef","clearBackendData","scrollToBottom","current","focus","handleConsent","userConsent","userMsg","prev","sendMessage","trim","userMessage","style","height","setTimeout","botReply","conversationMessages","buildConversationForGPT","systemPrompt","newAssistantCount","countAssistantMessages","scrollIntoView","behavior","handleInputChange","e","target","value","scrollHeight","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","Date","toLocaleDateString","weekday","day","month","map","msg","i","length","ref","onClick","placeholder","onChange","onKeyDown","key","shiftKey","preventDefault","disabled","rows","resize","minHeight","maxHeight","overflowY","_c","allMessages","m","role","content","currentPhase","count","$RefreshReg$"],"sources":["/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeniør - bachelor/3.året/Bachelor/Bacheloroppgave/chatbot/src/components/Chatbot.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  initialMessage,\n  phaseOnePrompt,\n  phaseTwoPrompt,\n} from \"../data/chatbotPrompts\"; // Tilpass stien\nimport {\n  \n  saveData, // valgfritt om du vil lagre data\n} from \"../api/chatbotApi\"; // Tilpass hvis du ønsker\nimport { askChatbot } from \"../utils/langchainChatbot\"; // Tilpass stien\nimport \"../styles/Chatbot.css\";\nimport logo from \"../media/logo.png\";\nimport miniLogo from \"../media/MH_logo.png\";\n\n/*\n  Chatbot.jsx:\n  - Fase = 1 => GPT bruker phaseOnePrompt (5-8 spørsmål).\n  - Fase = 2 => GPT bruker phaseTwoPrompt (7 spørsmål + oppsummering).\n*/\n\nconst Chatbot = () => {\n  // Meldingshistorikk\n  const [messages, setMessages] = useState([\n    { sender: \"bot\", text: initialMessage },\n  ]);\n\n  // Samtykke (hvis du fremdeles vil bruke det)\n  const [consent, setConsent] = useState(null);\n\n  // Brukerens input + states\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n\n  // Fase-styring: 1 = kort kartlegging, 2 = dyp motivasjon\n  const [phase, setPhase] = useState(1);\n\n  // Teller antall meldinger fra GPT i hver fase\n  const [assistantQuestionCount, setAssistantQuestionCount] = useState(0);\n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // Tøm backend-data ved start\n  useEffect(() => {\n    clearBackendData();\n  }, []);\n\n  // Autoscroll / autofokus\n  useEffect(() => {\n    scrollToBottom();\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [messages]);\n\n  // Samtykke-håndtering\n  const handleConsent = (userConsent) => {\n    setConsent(userConsent);\n    const userMsg = userConsent ? \"Ja, jeg godtar.\" : \"Nei, jeg ønsker ikke lagring.\";\n    setMessages((prev) => [\n      ...prev,\n      { sender: \"user\", text: userMsg },\n      { sender: \"bot\", text: \"Takk for tilbakemeldingen! Da setter vi i gang. Hva heter du?\" },\n    ]);\n  };\n\n  // Send melding\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n\n    // Legg til brukermelding\n    const userMessage = { sender: \"user\", text: input.trim() };\n    setMessages((prev) => [...prev, userMessage]);\n    setInput(\"\");\n    inputRef.current.style.height = \"30px\";\n\n    setIsTyping(true);\n\n    // Vent litt og kall GPT\n    setTimeout(async () => {\n      let botReply = \"\";\n\n      // 1) Bygg hele konversasjonen i GPT-format\n      const conversationMessages = buildConversationForGPT([...messages, userMessage]);\n\n      // 2) Velg prompt basert på fase\n      let systemPrompt = phaseOnePrompt;\n      if (phase === 2) {\n        systemPrompt = phaseTwoPrompt;\n      }\n\n      // 3) Kall GPT\n      botReply = await askChatbot(conversationMessages, systemPrompt);\n\n      // 4) TELL antall assistent-svar i denne fasen\n      const newAssistantCount = countAssistantMessages([...messages, { sender: \"bot\", text: botReply }], phase);\n\n      // 5) Bytt til fase 2 hvis vi er i fase 1 og GPT har passert ~5–8 meldinger\n      if (phase === 1 && newAssistantCount >= 8) {\n        // Legg til avslutning på kartleggingen før vi går videre til fase 2\n        // botReply = \"Takk for at du delte det. Jeg tror vi har kartlagt endel. Nå går vi over til dyp motivasjon.\";\n\n        // Sett fase til 2\n        setPhase(2);\n      }\n\n      // 6) Oppdater meldinger med GPT-svar\n      setMessages((prev) => [...prev, { sender: \"bot\", text: botReply }]);\n\n      setIsTyping(false);\n      setLoading(false);\n    }, 500);\n  };\n\n  // Autoscroll\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  // Juster inputfeltets høyde\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n    e.target.style.height = \"30px\";\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <header className=\"chat-header\">\n        <img src={logo} alt=\"MeyerHaugen\" className=\"logo\" />\n        <p className=\"chat-date\">\n          {new Date().toLocaleDateString(\"no-NO\", { weekday: \"long\", day: \"numeric\", month: \"long\" })}\n        </p>\n      </header>\n\n      <div className=\"chatbot-messages\">\n        {messages.map((msg, i) => (\n          <div key={i} className={`chat-message ${msg.sender}`}>\n            {msg.sender === \"bot\" ? (\n              i === messages.length - 1 ? (\n                <img src={miniLogo} alt=\"Bot\" className=\"bot-avatar\" />\n              ) : (\n                <div className=\"bot-avatar-placeholder\"></div>\n              )\n            ) : null}\n            <div className={`chat-bubble ${msg.sender}`}>{msg.text}</div>\n          </div>\n        ))}\n\n        {isTyping && (\n          <div className=\"typing-bubble\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n        )}\n\n        <div ref={messagesEndRef} />\n      </div>\n\n      {consent === null && (\n        <div className=\"consent-buttons\">\n          <button className=\"accept\" onClick={() => handleConsent(true)}>Godta</button>\n          <button className=\"decline\" onClick={() => handleConsent(false)}>Avslå</button>\n        </div>\n      )}\n\n      {consent !== null && (\n        <div className=\"chat-input\">\n          <textarea\n            ref={inputRef}\n            placeholder=\"Skriv melding her\"\n            value={input}\n            onChange={handleInputChange}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\" && !e.shiftKey) {\n                e.preventDefault();\n                sendMessage();\n              }\n            }}\n            disabled={loading}\n            rows={1}\n            style={{ resize: \"none\", minHeight: \"30px\", maxHeight: \"200px\", overflowY: \"auto\" }}\n          />\n          <button onClick={sendMessage} disabled={loading}>\n            ➤\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\n/** \n * Bygg et array i GPT-format: {role: \"assistant\"|\"user\", content: \"...\"}\n * Basert på {sender: \"bot\"|\"user\", text: \"...\"} \n */\nfunction buildConversationForGPT(allMessages) {\n  return allMessages.map((m) => ({\n    role: m.sender === \"bot\" ? \"assistant\" : \"user\",\n    content: m.text,\n  }));\n}\n\n/**\n * Teller hvor mange meldinger \"bot\" har kommet med i gjeldende fase.\n * Du kan velge å differensiere på om meldingen ble postet i currentPhase. Men i en enkel variant:\n */\nfunction countAssistantMessages(allMessages, currentPhase) {\n  let count = 0;\n  for (const msg of allMessages) {\n    if (msg.sender === \"bot\") {\n      count++;\n    }\n  }\n  return count;\n}\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}