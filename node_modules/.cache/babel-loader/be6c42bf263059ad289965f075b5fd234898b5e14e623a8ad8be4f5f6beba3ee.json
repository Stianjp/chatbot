{"ast":null,"code":"var _jsxFileName = \"/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeni\\xF8r - bachelor/3.a\\u030Aret/Bachelor/Bacheloroppgave/chatbot/src/Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { askChatbot } from \"./langchainChatbot\";\nimport \"./Styling/Chatbot.css\"; // Importer CSS-filen\nimport logo from \"./media/logo.png\"; // Importer logo\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    text: \"Hei! Ønsker du å godta lagring av samtalen for bedre analyse?\",\n    sender: \"bot\"\n  }]);\n  const [consent, setConsent] = useState(null);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [userData, setUserData] = useState({});\n  const [currentStep, setCurrentStep] = useState(0);\n\n  // Henter dagens dato i norsk format\n  const today = new Date().toLocaleDateString(\"no-NO\", {\n    weekday: \"long\",\n    day: \"numeric\",\n    month: \"long\"\n  });\n\n  // Liste over spørsmål chatboten skal stille\n  const questions = [{\n    key: \"name\",\n    text: \"Hva heter du?\"\n  }, {\n    key: \"age\",\n    text: \"Hvor gammel er du?\"\n  }, {\n    key: \"jobStatus\",\n    text: \"Er du i fast jobb, søker jobb, eller er du usikker på hva du vil?\"\n  }, {\n    key: \"Goal\",\n    text: \"Hva er målet ditt med denne samtalen?\"\n  }];\n\n  // Håndter samtykkevalg og start første spørsmål\n  const handleConsent = async userConsent => {\n    setConsent(userConsent);\n    setMessages(prev => [...prev, {\n      text: userConsent ? \"Ja, jeg godtar.\" : \"Nei, jeg ønsker ikke lagring.\",\n      sender: \"user\"\n    }, {\n      text: \"Takk for tilbakemeldingen!\",\n      sender: \"bot\"\n    }, {\n      text: questions[0].text,\n      sender: \"bot\"\n    }]);\n\n    // Start lagring av JSON hvis samtykke er gitt\n    if (userConsent) {\n      await fetch(\"http://localhost:5001/api/saveData\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          consent: userConsent,\n          data: {}\n        })\n      });\n    }\n  };\n\n  // Håndter brukerens svar\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n    const userMessage = {\n      text: input,\n      sender: \"user\"\n    };\n    setMessages(prev => [...prev, userMessage]);\n    if (currentStep < questions.length) {\n      const updatedUserData = {\n        ...userData,\n        [questions[currentStep].key]: input\n      };\n      setUserData(updatedUserData);\n      setCurrentStep(currentStep + 1);\n      if (currentStep + 1 < questions.length) {\n        setMessages(prev => [...prev, {\n          text: questions[currentStep + 1].text,\n          sender: \"bot\"\n        }]);\n      } else {\n        const summary = `\n          Takk for informasjonen! Her er en oppsummering:\n          - Navn: ${updatedUserData.name}\n          - Alder: ${updatedUserData.age}\n          - Jobbsituasjon: ${updatedUserData.jobStatus}\n          - Mål: ${updatedUserData.Goal}\n          \n          Nå kan vi gå videre og kartlegge dine styrker. Hva vil du vite mer om?\n        `;\n        setMessages(prev => [...prev, {\n          text: summary,\n          sender: \"bot\"\n        }]);\n\n        // Lagre data i JSON-filen\n        if (consent) {\n          await fetch(\"http://localhost:5001/api/saveData\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              consent,\n              data: updatedUserData\n            })\n          });\n        }\n      }\n    } else {\n      const botResponse = await askChatbot(input);\n      setMessages(prev => [...prev, {\n        text: botResponse,\n        sender: \"bot\"\n      }]);\n    }\n    setInput(\"\");\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"MeyerHaugen\",\n        className: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chat-date\",\n        children: today\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-bubble ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), consent === null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"consent-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"accept\",\n        onClick: () => handleConsent(true),\n        children: \"Godta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"decline\",\n        onClick: () => handleConsent(false),\n        children: \"Avsl\\xE5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this), consent !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Skriv melding her\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: e => e.key === \"Enter\" && sendMessage(),\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: loading,\n        children: \"\\u27A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"kTDnfJ7M+wo7saS/+Bobua0Bn5M=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","askChatbot","logo","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","text","sender","consent","setConsent","input","setInput","loading","setLoading","userData","setUserData","currentStep","setCurrentStep","today","Date","toLocaleDateString","weekday","day","month","questions","key","handleConsent","userConsent","prev","fetch","method","headers","body","JSON","stringify","data","sendMessage","trim","userMessage","length","updatedUserData","summary","name","age","jobStatus","Goal","botResponse","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","onClick","type","placeholder","value","onChange","e","target","onKeyPress","disabled","_c","$RefreshReg$"],"sources":["/Users/stianjohanpettersen/Library/CloudStorage/OneDrive-OsloMet/Dataingeniør - bachelor/3.året/Bachelor/Bacheloroppgave/chatbot/src/Chatbot.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { askChatbot } from \"./langchainChatbot\";\nimport \"./Styling/Chatbot.css\"; // Importer CSS-filen\nimport logo from \"./media/logo.png\"; // Importer logo\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([\n    { text: \"Hei! Ønsker du å godta lagring av samtalen for bedre analyse?\", sender: \"bot\" }\n  ]);\n  const [consent, setConsent] = useState(null);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [userData, setUserData] = useState({});\n  const [currentStep, setCurrentStep] = useState(0);\n\n  // Henter dagens dato i norsk format\n  const today = new Date().toLocaleDateString(\"no-NO\", {\n    weekday: \"long\",\n    day: \"numeric\",\n    month: \"long\"\n  });\n\n  // Liste over spørsmål chatboten skal stille\n  const questions = [\n    { key: \"name\", text: \"Hva heter du?\" },\n    { key: \"age\", text: \"Hvor gammel er du?\" },\n    { key: \"jobStatus\", text: \"Er du i fast jobb, søker jobb, eller er du usikker på hva du vil?\" },\n    { key: \"Goal\", text: \"Hva er målet ditt med denne samtalen?\" }\n  ];\n\n  // Håndter samtykkevalg og start første spørsmål\n  const handleConsent = async (userConsent) => {\n    setConsent(userConsent);\n    setMessages((prev) => [\n      ...prev,\n      { text: userConsent ? \"Ja, jeg godtar.\" : \"Nei, jeg ønsker ikke lagring.\", sender: \"user\" },\n      { text: \"Takk for tilbakemeldingen!\", sender: \"bot\" },\n      { text: questions[0].text, sender: \"bot\" }\n    ]);\n\n    // Start lagring av JSON hvis samtykke er gitt\n    if (userConsent) {\n      await fetch(\"http://localhost:5001/api/saveData\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ consent: userConsent, data: {} })\n      });\n    }\n  };\n\n  // Håndter brukerens svar\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setLoading(true);\n\n    const userMessage = { text: input, sender: \"user\" };\n    setMessages((prev) => [...prev, userMessage]);\n\n    if (currentStep < questions.length) {\n      const updatedUserData = { ...userData, [questions[currentStep].key]: input };\n      setUserData(updatedUserData);\n      setCurrentStep(currentStep + 1);\n\n      if (currentStep + 1 < questions.length) {\n        setMessages((prev) => [...prev, { text: questions[currentStep + 1].text, sender: \"bot\" }]);\n      } else {\n        const summary = `\n          Takk for informasjonen! Her er en oppsummering:\n          - Navn: ${updatedUserData.name}\n          - Alder: ${updatedUserData.age}\n          - Jobbsituasjon: ${updatedUserData.jobStatus}\n          - Mål: ${updatedUserData.Goal}\n          \n          Nå kan vi gå videre og kartlegge dine styrker. Hva vil du vite mer om?\n        `;\n        setMessages((prev) => [...prev, { text: summary, sender: \"bot\" }]);\n\n        // Lagre data i JSON-filen\n        if (consent) {\n          await fetch(\"http://localhost:5001/api/saveData\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ consent, data: updatedUserData })\n          });\n        }\n      }\n    } else {\n      const botResponse = await askChatbot(input);\n      setMessages((prev) => [...prev, { text: botResponse, sender: \"bot\" }]);\n    }\n\n    setInput(\"\");\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <header className=\"chat-header\">\n        <img src={logo} alt=\"MeyerHaugen\" className=\"logo\" />\n        <p className=\"chat-date\">{today}</p>\n      </header>\n\n      <div className=\"chatbot-messages\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`chat-bubble ${msg.sender}`}>\n            {msg.text}\n          </div>\n        ))}\n      </div>\n\n      {consent === null && (\n        <div className=\"consent-buttons\">\n          <button className=\"accept\" onClick={() => handleConsent(true)}>Godta</button>\n          <button className=\"decline\" onClick={() => handleConsent(false)}>Avslå</button>\n        </div>\n      )}\n\n      {consent !== null && (\n        <div className=\"chat-input\">\n          <input\n            type=\"text\"\n            placeholder=\"Skriv melding her\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onKeyPress={(e) => e.key === \"Enter\" && sendMessage()}\n            disabled={loading}\n          />\n          <button onClick={sendMessage} disabled={loading}>\n            ➤\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}